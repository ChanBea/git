=pod

=head1 NAME

openssl-glossary - An OpenSSL Glossary

=head1 DESCRIPTION

=for comment Please keep the items in case-insensitive alphabetical order

=over 4

=item Algorithm

Cryptographic primitives such as the SHA256 digest, or AES encryption are
referred to in OpenSSL as "algorithms". There can be more than one
implementation for any given algorithm available for use.

L<crypto(7)>

=item ASN.1, ASN1

ASN.1 ("Abstract Syntax Notation One") is a notation for describing abstract
types and values.  It is defined in the ITU-T documents X.680 to X.683:

L<https://www.itu.int/rec/T-REC-X.680>,
L<https://www.itu.int/rec/T-REC-X.681>,
L<https://www.itu.int/rec/T-REC-X.682>,
L<https://www.itu.int/rec/T-REC-X.683>

=item Asymmetric Keypair

A pair of related keys (L</Public key> and L</Private key>) used to perform
cryptographic operations.

=item Base Provider

An OpenSSL Provider that contains encoders and decoders for OpenSSL keys.  All
the algorithm implementations in the Base Provider are also available in the
Default Provider.

L<OSSL_PROVIDER-base(7)>

=item Brute-force attack

An attack on an L</Algorithm> that attempts to correctly guess a input password or secret,
normally by trying every possibly input in order to produce an existing output. It is
important to use a sufficiently long key length, since longer keys take exponentially longer to attack.

=item Certificate

Certificates are used to prove the validity of a L</Public key>.

=item Certificate Authority (CA)

A CA is normally a company that charges customers to issue certificates for them.


=item Certificate chain

A list of certificates. The list normally starts with the end (leaf) certificate followed by one or more
CA certificates. The last certificate is normally self signed.

=item Ciphertext

The output of a encryption algorithm. Decryption of ciphertext results in the L</Plaintext>
that was used as input to the encryption algorithm.

=item Confidentiality

Protection of data from unauthorized access.

=item Data integrity

Ensures data has not been modified in an unauthorized manner.

=item Decoder

A decoder is a type of algorithm used for decoding keys and parameters from some
external format such as PEM or DER.

L<OSSL_DECODER_CTX_new_for_pkey(3)>

=item Default Provider

An OpenSSL Provider that contains the most common OpenSSL algorithm
implementations. It is loaded by default if no other provider is available. All
the algorithm implementations in the Base Provider are also available in the
Default Provider.

L<OSSL_PROVIDER-default(7)>

=item DER ("Distinguished Encoding Rules")

DER is a binary encoding of data, structured according to an ASN.1
specification.  This is a common encoding used for cryptographic objects
such as private and public keys, certificates, CRLs, ...

It is defined in ITU-T document X.690:

L<https://www.itu.int/rec/T-REC-X.690>

=item Deterministic

For a given algorithm, the same set of inputs will produce the same output.
Hash Functions and Key Derivation Functions are examples.

=item Encoder

An encoder is a type of algorithm used for encoding keys and parameters to some
external format such as PEM or DER.

L<OSSL_ENCODER_CTX_new_for_pkey(3)>

=item Entropy

Entropy refers to the randomness collected by a system for use in algorithms that require random seeds.
A lack of good entropy can leave a cryptographic system vulnerable and unable to encrypt data securely.
See L</Psuedo-random number>.

=item Ephemeral key pair

A key pair, consisting of a public key (i.e., an ephemeral public key)
and a private key (i.e., an ephemeral private key) that is intended for
a very short period of use. The key pair is ordinarily used in exactly
one transaction of a cryptographic scheme. The public key of an ephemeral key
pair is not provided in a public key certificate. See also L</Static key
pair>.

=item Explicit Fetching

Explicit Fetching is a type of Fetching (see L</Fetching>). Explicit Fetching is
where a function call is made to obtain an algorithm object representing an
implementation such as L<EVP_MD_fetch(3)> or L<EVP_CIPHER_fetch(3)>

=item Fetching

Fetching is the process of looking through the available algorithm
implementations, applying selection criteria (via a property query string), and
finally choosing the implementation that will be used.

Also see L</Explicit Fetching>, L</Implicit Fetching>
and L<crypto(7)/ALGORITHM FETCHING>.

=item FIPS Provider

An OpenSSL Provider that contains OpenSSL algorithm implementations that have
been validated according to the FIPS 140-2 standard.

See L<OSSL_PROVIDER-FIPS(7)> for the algorithms that are supported. Note that this
is a subset of the algorithms with the L</Default Provider>.

=item Implicit Fetching

Implicit Fetching is a type of Fetching (see Fetching). Implicit Fetching is
where an algorithm object with no associated implementation is used such as the
return value from L<EVP_sha256(3)> or L<EVP_aes_128_cbc(3)>. With implicit
fetching an implementation is fetched automatically using default selection
criteria the first time the algorithm is used.

=item Legacy Provider

An OpenSSL Provider that contains algorithm implementations that are considered
insecure or are no longer in common use.

L<OSSL_PROVIDER-legacy(7)>

=item Library Context

A Library Context in OpenSSL is represented by the type B<OSSL_LIB_CTX>. It can
be thought of as a scope within which configuration options apply. If an
application does not explicitly create a library context then the "default"
one is used. Many OpenSSL functions can take a library context as an argument.
A NULL value can always be passed to indicate the default library context.

L<OSSL_LIB_CTX(3)>

=item MSBLOB

MSBLOB is a Microsoft specific binary format for RSA and DSA keys, both
private and public.  This form is never passphrase protected.

=item Non-repudiation

Assurance that the L</Sender> of information is provided with proof of delivery and
that the L</Recipient> is provided with proof of the L</Sender>'s identity, so
that neither can later deny having processed the information.

=item Nonce

A nonce is an arbitrary number used only once in a cryptographic communication,
which is often a random or L</Psuedo-random number>.

=item Null Provider

An OpenSSL Provider that contains no algorithm implementations. This can be
useful to prevent the default provider from being automatically loaded in a
library context.

L<OSSL_PROVIDER-null(7)>

=item One-way function

A function that for any input it is easy to compute an output, but it is 'hard' to invert.
i.e, Determine the input given an output value.

=item Operation

An operation is a group of OpenSSL functions with a common purpose such as
encryption, or digesting.

L<crypto(7)>

=item PEM ("Privacy Enhanced Message")

PEM is a format used for encoding of binary content into a mail and ASCII
friendly form.  The content is a series of base64-encoded lines, surrounded
by begin/end markers each on their own line.  For example:

 -----BEGIN PRIVATE KEY-----
 MIICdg....
 ... bhTQ==
 -----END PRIVATE KEY-----

Optional header line(s) may appear after the begin line, and their existence
depends on the type of object being written or read.

For all OpenSSL uses, the binary content is expected to be a DER encoded
structure.

This is defined in IETF RFC 1421:

L<https://tools.ietf.org/html/rfc1421>

=item PKCS#8

PKCS#8 is a specification of ASN.1 structures that OpenSSL uses for storing
or transmitting any private key in a key type agnostic manner.
There are two structures worth noting for OpenSSL use, one that contains the
key data in unencrypted form (known as "PrivateKeyInfo") and an encrypted
wrapper structure (known as "EncryptedPrivateKeyInfo").

This is specified in RFC 5208:

L<https://tools.ietf.org/html/rfc5208>

=item Plaintext

Any data that can be viewed or used without requiring a key or decryption.
Plaintext is used as input to an encryption algorithm. See also L</Ciphertext>

=item Private key

Part of a L<crypto(7)/Asymmetric Keypair> that must be kept secret.

=item Property

A property is a way of classifying and selecting algorithm implementations.
A property is a key/value pair expressed as a string. For example all algorithm
implementations in the default provider have the property "provider=default".
An algorithm implementation can have multiple properties defined against it.

Also see Property Query String.

L<property(7)>

=item Property Query String

A property query string is a string containing a sequence of properties that
can be used to select an algorithm implementation. For example the query string
"provider=example,foo=bar" will select algorithms from the "example" provider
that have a "foo" property defined for them with a value of "bar".

Property Query Strings are used during fetching. See Fetching.

L<property(7)>

=item Provider

A provider in OpenSSL is a component that groups together algorithm
implementations. Providers can come from OpenSSL itself or from third parties.

L<provider(7)>

=item PVK

PVK is a Microsoft specific binary format for RSA and DSA private keys.
This form may be passphrase protected.

=item Psuedo-random number

A number that is produced by a L</Deterministic> algorithm called a pseudo-random number generator (PRNG),
which has the unpredictability of a truly random sequence. The initial input supplied to the PRNG is
called a random seed (See L</Entropy>). As the PRNG is deterministic it is important that the seed be well
chosen and kept hidden, especially in security applications, where the pattern's unpredictability is a
critical feature.

=item Public key

Part of a L</Asymmetric Keypair> that can be made available to anyone,
(Often by using a digital L</Certificate>.
See L<crypto(7)/Public key cryptography>

=item Recipient

The entity that 'receives' data from a L</Sender> or L</Signer>.

=item SubjectPublicKeyInfo

SubjectPublicKeyInfo is an ASN.1 structure that OpenSSL uses for storing and
transmitting any public key in a key type agnostic manner.

This is specified as part of the specification for certificates, RFC 5280:

L<https://tools.ietf.org/html/rfc5280>

=item Security strength

A number associated with the amount of work (number of operations), that is required to break a cryptographic algorithm or system.
It is normally expressed as a strength in bits with a value of 80, 112, 128, 192 or 256.

=item Sender

The entity that 'sends' data (such as secret keying material) to another entity L</Recipient>.

=item Signer

The entity that creates a Digital Signature.

=item Static key pair

A long-term key pair for which the public key is often provided in a public-key
certificate. See also L</Ephemeral key pair>.

=item Symmetric Key

A secret key that must not be made public that is used for both encryption and decryption of data.
See L<crypto(7)/Symmetric encryption>. Contrast this with a L</Asymmetric Keypair>.

=back

=head1 HISTORY

This glossary was added in OpenSSL 3.0.

=head1 COPYRIGHT

Copyright 2020-2022 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
