=pod

=head1 NAME

password handling - How diverse parts of OpenSSL treat pass phrases

=head1 DESCRIPTION

In a modern world with all sorts of character encodings, the treatment of pass
phrases has become increasingly complex.
This manual page attempts to give an overview over how this problem is
currently addressed in different parts of the openssl library.

=head2 The general case

The OpenSSL library doesn't treat pass phrases in any special way as a general
rule, and trusts the application or user to choose a suitable character set
and stick to that throughout the life of affected objects.
This means that for an object that was encrypted using a pass phrase encoded in
ISO-8859-1, that object needs to be decrypted using a pass phrase encoded in
ISO-8859-1.
Anything else will have the decryption fail.

=head2 PKCS#12

PKCS#12 is a bit different regarding pass phrase encoding.
The standard stipulates that the pass phrase shall be encoded as a BMPString,
i.e. UCS-2 BE.

OpenSSL tries to adapt to this requirements in one of the following manners:

=over 4

=item 1.

Tries to read the pass phrase as UTF-8 and re-encode that to UTF-16 (which is
the same as UCS-2 for characters U+0000 to U+D7FF and U+E000 to U+FFFF, but
becomes an expansion for any other character), or failing that, proceeds with
step 2.

=item 2.

Assumes that the pass phrase is encoded in ASCII or ISO-8859-1 and
opportunistically prepends each byte with a zero byte and uses the result
as a BMPString.

Note that since there is no check of your locale, this may produce UCS-2 /
UTF-16 characters that do not correspond to the original pass phrase characters
for other character sets, such as any ISO-8859-X other than ISO-8859-1.

=back

OpenSSL versions older than 1.1.0 do variant 2 only, and that is the reason why
OpenSSL still does this, to be able to read files produced with older versions.

It should be noted that this approach isn't entirely fault free.
A passphrase encoded in ISO-8859-1 could very well have a sequence such as
0xC3 0xAF (which is the two characters "LATIN CAPITAL LETTER A WITH TILDE"
and "MACRON" in ISO-8859-1 encoding), but would be misunterpreted as the
perfectly valid UTF-8 encoded U+00EF (LATIN SMALL LETTER I WITH DIARESIS).

=head2 OSSL_STORE

L<ossl_store(7)> acts as a general interface to access all kinds of objects,
potentially protected with a pass phrase, a PIN or something else.
This API currently doesn't stipulate any specific encoding of pass phrases, but
uses the underlying routines with their behaviours.
This means that when using the built-in C<file:> scheme loader, the pass phrase
to unlock a PKCS#12 file will be treated as described for PKCS#12 above, and
the pass phrase for a PEM files will be treated as the general case described
above, since that loader uses the same underlying routines.
I<Note that other loaders will have their own behaviours>.

=head1 RECOMMENDATIONS

For creating new pass phrase protected objects, make sure the pass phrase is
encoded using UTF-8.  This is default on most modern Unixes, but may involve an
effort on other platforms.

For opening pass phrase protected objects where you know what character
encoding was used, make sure the pass phrase you used is encoded with the same
character encoding (that is, has the exact same byte sequence).

For opening pass phrase protected objects where the character encoding that was
used is unknown, or where the producing application is unknown, try one of the
following:

=over 4

=item 1.

Convert the pass phrase to UTF-8 and try with the result.  Specifically with
PKCS#12, this should open up any object that are created according to spec.

=item 2.

Do a na√Øve (i.e. purely mathematical) ISO-8859-1 to UTF-8 conversion and try
with the result.  This differs from the previous attempt because ISO-8859-1
maps directly to U+0000 to U+00FF, which other non-UTF-8 character sets do
not.

=item 3.

Try the password (i.e. the byte sequence) that you have as it is, no
conversion.  It's possible that it's the exact right sequence, it's also
possible that it contains a byte sequence that OpenSSL will interpret as a
UTF-8 encoded character and will recode accordingly.  This probably only works
with objects created with OpenSSL older than 1.1.0.

=back

=head1 SEE ALSO

L<evp(7)>,
L<ossl_store(7)>,
L<EVP_BytesToKey(3)>, L<EVP_DecryptInit(3)>,
L<PEM_do_header(3)>,
L<PKCS12_parse(3)>, L<PKCS12_newpass(3)>,
L<d2i_PKCS8PrivateKey_bio(3)>

=head1 COPYRIGHT

Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
