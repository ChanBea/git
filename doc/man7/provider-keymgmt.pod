=pod

=head1 NAME

provider-keymgmt - The KEYMGMT library E<lt>-E<gt> provider functions

=head1 SYNOPSIS

 #include <openssl/core_numbers.h>

 /*
  * None of these are actual functions, but are displayed like this for
  * the function signatures for functions that are offered as function
  * pointers in OSSL_DISPATCH arrays.
  */

 /* Key object (keydata) creation and destruction */
 void *OP_keymgmt_new(void *provctx);
 void OP_keymgmt_free(void *keydata);

 /* Key object information */
 int OP_keymgmt_get_params(void *keydata, OSSL_PARAM params[]);
 const OSSL_PARAM *OP_keymgmt_gettable_params(void);

 /* Key object content checks */
 int OP_keymgmt_has_domparams(void *keydata);
 int OP_keymgmt_has_public_key(void *keydata);
 int OP_keymgmt_has_private_key(void *keydata);

 /* Discovery of supported operations */
 const char *OP_keymgmt_query_operation_name(int operation_id);

 /* Key object import and export functions */
 int OP_keymgmt_import(int selection, void *keydata, const OSSL_PARAM params[]);
 const OSSL_PARAM *OP_keymgmt_import_types, (int selection);
 int OP_keymgmt_export(int selection, void *keydata,
                       OSSL_CALLBACK *param_cb, void *cbarg);
 const OSSL_PARAM *OP_keymgmt_export_types(int selection);

 /* Key object validation */
 int OP_keymgmt_validate_domparams(void *keydata);
 int OP_keymgmt_validate_public(void *keydata);
 int OP_keymgmt_validate_private(void *keydata);
 int OP_keymgmt_validate_pairwise(void *keydata);

 /* Discovery of supported operations */
 const char *OP_keymgmt_query_operation_name(int operation_id);

=head1 DESCRIPTION

The KEYMGMT operation doesn't have much public visibility in OpenSSL
libraries, it's rather an internal operation that's designed to work
in tandem with operations that use private/public key pairs.

Because the KEYMGMT operation shares knowledge with the operations it
works with in tandem, they must belong to the same provider.
The OpenSSL libraries will ensure that they do.

The primary responsibility of the KEYMGMT operation is to hold the
provider side key data for the OpenSSL library EVP_PKEY structure.

All "functions" mentioned here are passed as function pointers between
F<libcrypto> and the provider in B<OSSL_DISPATCH> arrays via
B<OSSL_ALGORITHM> arrays that are returned by the provider's
provider_query_operation() function
(see L<provider-base(7)/Provider Functions>).

All these "functions" have a corresponding function type definition
named B<OSSL_{name}_fn>, and a helper function to retrieve the
function pointer from a B<OSSL_DISPATCH> element named
B<OSSL_get_{name}>.
For example, the "function" OP_keymgmt_importdomparams() has these:

 typedef void *(OSSL_OP_keymgmt_new_fn)(void *provctx);
 static ossl_inline OSSL_OP_keymgmt_new_fn
     OSSL_get_OP_keymgmt_new(const OSSL_DISPATCH *opf);

B<OSSL_DISPATCH> arrays are indexed by numbers that are provided as
macros in L<openssl-core_numbers.h(7)>, as follows:

 OP_keymgmt_new                  OSSL_FUNC_KEYMGMT_NEW
 OP_keymgmt_free                 OSSL_FUNC_KEYMGMT_FREE

 OP_keymgmt_get_params           OSSL_FUNC_KEYMGMT_GET_PARAMS
 OP_keymgmt_gettable_params      OSSL_FUNC_KEYMGMT_GETTABLE_PARAMS

 OP_keymgmt_has_domparams        OSSL_FUNC_KEYMGMT_HAS_DOMPARAMS
 OP_keymgmt_has_public_key       OSSL_FUNC_KEYMGMT_HAS_PUBLIC_KEY
 OP_keymgmt_has_private_key      OSSL_FUNC_KEYMGMT_HAS_PRIVATE_KEY

 OP_keymgmt_query_operation_name OSSL_FUNC_KEYMGMT_QUERY_OPERATION_NAME

 OP_keymgmt_import               OSSL_FUNC_KEYMGMT_IMPORT
 OP_keymgmt_import_types         OSSL_FUNC_KEYMGMT_IMPORT_TYPES
 OP_keymgmt_export               OSSL_FUNC_KEYMGMT_EXPORT
 OP_keymgmt_export_types         OSSL_FUNC_KEYMGMT_EXPORT_TYPES

 OP_keymgmt_validate_domparams   OSSL_FUNC_KEYMGMT_VALIDATE_DOMPARAMS
 OP_keymgmt_validate_public      OSSL_FUNC_KEYMGMT_VALIDATE_PUBLIC
 OP_keymgmt_validate_private     OSSL_FUNC_KEYMGMT_VALIDATE_PRIVATE
 OP_keymgmt_validate_pairwise    OSSL_FUNC_KEYMGMT_VALIDATE_PAIRWISE

=head2 Constructing and Destructing Functions

OP_keymgmt_new() should create a provider side key object.  The
provider context I<provctx> is passed and may be incorporated in the
key object, but that is not mandatory.

OP_keymgmt_free() should free the passed I<keydata>.

The constructor and destructor are mandatory, a KEYMGMT implementation
without them will not be accepted.

=for comment when new constructors appear, it's sufficient if only one
of them is present.  The remark above will have to change to reflect
that.

=head2 Key Object Information Functions

OP_keymgmt_get_params() should extract information data associated
with the given I<keydata>, see L</Information Parameters>.

OP_keymgmt_gettable_params() should return a constant array of
descriptor B<OSSL_PARAM>, for parameters that OP_keymgmt_get_params()
can handle.

If OP_keymgmt_gettable_params() is present, OP_keymgmt_get_params()
must also be present.

=head2 Key Object Content Checking Functions

OP_keymgmt_has_domparams(), OP_keymgmt_has_public_key(), and
OP_keymgmt_has_private_key() should check whether the given I<keydata>
contains domain parameters, a public key, and a private key,
respectively.

=head2 Key Object Import and Export Functions

OP_keymgmt_import() should import data indicated by I<selection> into
I<keydata> with values taken from the B<OSSL_PARAM> array I<params>.

OP_keymgmt_export() should extract values indicated by I<selection>
from I<keydata>, create an B<OSSL_PARAM> array with them and call
I<param_cb> with that array as well as the given I<cbarg>.

OP_keymgmt_import_types() should return a constant array of descriptor
B<OSSL_PARAM> for data indicated by I<selection>, for parameters that
OP_keymgmt_import() can handle.

OP_keymgmt_export_types() should return a constant array of descriptor
B<OSSL_PARAM> for data indicated by I<selection>, that the
OP_keymgmt_export() callback can expect to receive.

The indicator I<selection> is further explained in
L</Import and Export Selections>.

If OP_keymgmt_import_types() is present, OP_keymgmt_import() must also
be present.
Likewise, if OP_keymgmt_export_types() is present, OP_keymgmt_export()
must also be present.

=head2 Key Object Validation Functions

OP_keymgmt_validate_domparams() should check if I<keydata> contains
valid domain parameters.

OP_keymgmt_validate_public() should check if I<keydata> contains a
valid public key.

OP_keymgmt_validate_public() should check if I<keydata> contains a
valid private key.

OP_keymgmt_validate_pairwise() should check that the pairwise
consistency of I<keydata> is valid.

=head2 Supported Operations

OP_keymgmt_query_operation_name() should return the name of the
supported algorithm for the operation I<operation_id>.  This is
similar to provider_query_operation() (see L<provider-base(7)>),
but only works as an advisory.  If this function is not present, or
returns NULL, the caller is free to assume that there's an algorithm
from the same provider, of the same name as the one used to fetch the
keymgmt and try to use that.

=head2 Import and Export Selections

The I<selection> given to OP_keymgmt_import() and OP_keymgmt_export()
indicates what values of the I<keydata> are of interest.  It can be
one of:

=over 4

=item B<OSSL_KEYMGMT_WANT_DOMPARAMS>

to indicate that only the domain parameters are interesting.

=item B<OSSL_KEYMGMT_WANT_KEY>

to indicate that only the key data (the data that constitutes the
private and the public keys) are interesting.

=item B<OSSL_KEYMGMT_WANT_BOTH>

to indicate that both the domain parameters and the key data are
intesting.

=back

=head2 Information Parameters

See L<OSSL_PARAM(3)> for further details on the parameters structure.

Parameters currently recognised by built-in keymgmt algorithms'
OP_keymgmt_get_domparams_params() and OP_keymgmt_get_key_params()
are:

=over 4

=item "bits" (B<OSSL_PKEY_PARAM_BITS>) <integer>

The value should be the cryptographic length of the cryptosystem to
which the key belongs, in bits.  The definition of cryptographic
length is specific to the key cryptosystem.

=item "max-size" (B<OSSL_PKEY_PARAM_MAX_SIZE>) <integer>

The value should be the maximum size that a caller should allocate to
safely store a signature (called I<sig> in L<provider-signature(7)>),
the result of asymmmetric encryption / decryption (I<out> in
L<provider-asym_cipher(7)>, a derived secret (I<secret> in
L<provider-keyexch(7)>, and similar data).

Because an EVP_KEYMGMT method is always tightly bound to another method
(signature, asymmetric cipher, key exchange, ...) and must be of the
same provider, this number only needs to be synchronised with the
dimensions handled in the rest of the same provider.

=item "security-bits" (B<OSSL_PKEY_PARAM_SECURITY_BITS>) <integer>

The value should be the number of security bits of the given key.
Bits of security is defined in SP800-57.

=back

=head1 SEE ALSO

L<provider(7)>

=head1 HISTORY

The KEYMGMT interface was introduced in OpenSSL 3.0.

=head1 COPYRIGHT

Copyright 2019-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
