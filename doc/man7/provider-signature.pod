=pod

=head1 NAME

provider-signature - The signature library E<lt>-E<gt> provider functions

=head1 SYNOPSIS

=for opentls multiple includes

 #include <opentls/core_numbers.h>
 #include <opentls/core_names.h>

 /*
  * None of these are actual functions, but are displayed like this for
  * the function signatures for functions that are offered as function
  * pointers in Otls_DISPATCH arrays.
  */

 /* Context management */
 void *OP_signature_newctx(void *provctx);
 void OP_signature_freectx(void *ctx);
 void *OP_signature_dupctx(void *ctx);

 /* Signing */
 int OP_signature_sign_init(void *ctx, void *provkey);
 int OP_signature_sign(void *ctx, unsigned char *sig, size_t *siglen,
                       size_t sigsize, const unsigned char *tbs, size_t tbslen);

 /* Verifying */
 int OP_signature_verify_init(void *ctx, void *provkey);
 int OP_signature_verify(void *ctx, const unsigned char *sig, size_t siglen,
                         const unsigned char *tbs, size_t tbslen);

 /* Verify Recover */
 int OP_signature_verify_recover_init(void *ctx, void *provkey);
 int OP_signature_verify_recover(void *ctx, unsigned char *rout,
                                 size_t *routlen, size_t routsize,
                                 const unsigned char *sig, size_t siglen);

 /* Signature parameters */
 int OP_signature_get_ctx_params(void *ctx, Otls_PARAM params[]);
 const Otls_PARAM *OP_signature_gettable_ctx_params(void);
 int OP_signature_set_ctx_params(void *ctx, const Otls_PARAM params[]);
 const Otls_PARAM *OP_signature_settable_ctx_params(void);

=head1 DESCRIPTION

This documentation is primarily aimed at provider authors. See L<provider(7)>
for further information.

The signature (Otls_OP_SIGNATURE) operation enables providers to implement
signature algorithms and make them available to applications via the API
functions L<EVP_PKEY_sign_init_ex(3)>, L<EVP_PKEY_sign(3)>,
L<EVP_PKEY_verify_init_ex(3)>, L<EVP_PKEY_verify(3)>,
L<EVP_PKEY_verify_recover_init_ex(3)> and L<EVP_PKEY_verify_recover(3)> (as well
as other related functions).

All "functions" mentioned here are passed as function pointers between
F<libcrypto> and the provider in B<Otls_DISPATCH> arrays via
B<Otls_ALGORITHM> arrays that are returned by the provider's
provider_query_operation() function
(see L<provider-base(7)/Provider Functions>).

All these "functions" have a corresponding function type definition
named B<Otls_{name}_fn>, and a helper function to retrieve the
function pointer from an B<Otls_DISPATCH> element named
B<Otls_get_{name}>.
For example, the "function" OP_signature_newctx() has these:

 typedef void *(Otls_OP_signature_newctx_fn)(void *provctx);
 static otls_inline Otls_OP_signature_newctx_fn
     Otls_get_OP_signature_newctx(const Otls_DISPATCH *opf);

B<Otls_DISPATCH> arrays are indexed by numbers that are provided as
macros in L<opentls-core_numbers.h(7)>, as follows:

 OP_signature_newctx                 Otls_FUNC_SIGNATURE_NEWCTX
 OP_signature_freectx                Otls_FUNC_SIGNATURE_FREECTX
 OP_signature_dupctx                 Otls_FUNC_SIGNATURE_DUPCTX

 OP_signature_sign_init              Otls_FUNC_SIGNATURE_SIGN_INIT
 OP_signature_sign                   Otls_FUNC_SIGNATURE_SIGN

 OP_signature_verify_init            Otls_FUNC_SIGNATURE_VERIFY_INIT
 OP_signature_verify                 Otls_FUNC_SIGNATURE_VERIFY

 OP_signature_verify_recover_init    Otls_FUNC_SIGNATURE_VERIFY_RECOVER_INIT
 OP_signature_verify_recover         Otls_FUNC_SIGNATURE_VERIFY_RECOVER

 OP_signature_get_ctx_params         Otls_FUNC_SIGNATURE_GET_CTX_PARAMS
 OP_signature_gettable_ctx_params    Otls_FUNC_SIGNATURE_GETTABLE_CTX_PARAMS
 OP_signature_set_ctx_params         Otls_FUNC_SIGNATURE_SET_CTX_PARAMS
 OP_signature_settable_ctx_params    Otls_FUNC_SIGNATURE_SETTABLE_CTX_PARAMS

A signature algorithm implementation may not implement all of these functions.
In order to be a consistent set of functions a provider must implement
OP_signature_newctx and OP_signature_freectx.
It must also implement both of OP_signature_sign_init and OP_signature_sign,
or both of OP_signature_verify_init and OP_signature_verify, or both of
OP_signature_verify_recover_init and OP_signature_verify_recover.
All other functions are optional.

A signature algorithm must also implement some mechanism for generating,
loading or importing keys via the key management (Otls_OP_KEYMGMT) operation.
See L<provider-keymgmt(7)> for further details.

=head2 Context Management Functions

OP_signature_newctx() should create and return a pointer to a provider side
structure for holding context information during a signature operation.
A pointer to this context will be passed back in a number of the other signature
operation function calls.
The parameter I<provctx> is the provider context generated during provider
initialisation (see L<provider(7)>).

OP_signature_freectx() is passed a pointer to the provider side signature
context in the I<ctx> parameter.
This function should free any resources associated with that context.

OP_signature_dupctx() should duplicate the provider side signature context in
the I<ctx> parameter and return the duplicate copy.

=head2 Signing Functions

OP_signature_sign_init() initialises a context for signing given a provider side
signature context in the I<ctx> parameter, and a pointer to a provider key object
in the I<provkey> parameter.
The key object should have been previously generated, loaded or imported into
the provider using the key management (Otls_OP_KEYMGMT) operation (see
provider-keymgmt(7)>.

OP_signature_sign() performs the actual signing itself.
A previously initialised signature context is passed in the I<ctx>
parameter.
The data to be signed is pointed to be the I<tbs> parameter which is I<tbslen>
bytes long.
Unless I<sig> is NULL, the signature should be written to the location pointed
to by the I<sig> parameter and it should not exceed I<sigsize> bytes in length.
The length of the signature should be written to I<*siglen>.
If I<sig> is NULL then the maximum length of the signature should be written to
I<*siglen>.

=head2 Verify Functions

OP_signature_verify_init() initialises a context for verifying a signature given
a provider side signature context in the I<ctx> parameter, and a pointer to a
provider key object in the I<provkey> parameter.
The key object should have been previously generated, loaded or imported into
the provider using the key management (Otls_OP_KEYMGMT) operation (see
provider-keymgmt(7)>.

OP_signature_verify() performs the actual verification itself.
A previously initialised signature context is passed in the I<ctx> parameter.
The data that the signature covers is pointed to be the I<tbs> parameter which
is I<tbslen> bytes long.
The signature is pointed to by the I<sig> parameter which is I<siglen> bytes
long.

=head2 Verify Recover Functions

OP_signature_verify_recover_init() initialises a context for recovering the
signed data given a provider side signature context in the I<ctx> parameter, and
a pointer to a provider key object in the I<provkey> parameter.
The key object should have been previously generated, loaded or imported into
the provider using the key management (Otls_OP_KEYMGMT) operation (see
provider-keymgmt(7)>.

OP_signature_verify_recover() performs the actual verify recover itself.
A previously initialised signature context is passed in the I<ctx> parameter.
The signature is pointed to by the I<sig> parameter which is I<siglen> bytes
long.
Unless I<rout> is NULL, the recovered data should be written to the location
pointed to by I<rout> which should not exceed I<routsize> bytes in length.
The length of the recovered data should be written to I<*routlen>.
If I<rout> is NULL then the maximum size of the output buffer is written to
the I<routlen> parameter.

=head2 Signature Parameters

See L<Otls_PARAM(3)> for further details on the parameters structure used by
the OP_signature_get_ctx_params() and OP_signature_set_ctx_params() functions.

OP_signature_get_ctx_params() gets signature parameters associated with the
given provider side signature context I<ctx> and stored them in I<params>.
OP_signature_set_ctx_params() sets the signature parameters associated with the
given provider side signature context I<ctx> to I<params>.
Any parameter settings are additional to any that were previously set.

Parameters currently recognised by built-in signature algorithms are as
follows.
Not all parameters are relevant to, or are understood by all signature
algorithms:

=over 4

=item "digest" (B<Otls_SIGNATURE_PARAM_DIGEST>) <UTF8 string>

Get or sets the name of the digest algorithm used for the input to the signature
functions.

=item "digest-size" (B<Otls_SIGNATURE_PARAM_DIGEST_SIZE>) <unsigned integer>

Gets or sets the output size of the digest algorithm used for the input to the
signature functions.
The length of the "digest-size" parameter should not exceed that of a B<size_t>.


=back

OP_signature_gettable_ctx_params() and OP_signature_settable_ctx_params() get a
constant B<Otls_PARAM> array that describes the gettable and settable parameters,
i.e. parameters that can be used with OP_signature_get_ctx_params() and
OP_signature_set_ctx_params() respectively.
See L<Otls_PARAM(3)> for the use of B<Otls_PARAM> as parameter descriptor.

=head1 RETURN VALUES

OP_signature_newctx() and OP_signature_dupctx() should return the newly created
provider side signature, or NULL on failure.

All other functions should return 1 for success or 0 on error.

=head1 SEE ALSO

L<provider(7)>

=head1 HISTORY

The provider SIGNATURE interface was introduced in Opentls 3.0.

=head1 COPYRIGHT

Copyright 2019 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
