=pod

=head1 NAME

ossl_store - Store retrieval functions

=head1 SYNOPSIS

=for comment generic

#include <openssl/store.h>

=head1 DESCRIPTION

=head2 General

A STORE is a layer of functionality to retrieve a number of supported
objects from a repository of any kind, addressable as a file name or
as a URI.

The functionality supports the pattern "open a channel to the
repository", "loop and retrieve one object at a time", and "finish up
by closing the channel".

The retrieved objects are returned as a wrapper type B<OSSL_STORE_INFO>,
from which an OpenSSL type can be retrieved.

=head2 URI schemes and loaders

Support for a URI scheme is called a STORE "loader", and can be added
dynamically from the calling application or from a loadable engine.

Support for the 'file' scheme is built into C<libcrypto>.
See L<ossl_store-file(7)> for more information.

Pass phrases received through the B<UI_METHOD> that was passed through
OSSL_STORE_open() are used as is for most object types.  However,
where pass phrases for PKCS#12 objects contain non-ASCII characters,
careful consideration is required.  The 'file' scheme loader will
attempt to decrypt the object by interpreting the provided passphrase
in three encodings.  Each of these three encodings may be required in
order to decrypt files generated with different versions of OpenSSL or
other software:

=over 4

=item -

UTF-8.

=item -

ISO8859-1.

=item -

The character encoding corresponding to C<LC_CTYPE> on a POSIX
compatible system, or C<CP_ACP> on Windows.

=back

The above interpretations are designed to achieve compatibility with
current and older versions of OpenSSL when the passphrase provided by
the B<UI_METHOD> is in the native (i.e. C<LC_CTYPE>/C<CP_ACP>)
encoding.  If the B<UI_METHOD> returns a passphrase encoded in UTF-8
where the native encoding is not ISO-8859-1 or UTF-8, that will
suffice to decrypt correctly generated PKCS#12 objects but may not
work for objects created by OpenSSL.

On POSIX systems, setting C<LC_CTYPE> correctly requires explicit
action from the application.  The most usual method is to call
setlocale() as follows as part of program startup:

    setlocale(LC_CTYPE, "");

When operating in a locale which uses neither UTF-8 nor ISO8859-1
(each of which is attempted anyway), setting C<LC_CTYPE> correctly may
be necessary in order to decrypt PKCS#12 objects created by compliant
software.

=head1 EXAMPLES

=head2 A generic call

 OSSL_STORE_CTX *ctx = OSSL_STORE_open("file:/foo/bar/data.pem");

 /*
  * OSSL_STORE_eof() simulates file semantics for any repository to signal
  * that no more data can be expected
  */
 while (!OSSL_STORE_eof(ctx)) {
     OSSL_STORE_INFO *info = OSSL_STORE_load(ctx);

     /*
      * Do whatever is necessary with the OSSL_STORE_INFO,
      * here just one example
      */
     switch (OSSL_STORE_INFO_get_type(info)) {
     case OSSL_STORE_INFO_X509:
         /* Print the X.509 certificate text */
         X509_print_fp(stdout, OSSL_STORE_INFO_get0_CERT(info));
         /* Print the X.509 certificate PEM output */
         PEM_write_X509(stdout, OSSL_STORE_INFO_get0_CERT(info));
         break;
     }
 }

 OSSL_STORE_close(ctx);

=head1 SEE ALSO

L<OSSL_STORE_INFO(3)>, L<OSSL_STORE_LOADER(3)>,
L<OSSL_STORE_open(3)>, L<OSSL_STORE_expect(3)>,
L<OSSL_STORE_SEARCH(3)>

=head1 COPYRIGHT

Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
