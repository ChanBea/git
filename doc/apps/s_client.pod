
=pod

=head1 NAME

s_client - SSL/TLS client program

=head1 SYNOPSIS

B<openssl s_client>
[B<-connect> I<host>[B<:>I<port>]
[B<-proxy> I<host>B<:>I<port>]
[B<-servername> I<name>]
[B<-verify> I<depth>]
[B<-verify_return_error>]
[B<-cert> I<filename>]
[B<-certform> B<DER>|B<PEM>]
[B<-key> I<filename>]
[B<-keyform> B<DER>|B<PEM>]
[B<-pass> I<arg>]
[B<-CApath> I<directory>]
[B<-CAfile> I<filename>]
[B<-no-CAfile>]
[B<-no-CApath>]
[B<-attime> I<timestamp>]
[B<-check_ss_sig>]
[B<-crl_check>]
[B<-crl_check_all>]
[B<-explicit_policy>]
[B<-extended_crl>]
[B<-ignore_critical>]
[B<-inhibit_any>]
[B<-inhibit_map>]
[B<-issuer_checks>]
[B<-partial_chain>]
[B<-policy arg>]
[B<-policy_check>]
[B<-policy_print>]
[B<-purpose purpose>]
[B<-suiteB_128>]
[B<-suiteB_128_only>]
[B<-suiteB_192>]
[B<-trusted_first>]
[B<-no_alt_chains>]
[B<-use_deltas>]
[B<-verify_depth num>]
[B<-verify_email email>]
[B<-verify_hostname hostname>]
[B<-verify_ip ip>]
[B<-verify_name name>]
[B<-x509_strict>]
[B<-reconnect>]
[B<-pause>]
[B<-showcerts>]
[B<-debug>]
[B<-msg>]
[B<-nbio_test>]
[B<-state>]
[B<-nbio>]
[B<-crlf>]
[B<-ign_eof>]
[B<-no_ign_eof>]
[B<-quiet>]
[B<-ssl3>]
[B<-tls1>]
[B<-no_ssl3>]
[B<-no_tls1>]
[B<-no_tls1_1>]
[B<-no_tls1_2>]
[B<-fallback_scsv>]
[B<-async>]
[B<-bugs>]
[B<-cipher> I<cipherlist>]
[B<-serverpref>]
[B<-starttls> I<protocol>]
[B<-xmpphost> I<hostname>]
[B<-engine> I<id>]
[B<-tlsextdebug>]
[B<-no_ticket>]
[B<-sess_out> I<filename>]
[B<-sess_in> I<filename>]
[B<-rand file(s)>]
[B<-serverinfo> I<types>]
[B<-status>]
[B<-nextprotoneg> I<protocols>]

=head1 DESCRIPTION

The B<s_client> command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.
It is a I<very> useful diagnostic tool for SSL servers.

=head1 OPTIONS

In addition to the options below, the B<s_client> utility also supports the common and client only options documented in the in the L<SSL_CONF_cmd(3)|SSL_CONF_cmd(3)/SUPPORTED COMMAND LINE COMMANDS> manual page.

=over 4

=item B<-connect> I<host>[B<:>I<port>]

This specifies the host and optional port to connect to.
If not specified, then an attempt is made to connect to the local host on port 4433.

=item B<-proxy> I<host>B<:>I<port>

When used with the B<-connect> flag, the program uses the host and port specified with this flag and issues an HTTP CONNECT command to connect to the desired server.

=item B<-servername> I<name>

Set the TLS SNI (Server Name Indication) extension in the ClientHello message.

=item B<-cert> I<certname>

The certificate to use, if one is requested by the server.
The default is not to use a certificate.

=item B<-certform> I<format>

The certificate format to use: B<DER> or <PEM>.
B<PEM> is the default.

=item B<-key> I<keyfile>

The private key to use.
If not specified, then the certificate file will be used.

=item B<-keyform> I<format>

The private format to use: B<DER> or B<PEM>.
B<PEM> is the default.

=item B<-pass> I<arg>

The private key password source.
For more information about the format of I<arg>, see the B<PASS PHRASE ARGUMENTS> section in L<openssl(1)>.

=item B<-verify> I<depth>

The verify depth to use.
This specifies the maximum length of the server certificate chain and turns on server certificate verification.
Currently, the verify operation continues after errors, so all the problems with a certificate chain can be seen.
As a side effect, the connection will never fail due to a server certificate verify failure.

=item B<-verify_return_error>

Return verification errors instead of continuing.
This will typically abort the handshake with a fatal error.

=item B<-CApath> I<directory>

The directory to use for server certificate verification.
This directory must be in "hash format"; see B<verify> for more information.
These are also used when building the client certificate chain.

=item B<-CAfile> I<file>

A file containing trusted certificates to use during server authentication and to use when attempting to build the client certificate chain.

=item B<-no-CAfile>

Do not load the trusted CA certificates from the default file location.

=item B<-no-CApath>

Do not load the trusted CA certificates from the default directory location.

=item B<-attime>, B<-check_ss_sig>, B<-crl_check>, B<-crl_check_all>, B<explicit_policy>, B<-extended_crl>, B<-ignore_critical>, B<-inhibit_any>, B<-inhibit_map>, B<-issuer_checks>, B<-partial_chain>, B<-policy>, B<-policy_check>, B<-policy_print>, B<-purpose>, B<-suiteB_128>, B<-suiteB_128_only>, B<-suiteB_192>, B<-trusted_first>, B<-no_alt_chains>, B<-use_deltas>, B<-verify_depth>, B<-verify_email>, B<-verify_hostname>, B<-verify_ip>, B<-verify_name>, B<-x509_strict>

Set various certificate chain validation options.
See the L<verify(1)> manual page for details.

=item B<-reconnect>

Reconnects to the same server 5 times using the same session ID.
This can be used as a test that session caching is working.

=item B<-pause>

Pauses 1 second between each read and write call.

=item B<-showcerts>

Display the whole server certificate chain.
Normally only the server certificate itself is displayed.

=item B<-prexit>

Print session information when the program exits.
This will always attempt to print out information, even if the connection fails.
Normally information will only be printed out once if the connection succeeds.
This option is useful because the cipher in use may be renegotiated, or the connection may fail because a client certificate is required or is requested only after an attempt is made to access a certain URL.
Note: the output produced by this option is not always accurate because a connection might never have been established.

=item B<-state>

Prints out the SSL session states.

=item B<-debug>

Print extensive debugging information, including a hex dump of all traffic.

=item B<-msg>

Show all protocol messages with hex dump.

=item B<-trace>

Show verbose trace output of protocol messages.
OpenSSL needs to be compiled with B<enable-ssl-trace> for this option to work.

=item B<-msgfile>

File to send output of B<-msg> or B<-trace> to.
Default is standard output.

=item B<-nbio_test>

Tests non-blocking I/O.

=item B<-nbio>

Turns on non-blocking I/O.

=item B<-crlf>

Translates line feeds from the terminal into CR+LF, as required by some servers.

=item B<-ign_eof>

Inhibit shutting down the connection when end of file is reached in the input.

=item B<-quiet>

Inhibit printing of session and certificate information.
This implicitly turns on B<-ign_eof> as well.

=item B<-no_ign_eof>

Shut down the connection when end of file is reached in the input.
Can be used to override the implicit B<-ign_eof> after B<-quiet>.

=item B<-psk_identity> I<identity>

Use the PSK identity I<identity> when using a PSK cipher suite.

=item B<-psk> I<key>

Use the PSK key I<key> when using a PSK cipher suite.
The key is given as a hexadecimal number without a leading 0x; for example, C<-psk 1a2b3c4d>.

=item B<-ssl3>, B<-tls1>, B<-no_ssl3>, B<-no_tls1>, B<-no_tls1_1>, B<-no_tls1_2>

These options disable the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method which should be compatible with all servers and permit them to use SSL v3 or TLS as appropriate.
Unfortunately, there are still ancient and broken servers in use which cannot handle this technique and will fail to connect.
Some servers only work if TLS is turned off.

=item B<-fallback_scsv>

Send TLS_FALLBACK_SCSV in the ClientHello.

=item B<-async>

switch on asynchronous mode. Cryptographic operations will be performed
asynchronously. This will only have an effect if an asynchronous capable engine
is also used via the B<-engine> option. For test purposes the dummy async engine
(dasync) can be used (if available).

=item B<-bugs>

There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.

=item B<-brief>

Only provide a brief summary of connection parameters instead of the normal verbose output.

=item B<-cipher> I<cipherlist>

This allows the cipher list sent by the client to be modified.
Although the server determines which cipher suite is used, it should take the first supported cipher in the list sent by the client.
See the B<ciphers> command for more information.

=item B<-starttls> I<protocol>

Send the protocol-specific message(s) to switch to TLS for communication.
I<protocol> is a keyword for the intended protocol.
Currently, the only supported keywords are B<smtp>, B<pop3>, B<imap>, B<ftp>, B<xmpp>, B<xmpp-server>, and B<irc>.

=item B<-xmpphost> I<hostname>

This option, when used with C<-starttls xmpp> or C<-starttls xmpp-server>, specifies the host for the "to" attribute of the stream element.
If this option is not specified, then the host specified with B<-connect> will be used.

=item B<-tlsextdebug>

Print out a hex dump of any TLS extensions received from the server.

=item B<-no_ticket>

Disable RFC4507bis session ticket support. 

=item B<-sess_out> I<filename>

Output SSL session to I<filename>.

=item B<-sess_in> I<filename>

Load SSL session from B<filename>.
The client will attempt to resume a connection from this session.

=item B<-engine> I<id>

Specifying an engine (by its unique I<id> string) will cause B<s_client> to attempt to obtain a functional reference to the specified engine, thus initialising it if needed.
The engine will then be set as the default for all available algorithms.

=item B<-rand> I<files>

A file or files containing random data used to seed the random number generator, or an EGD socket (see L<RAND_egd(3)>).
Multiple files can be specified separated by a OS-dependent character.
The separator is B<;> for MS-Windows, B<,> for OpenVMS, and B<:> for all others.

=item B<-serverinfo> I<types>

A list of comma-separated TLS Extension Types (numbers between 0 and 65535).
Each type will be sent as an empty ClientHello TLS Extension.
The server's response (if any) will be encoded and displayed as a PEM file.

=item B<-status>

Sends a certificate status request to the server (OCSP stapling).
The server response (if any) is printed out.

=item B<-nextprotoneg> I<protocols>

Enable the Next Protocol Negotiation TLS extension and provide a list of comma-separated protocol names that the client should advertise support for.
The list should contain most-wanted protocols first.
Protocol names are printable ASCII strings; for example, "http/1.1" "spdy/3".
An empty I<protocols> list is treated specially and will cause the client to advertise support for the TLS extension but disconnect just after receiving ServerHello with a list of server supported protocols.

=back

=head1 CONNECTED COMMANDS

If a connection is established with an SSL server, then any data received from the server is displayed and any key presses will be sent to the server.
When used interactively (which means neither B<-quiet> nor B<-ign_eof> have been given), the session will be renegotiated if the line begins with an B<R>, and if the line begins with a B<Q> or if end of file is reached, the connection will be closed down.

=head1 NOTES

B<s_client> can be used to debug SSL servers.
To connect to an SSL HTTP server the command:

 openssl s_client -connect servername:443

would typically be used (HTTPS uses port 443).
If the connection succeeds then an HTTP command can be given, such as C<GET /> to retrieve a web page.

If the handshake fails then there are several possible causes.
If it is nothing obvious (like an absent client certificate), then the B<-bugs>, B<-ssl3>, B<-tls1>, B<-no_ssl3>, B<-no_tls1> options can be tried in case it is a buggy server.
In particular, you should play with these options B<before> submitting a bug report to an OpenSSL mailing list.

A frequent problem when attempting to get client certificates working is that a web client complains it has no certificates or gives an empty list to choose from.
This is normally because the server is not sending the client's certificate authority in its "acceptable CA list" when it requests a certificate.
By using B<s_client>, the CA list can be viewed and checked.
However, some servers only request client authentication after a specific URL is requested.
To obtain the list in this case, it is necessary to use the B<-prexit> option and send an HTTP request for an appropriate page.

If a certificate is specified on the command line using the B<-cert> option, it will not be used unless the server specifically requests a client certificate.
Therefore, merely including a client certificate on the command line is no guarantee that the certificate works.

If there are problems verifying a server certificate, then the B<-showcerts> option can be used to show the whole chain.

The B<s_client> utility is a test tool and is designed to continue the handshake after any certificate verification errors by the client.
As a result, it will accept any certificate chain (trusted or not) sent by the peer.
Non-test applications should B<not> do this as it makes them vulnerable to a MITM attack.
This behaviour can be changed by with the B<-verify_return_error> option: any verify errors are then returned, aborting the handshake.

=head1 BUGS

Because this program has a lot of options and also because some of the techniques used are rather old, the C source of B<s_client> is rather hard to read and not a model of how things should be done.
A typical SSL client program would be much simpler.

The B<-prexit> option is a bit of a hack.
We should really report information whenever a session is renegotiated.

=head1 SEE ALSO

L<sess_id(1)>, L<s_server(1)>, L<ciphers(1)>

=head1 HISTORY

The B<-no_alt_chains> options was first added to OpenSSL 1.1.0.

=cut
