=pod

=for comment openssl_manual_section:5

=head1 NAME

x509v3_config - X509 V3 certificate extension configuration format

=head1 DESCRIPTION

Several of the OpenSSL utilities can add extensions to a certificate or certificate request based on the contents of a configuration file.

Typically the application will contain an option to point to an extension section.
Each line of the extension section takes the form:

 extension_name=[critical,] extension_options

If B<critical> is present then the extension will be critical.

The format of B<extension_options> depends on the value of B<extension_name>.

There are four main types of extension: B<string> extensions, B<multi-valued> extensions, B<raw> extensions, and B<arbitrary> extensions.

String extensions simply have a string which contains either the value itself or how it is obtained.

For example:

 nsComment="This is a Comment"

Multi-valued extensions have a short form and a long form.
The short form is a list of names and values:

 basicConstraints=critical,CA:true,pathlen:1

The long form allows the values to be placed in a separate section:

 basicConstraints=critical,@bs_section

 [bs_section]

 CA=true
 pathlen=1

Both forms are equivalent.

The syntax of raw extensions is governed by the extension code: it can, for example, contain data in multiple sections.
The correct syntax to use is defined by the extension code itself.
Check out the certificate policies extension for an example.

If an extension type is unsupported, then the B<arbitrary> extension syntax must be used; see the L<ARBITRARY EXTENSIONS|/"ARBITRARY EXTENSIONS"> section for more details.

=head2 STANDARD EXTENSIONS

The following sections describe each supported extension in detail.

=head2 Basic Constraints

This is a multi-valued extension which indicates whether a certificate is a CA certificate.
The first (mandatory) name is B<CA>, followed by B<TRUE> or B<FALSE>.
If B<CA> is B<true> then an optional B<pathlen> name followed by a non-negative value can be included.

For example:

 basicConstraints=CA:TRUE

 basicConstraints=CA:FALSE

 basicConstraints=critical,CA:TRUE, pathlen:0

A CA certificate B<must> include the B<basicConstraints> extension with the B<CA> field set to B<TRUE>.
An end user certificate must either set B<CA> to B<FALSE> or exclude the extension entirely.
Some software may require the inclusion of B<basicConstraints> with B<CA> set to B<FALSE> for end entity certificates.

The pathlen parameter indicates the maximum number of CAs that can appear below this one in a chain.
So if you have a CA with a pathlen of zero it can only be used to sign end user certificates, and not further CAs.


=head2 Key Usage

Key usage is a multi-valued extension consisting of a list of names of the permitted key usages.

The supported names are: B<digitalSignature>, B<nonRepudiation>, B<keyEncipherment>, B<dataEncipherment>, B<keyAgreement>, B<keyCertSign>, B<cRLSign>, B<encipherOnly> and B<decipherOnly>.

Examples:

 keyUsage=digitalSignature, nonRepudiation

 keyUsage=critical, keyCertSign


=head2 Extended Key Usage

This extension consists of a list of usages indicating purposes for which the certificate public key can be used.

These can either be object short names or the dotted numerical form of OIDs.
While any OID can be used, only certain values make sense.
In particular, the following PKIX, NS, and MS values are meaningful:

 Value              Meaning
 -----              -------
 serverAuth         SSL/TLS Web Server Authentication.
 clientAuth         SSL/TLS Web Client Authentication.
 codeSigning        Code signing.
 emailProtection    E-mail Protection (S/MIME).
 timeStamping       Trusted Timestamping
 msCodeInd          Microsoft Individual Code Signing (authenticode)
 msCodeCom          Microsoft Commercial Code Signing (authenticode)
 msCTLSign          Microsoft Trust List Signing
 msEFS              Microsoft Encrypted File System

Examples:

 extendedKeyUsage=critical,codeSigning,1.2.3.4
 extendedKeyUsage=serverAuth,clientAuth


=head2 Subject Key Identifier

This is really a string extension and can take two possible values.
Either the word B<hash> which will automatically follow the guidelines in RFC3280, or a hex string giving the extension value to include.
The use of the hex string is strongly discouraged.

Example:

 subjectKeyIdentifier=hash


=head2 Authority Key Identifier

The authority key identifier extension permits two options: B<keyid> and B<issuer>.
Both can take the optional value B<always>.

If the B<keyid> option is present, an attempt is made to copy the subject key identifier from the parent certificate.
If the value B<always> is present, then an error is returned if the attempt fails.

The B<issuer> option copies the issuer and serial number from the issuer certificate.
This will only be done if the B<keyid> option fails or is not included, unless the B<always> flag is specified, in which case the value will always be copied.

Example:

 authorityKeyIdentifier=keyid,issuer

=head2 Subject Alternative Name

The subject alternative name extension allows various literal values to be included in the configuration file.
These include B<email> (an email address), B<URI> (a uniform resource indicator), B<DNS> (a DNS domain name), B<RID> (a registered ID: OBJECT IDENTIFIER), B<IP> (an IP address), B<dirName> (a distinguished name), and B<otherName>.

The B<email> option allows a special B<copy> value.
This will automatically include any email addresses contained in the certificate subject name in the extension.

The IP address used in the B<IP> option can be in either IPv4 or IPv6 format.

The value of B<dirName> should point to a section containing the distinguished name to use as a set of name-value pairs.
Multi-valued AVAs can be formed by prefacing the name with a B<+> character.

B<otherName> can include arbitrary data associated with an OID.
The value should be the OID followed by a semicolon and the content in standard L<ASN1_generate_nconf(3)> format.

Examples:

 subjectAltName=email:copy,email:my@other.address,URI:http://my.url.here/
 subjectAltName=IP:192.168.7.1
 subjectAltName=IP:13::17
 subjectAltName=email:my@other.address,RID:1.2.3.4
 subjectAltName=otherName:1.2.3.4;UTF8:some other identifier

 subjectAltName=dirName:dir_sect

 [dir_sect]
 C=UK
 O=My Organization
 OU=My Unit
 CN=My Name


=head2 Issuer Alternative Name

The issuer alternative name option supports all the literal options of subject alternative name.
It does B<not> support the B<email:copy> option because that would not make sense.
It does support an additional B<issuer:copy> option that will copy all the subject alternative name-values from the issuer certificate (if possible).

Example:

 issuserAltName = issuer:copy


=head2 Authority Info Access

The authority information access extension gives details about how to access certain information relating to the CA.
Its syntax is I<accessOID>B<;>I<location>, where I<location> has the same syntax as subject alternative name (except that B<email:copy> is not supported).
I<accessOID> can be any valid OID, but only certain values are meaningful, for example, B<OCSP> and B<caIssuers>.

Example:

 authorityInfoAccess = OCSP;URI:http://ocsp.my.host/
 authorityInfoAccess = caIssuers;URI:http://my.ca/ca.html


=head2 CRL distribution points

This is a multi-valued extension whose options can be either I<name>:I<value> pairs using the same format as subject alternative name, or a single value representing a section name containing all the distribution point fields.

For a I<name>:I<value> pair, a new DistributionPoint with the B<fullName> field set to the given I<value>.
Both the B<cRLissuer> and B<reasons> fields are omitted in this case.

In the single value case, the section indicated contains values for each field.
In this section:

If the name is B<fullname>, the value field should contain the full name of the distribution point in the same format as subject alternative name.

If the name is B<relativename>, then the value field should contain a section name whose contents represent a DN fragment to be placed in this field.

The name B<CRLIssuer>, if present, should contain a value for this field in subject alternative name format.

If the name is B<reasons>, the value field should consist of a comma separated field containing the reasons.
Valid reasons are: B<keyCompromise>, B<CACompromise>, B<affiliationChanged>, B<superseded>, B<cessationOfOperation>, B<certificateHold>, B<privilegeWithdrawn>, and B<AACompromise>.

Simple examples:

 crlDistributionPoints=URI:http://myhost.com/myca.crl
 crlDistributionPoints=URI:http://my.com/my.crl,URI:http://oth.com/my.crl

Full distribution point example:

 crlDistributionPoints=crldp1_section

 [crldp1_section]

 fullname=URI:http://myhost.com/myca.crl
 CRLissuer=dirName:issuer_sect
 reasons=keyCompromise, CACompromise

 [issuer_sect]
 C=UK
 O=Organisation
 CN=Some Name

=head2 Issuing Distribution Point

This extension should only appear in CRLs.
It is a multi valued extension whose syntax is similar to the B<section> pointed to by the CRL distribution points extension with a few differences.

The names B<reasons> and B<CRLissuer> are not recognized.

The name B<onlysomereasons> is accepted, which sets this field.
The value is in the same format as the CRL distribution point B<reasons> field.

The names B<onlyuser>, B<onlyCA>, B<onlyAA>, and B<indirectCRL> are also accepted.
The values should be a boolean value (B<TRUE> or B<FALSE>) to indicate the value of the corresponding field.

Example:

 issuingDistributionPoint=critical, @idp_section

 [idp_section]

 fullname=URI:http://myhost.com/myca.crl
 indirectCRL=TRUE
 onlysomereasons=keyCompromise, CACompromise

 [issuer_sect]
 C=UK
 O=Organisation
 CN=Some Name


=head2 Certificate Policies

This is a I<raw> extension.
All the fields of this extension can be set by using the appropriate syntax.

If you follow the PKIX recommendations and are just using one OID, then you just include the value of that OID.
Multiple OIDs can be set separated by commas; for example:

 certificatePolicies= 1.2.4.5, 1.1.3.4

If you wish to include qualifiers, then the policy OID and qualifiers need to be specified in a separate section.
This is done by using the B<@>I<section> syntax instead of a literal OID value.

The section referred to must include the policy OID using the name B<policyIdentifier>.
B<cPSuri> qualifiers can be included using the syntax:

 CPS.nnn=value

B<userNotice> qualifiers can be set using the syntax:

 userNotice.nnn=@notice

The value of the B<userNotice> qualifier is specified in the relevant section.
This section can include B<explicitText>, B<organization>, and B<noticeNumbers> options.
B<explicitText> and B<organization> are text strings; B<noticeNumbers> is a comma separated list of numbers. 
The B<organization> and B<noticeNumbers> options (if included) must BOTH be present.
If you use the B<userNotice> option with IE5, then you need the B<ia5org> option at the top level to modify the encoding; otherwise, it will not be interpreted properly.

Example:

 certificatePolicies=ia5org,1.2.3.4,1.5.6.7.8,@polsect

 [polsect]

 policyIdentifier = 1.3.5.8
 CPS.1="http://my.host.name/"
 CPS.2="http://my.your.name/"
 userNotice.1=@notice

 [notice]

 explicitText="Explicit Text Here"
 organization="Organisation Name"
 noticeNumbers=1,2,3,4

The B<ia5org> option changes the type of the I<organization> field.
In RFC2459, it can only be of type B<DisplayText>.
In RFC3280, B<IA5Strring> is also permissible.
Some software (for example, some versions of MSIE) may require B<ia5org>.

=head2 Policy Constraints

This is a multi-valued extension which consists of the names B<requireExplicitPolicy> or B<inhibitPolicyMapping> and a non negative integer value.
At least one component must be present.

Example:

 policyConstraints = requireExplicitPolicy:3


=head2 Inhibit Any Policy

This is a string extension whose value must be a non negative integer.

Example:

 inhibitAnyPolicy = 2


=head2 Name Constraints

The name constraints extension is a multi-valued extension.
The name should begin with the word B<permitted> or B<excluded> followed by a B<;>.
The rest of the name and the value follows the syntax of B<subjectAltName>, except B<email:copy> is not supported, and the B<IP> form should consist of an IP address and subnet mask separated by a B</>.

Examples:

 nameConstraints=permitted;IP:192.168.0.0/255.255.0.0

 nameConstraints=permitted;email:.somedomain.com

 nameConstraints=excluded;email:.com


=head2 OCSP No Check

The OCSP No Check extension is a string extension but its value is ignored.

Example:

 noCheck = ignored


=head2 DEPRECATED EXTENSIONS

The following extensions are non standard, Netscape specific, and largely obsolete.
Their use in new applications is discouraged.

=head2 Netscape String extensions

Netscape Comment (B<nsComment>) is a string extension containing a comment which will be displayed when the certificate is viewed in some browsers.

Example:

 nsComment = "Some Random Comment"

Other supported extensions in this category are: B<nsBaseUrl>, B<nsRevocationUrl>, B<nsCaRevocationUrl>, B<nsRenewalUrl>, B<nsCaPolicyUrl>, and B<nsSslServerName>.


=head2 Netscape Certificate Type

This is a multi-valued extension which consists of a list of flags to be included.
It was used to indicate the purposes for which a certificate could be used.
The B<basicConstraints>, B<keyUsage> and extended key usage extensions are now used instead.

Acceptable values for nsCertType are: B<client>, B<server>, B<email>, B<objsign>, B<reserved>, B<sslCA>, B<emailCA>, and B<objCA>.


=head2 ARBITRARY EXTENSIONS

If an extension is not supported by the OpenSSL code, then it must be encoded using the arbitrary extension format.
It is also possible to use the arbitrary format for supported extensions.
Extreme care should be taken to ensure that the data is formatted correctly for the given extension type.

There are two ways to encode arbitrary extensions.

The first way is to use the word B<ASN1> followed by the extension content using the same syntax as L<ASN1_generate_nconf(3)>.
For example:

 1.2.3.4=critical,ASN1:UTF8String:Some random data

 1.2.3.4=ASN1:SEQUENCE:seq_sect

 [seq_sect]

 field1 = UTF8:field1
 field2 = UTF8:field2

It is also possible to use the word B<DER> to include the raw encoded data in any extension.

 1.2.3.4=critical,DER:01:02:03:04
 1.2.3.4=DER:01020304

The value following B<DER> is a hex dump of the DER encoding of the extension.
Any extension can be placed in this form to override the default behaviour.
For example:

 basicConstraints=critical,DER:00:01:02:03

=head1 WARNING

There is no guarantee that a specific implementation will process a given extension.
It may therefore be sometimes possible to use certificates for purposes prohibited by their extensions because a specific application does not recognize or honour the values of the relevant extensions.

The B<DER> and B<ASN1> options should be used with caution.
It is possible to create totally invalid extensions if they are not used carefully.


=head1 NOTES

If an extension is multi-valued and a field value must contain a comma, the long form must be used; otherwise, the comma would be misinterpreted as a field separator.
For example:

 subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar

will produce an error, but the equivalent form:

 subjectAltName=@subject_alt_section

 [subject_alt_section]
 subjectAltName=URI:ldap://somehost.com/CN=foo,OU=bar

is valid.

Due to the behaviour of the OpenSSL B<conf> library, the same field name can only occur once in a section.
This means that:

 subjectAltName=@alt_section

 [alt_section]

 email=steve@here
 email=steve@there

will only recognize the last value.
This can be worked around by using the form:

 [alt_section]

 email.1=steve@here
 email.2=steve@there

=head1 SEE ALSO

L<req(1)>, L<ca(1)>, L<x509(1)>, L<ASN1_generate_nconf(3)>

=cut
