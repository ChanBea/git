=pod

=head1 NAME

rsa - RSA key processing tool

=head1 SYNOPSIS

B<openssl> B<rsa>
[B<-inform> B<PEM>|B<NET>|B<DER>]
[B<-outform> B<PEM>|B<NET>|B<DER>]
[B<-in> I<filename>]
[B<-passin> I<arg>]
[B<-out> I<filename>]
[B<-passout> I<arg>]
[B<-aes128>]
[B<-aes192>]
[B<-aes256>]
[B<-camellia128>]
[B<-camellia192>]
[B<-camellia256>]
[B<-des>]
[B<-des3>]
[B<-idea>]
[B<-text>]
[B<-noout>]
[B<-modulus>]
[B<-check>]
[B<-pubin>]
[B<-pubout>]
[B<-RSAPublicKey_in>]
[B<-RSAPublicKey_out>]
[B<-engine> I<id>]

=head1 DESCRIPTION

The B<rsa> command processes RSA keys.
They can be converted between various forms and their components printed out.
B<Note> this command uses the traditional SSLeay compatible format for private key encryption: newer
applications should use the more secure PKCS#8 format using the B<pkcs8> utility.

=head1 OPTIONS

=over 4

=item B<-inform> B<PEM>|B<NET>|B<DER>

This specifies the input format.
The B<DER> option uses an ASN1 DER encoded form compatible with the PKCS#1 RSAPrivateKey or SubjectPublicKeyInfo format.
The B<PEM> form is the default format: it consists of the B<DER> format base64
encoded with additional header and footer lines.
On input PKCS#8 format private keys are also accepted.
The B<NET> form is a format is described in the B<NOTES> section.

=item B<-outform> B<PEM>|B<NET>|B<DER>

This specifies the output format.
The options have the same meaning as the  B<-inform> option.

=item B<-in> I<filename>

This specifies the input filename to read a key from or standard input if this
option is not specified.
If the key is encrypted a pass phrase will be prompted for.

=item B<-passin> I<arg>

The input file password source.
For more information about the format of I<arg> see the B<PASS PHRASE ARGUMENTS> section in L<openssl(1)>.

=item B<-out> I<filename>

This specifies the output filename to write a key to or standard output if this option is not specified.
If any encryption options are set then a pass phrase will be prompted for.
The output filename should B<not> be the same as the input filename.

=item B<-passout> I<arg>

The output file password source.
For more information about the format of I<arg> see the B<PASS PHRASE ARGUMENTS> section in L<openssl(1)>.

=item B<-aes128> | B<-aes192> | B<-aes256> | B<-camellia128> | B<-camellia192> | B<-camellia256> | B<-des> | B<-des3> | B<-idea>

These options encrypt the private key with the specified cipher before outputting it.
A pass phrase is prompted for.
If none of these options is specified the key is written in plain text.
This means that using the B<rsa> utility to read in an encrypted key with no encryption option can be used to remove the pass phrase from a key, or by setting the encryption options it can be used to add or change the pass phrase.
These options can only be used with PEM format output files.

=item B<-text>

Prints out the various public or private key components in plain text in addition to the encoded version. 

=item B<-noout>

Prevents output of the encoded version of the key.

=item B<-modulus>

Prints out the value of the modulus of the key.

=item B<-check>

Checks the consistency of an RSA private key.

=item B<-pubin>

By default a private key is read from the input file: with this option a public key is read instead.

=item B<-pubout>

By default a private key is output: with this option a public key will be output instead.
This option is automatically set if the input is a public key.

=item B<-RSAPublicKey_in>, B<-RSAPublicKey_out>

Like B<-pubin> and B<-pubout>, except B<RSAPublicKey> format is used instead.

=item B<-engine> I<id>

Specifying an engine (by its unique I<id> string) will cause B<rsa> to attempt to obtain a functional reference to the specified engine, thus initialising it if needed.
The engine will then be set as the default for all available algorithms.

=back

=head1 NOTES

The PEM private key format uses the header and footer lines:

 -----BEGIN RSA PRIVATE KEY-----
 -----END RSA PRIVATE KEY-----

The PEM public key format uses the header and footer lines:

 -----BEGIN PUBLIC KEY-----
 -----END PUBLIC KEY-----

The PEM B<RSAPublicKey> format uses the header and footer lines:

 -----BEGIN RSA PUBLIC KEY-----
 -----END RSA PUBLIC KEY-----

The B<NET> form is a format compatible with older Netscape servers
and Microsoft IIS .key files; this uses unsalted RC4 for its encryption.
It is not very secure and so should only be used when necessary.

Some newer version of IIS have additional data in the exported .key
files.
To use these with the utility, view the file with a binary editor and look for the string "private-key", then trace back to the byte sequence 0x30, 0x82 (this is an ASN1 SEQUENCE).
Copy all the data from this point onwards to another file and use that as the input to the B<rsa> utility with the B<-inform NET> option.

=head1 EXAMPLES

To remove the pass phrase on an RSA private key:

 openssl rsa -in key.pem -out keyout.pem

To encrypt a private key using triple DES:

 openssl rsa -in key.pem -des3 -out keyout.pem

To convert a private key from PEM to DER format: 

 openssl rsa -in key.pem -outform DER -out keyout.der

To print out the components of a private key to standard output:

 openssl rsa -in key.pem -text -noout

To just output the public part of a private key:

 openssl rsa -in key.pem -pubout -out pubkey.pem

Output the public part of a private key in B<RSAPublicKey> format:

 openssl rsa -in key.pem -RSAPublicKey_out -out pubkey.pem

=head1 BUGS

The command line password arguments don't currently work with B<NET> format.

There should be an option that automatically handles .key files, without having to manually edit them.

=head1 SEE ALSO

L<pkcs8(1)>, L<dsa(1)>, L<genrsa(1)>,
L<gendsa(1)> 

=cut
