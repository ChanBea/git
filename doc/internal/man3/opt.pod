=pod

=head1 NAME
OPTIONS, OPT_PAIR, OPT_HELP_STR, OPT_MORE_STR, OPT_SECTION_STR,
OPT_PARAM_STR, opt_progname, opt_appname, opt_getprog, opt_init, opt_format,
format2str, opt_int, opt_long, opt_imax, opt_umax, opt_ulong, opt_pair,
opt_string, opt_cipher, opt_md, opt_next, opt_arg, opt_flag, opt_unknown,
opt_num_rest, opt_rest, opt_help, opt_isdir, opt_progname opt_next

- Option parsing for commands and tests

=head1 SYNOPSIS

 #include "opt.h"

 typedef struct { ... } OPTIONS;
 typedef struct { ... } OPT_PAIR;
 extern const char OPT_HELP_STR[];
 extern const char OPT_MORE_STR[];
 extern const char OPT_SECTION_STR[];
 extern const char OPT_PARAM_STR[];

 char *opt_progname(const char *argv0);
 char *opt_appname(const char *arg0);
 char *opt_getprog(void);
 char *opt_init(int argc, char **argv, const OPTIONS *o);

 int opt_format(const char *s, unsigned long flags, int *result);
 const char *format2str(int format);

 int opt_int(const char *value, int *result);
 int opt_long(const char *value, long *result);
 int opt_imax(const char *value, intmax_t *result);
 int opt_umax(const char *value, uintmax_t *result);
 int opt_ulong(const char *value, unsigned long *result);

 int opt_pair(const char *name, const OPT_PAIR* pairs, int *result);
 int opt_string(const char *name, conwst char **options);

 int opt_cipher(const char *name, EVP_CIPHER **cipherp);
 int opt_md(const char *name, EVP_MD **mdp);

 int opt_next(void);
 char *opt_arg(void);
 char *opt_flag(void);
 char *opt_unknown(void);

 int opt_num_rest(void);
 char **opt_rest(void);
 void opt_help(const OPTIONS *list);
 int opt_isdir(const char *name);

=head1 DESCRIPTION

The functions on this page provide a common set of option-parsing for
the OpenSSL command and the internal test programs.
It is intended to be used like the standard getopt(3) routine, except
that multi-character flag names are supported, and a variety of parsing
and other utility functions are also provided.

Programs that use this should make sure to set the appropriate C<-I>
flag.

=head2 Data Types

Each program should define, near the main() routine, an enumeration
that is the set of options the program accepts. For example:

    typedef enum OPTION_choice {
        OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,
        OPT_YES, OPT_NAME, OPT_COUNT, OPT_OFILE
    } OPTION_CHOICE;

The first two lines must appear exactly as shown. The third line is a sample
set of flags, and the closing C<typedef> name is used for error-checking
as discussed below.

The B<OPTIONS> C<typedef> specifies an option: what type of argument
it takes (if any), and an optional "help" string.  It is a C<struct>
containing these fields:

    const char *name;
    int retval;
    int valtype;
    const char *helpstr;

The B<name> is the name of the option that the user would type. Options
are words preceeded with a minus sign. If the user uses two minus signs,
this is also accepted for compatibility with other GNU software. Some
names are special, and are described below.

The B<retval> is the value to return if the option is found. It should be
one of the choices in the enumeration above.

The B<valtype> defines what the option's parameter must be. It should
be chosen from the following set:

    \0  No value
    '-' No value
    's' A text string
    '/' A directory
    '<' Name of file to open for input
    '>' Name of file to open for output
    'n' A signed number that fits in the C<int> type
    'p' A non-negative number that fits in the C<int> type
    'M' A signed number that fits in the C<intmax_t> type
    'U' An unsigned number that fits in the C<uintmax_t> type
    'l' A signed number that fits in the C<long> type
    'u' An unsigned number that fits in the C<unsigned long> type
    'c' File of fomer PEM, DER, or S/MIME
    'F' A file in PEM or DER format
    'E' Like 'F' but also allows ENGINE
    'f' Any file format

The B<helpstr> is what to display when the user uses the help flag,
which should be C<"help">.

A program should declare its options right after the enumeration:

    static OPTIONS my_options[] = {
        {"help", OPT_HELP, '-', "Display this summary"},
        {"yes", OPT_YES, '-', "Print an affirmative reply"},
        {"count", OPT_COUNT, 'p', "Repeat count"},
        {"output" OPT_OFILE, '>', "Output file; default is stdout"},
        {NULL},
    };

Note that the B<OPT_HELP> option is explicitly listed, and the list ends with
an entry of all-null's. The other two special options, B<OPT_ERR> and B<OPT_EOF>
should not appear in the array.

If the help string is too long to fit into one line, it may be continued
on multiple lines; each entry should use B<OPT_MORE_STR>, like this:

        {"output" OPT_OFILE, '>', "Output file; default is stdout"},
        {OPT_MORE_STR, 0, 0,
         "This flag is not really needed on Unix systems"}
        {OPT_MORE_STR, 0, 0,

Each subsequent line will be indented the correct amount.

By default, the help display will include a standard prolog:

    Usage: PROGRAM [options]
    Valid options are:
    ..detailed list of options...

Sometimes there are parameters that should appear in the synopsis.
Use B<OPT_HELP_STR> as the first entry in your array:

    {OPT_HELP_STR, 1, '-', Usage: %s [options] [algorithm...]\n"}

The B<retval> and B<valtype> are ignored, and the B<helpstr> should
follow the general construction as shown. The B<%s> will get the program
name.

If a command has a large set of options, it can be useful to break them
into sections.  Use B<OPT_SECTION_STR> or the macro B<OPT_SECTION>
to indicate this (the two lines below are equivalent).

    OPT_SECTION("Validation"),
    {OPT_SECTION_STR, 1, '-', "Validation options:\n"},

In addition to providing help about options, you can provide a description
of the parameters a command takes. These should appear at the end of
the options and are indicated by using B<OPT_PARAM_STR> or the
B<OPT_PARAMETERS> macro:

    OPT_PARAMETERS()
    {OPT_PARAM_STR, 1, '-', "Parameters:\n"}

=head2 API

=head1 RETURN VALUES

=head1 COPYRIGHT

Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use this
file except in compliance with the License.  You can obtain a copy in the file
LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
