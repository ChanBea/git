=pod

=head1 NAME

SSL_CTX_set_tlsext_status_cb,
SSL_CTX_get_tlsext_status_cb,
SSL_CTX_set_tlsext_status_arg,
SSL_CTX_get_tlsext_status_arg,
SSL_CTX_set_tlsext_status_type,
SSL_CTX_get_tlsext_status_type,
SSL_set_tlsext_status_type,
SSL_get_tlsext_status_type,
SSL_get_tlsext_status_ocsp_resp,
SSL_set_tlsext_status_ocsp_resp,
SSL_get_tlsext_status_ocsp_resp_ex,
SSL_set_tlsext_status_ocsp_resp_ex
- OCSP Certificate Status Request functions

=head1 SYNOPSIS

 #include <openssl/tls1.h>

 long SSL_CTX_set_tlsext_status_cb(SSL_CTX *ctx, int (*callback)(SSL *, void *));
 long SSL_CTX_get_tlsext_status_cb(SSL_CTX *ctx, int (**callback)(SSL *, void *));

 long SSL_CTX_set_tlsext_status_arg(SSL_CTX *ctx, void *arg);
 long SSL_CTX_get_tlsext_status_arg(SSL_CTX *ctx, void **arg);

 long SSL_CTX_set_tlsext_status_type(SSL_CTX *ctx, int type);
 long SSL_CTX_get_tlsext_status_type(SSL_CTX *ctx);

 long SSL_set_tlsext_status_type(SSL *s, int type);
 long SSL_get_tlsext_status_type(SSL *s);

 long SSL_get_tlsext_status_ocsp_resp(ssl, unsigned char **resp);
 long SSL_set_tlsext_status_ocsp_resp(ssl, unsigned char *resp, int len);

 long SSL_get_tlsext_status_ocsp_resp_ex(ssl, STACK_OF(OCSP_RESPONSE) *resp);
 long SSL_set_tlsext_status_ocsp_resp_ex(ssl, STACK_OF(OCSP_RESPONSE) *resp);

=head1 DESCRIPTION

A client application may request that a server send back an OCSP status response
(also known as OCSP stapling). There are two TLS extensions implemented:

=over 4

=item
I<status_request>: L<https://tools.ietf.org/html/rfc6066>

This will request the OCSP status for only the server certificate, excluding any
intermediate certificates in the chain.

=item
I<status_request_v2>: L<https://tools.ietf.org/html/rfc6961>

This will request the OCSP status for the complete server certificate chain,
i.e. the server certificate and all intermediate certificates.

=back

=head2 Client

To request the OCSP status, the client should call the 
SSL_CTX_set_tlsext_status_type() function prior to the creation of any SSL
objects. Alternatively an application can call the SSL_set_tlsext_status_type()
function on an individual SSL object prior to the start of the handshake.

Currently the supported types are B<TLSEXT_STATUSTYPE_ocsp> and 
B<TLSEXT_STATUSTYPE_ocsp_multi>. This value should be passed in the 
B<type> argument. Calling SSL_CTX_get_tlsext_status_type() will return 
the type B<TLSEXT_STATUSTYPE_ocsp> previously set via 
SSL_CTX_set_tlsext_status_type() or -1 if not set.

For interoperability with other servers and clients, internal data holder for  
both SSL_set_tlsext_status_ocsp_resp_ex() and SSL_set_tlsext_status_ocsp_resp()
functions is the same. So no matter the API used, OCSP responses can be transferred 
by both TLS extensions, depending on which is requested by TLS client.
Clients of openssl lib may use old API, but if new extension is requested, 
it will be used, and vice-versa. 

The client should additionally provide a callback function to decide what to do
with the returned OCSP response by calling SSL_CTX_set_tlsext_status_cb(). The
callback function should determine whether the returned OCSP response is
acceptable or not. The callback will be passed as an argument the value
previously set via a call to SSL_CTX_set_tlsext_status_arg(). Note that the
callback will not be called in the event of a handshake where session resumption
occurs (because there are no Certificates exchanged in such a handshake).
The callback previously set via SSL_CTX_set_tlsext_status_cb() can be retrieved
by calling SSL_CTX_get_tlsext_status_cb(), and the argument by calling
SSL_CTX_get_tlsext_status_arg().

On the client side SSL_get_tlsext_status_type() can be used to determine whether
the client has previously called SSL_set_tlsext_status_type(). It will return
B<TLSEXT_STATUSTYPE_ocsp> if it has been called or -1 otherwise. 

The response returned by the server can be obtained via a call to 
B<SSL_get_tlsext_status_ocsp_resp> or B<SSL_get_tlsext_status_ocsp_resp_ex>.

B<SSL_get_tlsext_status_ocsp_resp> will update the value B<*resp> to point to
the OCSP response data in DER format, and the return value will be the length of that data.
Typically a callback would obtain an OCSP_RESPONSE object from this data via 
a call to the d2i_OCSP_RESPONSE() function.
If the server has not provided any response data, then B<*resp> will be NULL 
and the return value from SSL_get_tlsext_status_ocsp_resp() will be -1.

B<SSL_get_tlsext_status_ocsp_resp_ex> will update B<*resp> to point
to the OCSP response stack and the return value will be the number of responses
on the stack. If the server has not provided any
response data then B<*resp> will be NULL and the return value from
SSL_get_tlsext_status_ocsp_resp_ex() will be -1.
Typically a openssl client would obtain an OCSP_RESPONSE object from the stack via a
call to sk_OCSP_RESPONSE_value().

=head2 Server

On the server side SSL_get_tlsext_status_type() can be used to determine whether
the client requested OCSP stapling. If the client requested it then this
function will return B<TLSEXT_STATUSTYPE_ocsp>, B<TLSEXT_STATUSTYPE_ocsp_multi> 
or -1 otherwise.

A server application must also call the SSL_CTX_set_tlsext_status_cb() function
if it wants to be able to provide clients with OCSP Certificate Status
responses. Typically the server callback would obtain the server certificates
that are being sent back to the client via calls to SSL_get_certificate() and
SSL_get0_chain_certs(); obtain the OCSP responses to be sent back; and then set
that response data by calling SSL_set_tlsext_status_ocsp_resp() or
SSL_set_tlsext_status_ocsp_resp_ex(). 
Pointers provided to both functions are used internally, and should not be freed 
or modifyed by the caller after the call.

=head1 RETURN VALUES

The callback when used on the client side should return a negative value on
error; 0 if the response is not acceptable (in which case the handshake will
fail) or a positive value if it is acceptable.

The callback when used on the server side should return with either
SSL_TLSEXT_ERR_OK (meaning that the OCSP response that has been set should be
returned), SSL_TLSEXT_ERR_NOACK (meaning that an OCSP response should not be
returned) or SSL_TLSEXT_ERR_ALERT_FATAL (meaning that a fatal error has
occurred).

SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(),
SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and
SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.
SSL_set_tlsext_status_ocsp_resp_ex() return 0 on error or 1 on success.

SSL_CTX_get_tlsext_status_type() returns the value previously set by
SSL_CTX_set_tlsext_status_type(), or -1 if not set.

SSL_get_tlsext_status_ocsp_resp() returns the length of the OCSP response data
or -1 if there is no OCSP response data.

SSL_get_tlsext_status_ocsp_resp_ex() returns the number of the OCSP responses
on the stack or -1 if there is no OCSP response data.

SSL_get_tlsext_status_type() returns B<TLSEXT_STATUSTYPE_ocsp> on the client
side if SSL_set_tlsext_status_type() was previously called, or on the server
side if the client requested OCSP stapling. Otherwise -1 is returned.

=head1 SEE ALSO

L<ssl(7)>

=head1 HISTORY

The SSL_get_tlsext_status_type(), SSL_CTX_get_tlsext_status_type()
and SSL_CTX_set_tlsext_status_type() functions were added in OpenSSL 1.1.0.

=head1 COPYRIGHT

Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
