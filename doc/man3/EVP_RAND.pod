=pod

=head1 NAME

EVP_RAND, EVP_RAND_fetch, EVP_RAND_free, EVP_RAND_provider, EVP_RAND_up_ref,
EVP_RAND_name,
EVP_RAND_CTX, EVP_RAND_CTX_new, EVP_RAND_CTX_free, EVP_RAND_CTX_rand,
EVP_RAND_CTX_strength, EVP_RAND_CTX_get_bytes, EVP_RAND_CTX_reseed,
EVP_RAND_CTX_get_params, EVP_RAND_CTX_set_params, EVP_RAND_do_all_ex,
EVP_RAND_get_params, EVP_RAND_gettable_ctx_params, EVP_RAND_settable_ctx_params,
EVP_RAND_gettable_params - EVP RAND routines

=head1 SYNOPSIS

 #include <openssl/rand.h>

 typedef struct evp_rand_st EVP_RAND;
 typedef struct evp_rand_ctx_st EVP_RAND_CTX;

 EVP_RAND_CTX *EVP_RAND_CTX_new(const EVP_RAND *rand);
 const EVP_RAND *EVP_RAND_CTX_rand(EVP_RAND_CTX *ctx);
 void EVP_RAND_CTX_free(EVP_RAND_CTX *ctx);
 unsigned int EVP_RAND_CTX_strength(EVP_RAND_CTX *ctx);
 int EVP_RAND_CTX_get_bytes(EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen);
 void EVP_RAND_CTX_reseed(EVP_RAND_CTX *ctx);
 const char *EVP_RAND_name(const EVP_RAND *rand);
 int EVP_RAND_up_ref(EVP_RAND *rand);
 void EVP_RAND_free(EVP_RAND *rand);
 EVP_RAND *EVP_RAND_fetch(OPENSSL_CTX *libctx, const char *algorithm,
                          const char *properties);
 void EVP_RAND_do_all_ex(OPENSSL_CTX *libctx,
                         void (*fn)(EVP_RAND *rand, void *arg),
                         void *arg);
 int EVP_RAND_get_params(EVP_RAND *rand, OSSL_PARAM params[]);
 int EVP_RAND_CTX_get_params(EVP_RAND_CTX *ctx, OSSL_PARAM params[]);
 int EVP_RAND_CTX_set_params(EVP_RAND_CTX *ctx, const OSSL_PARAM params[]);
 const OSSL_PARAM *EVP_RAND_gettable_params(const EVP_RAND *rand);
 const OSSL_PARAM *EVP_RAND_gettable_ctx_params(const EVP_RAND *rand);
 const OSSL_PARAM *EVP_RAND_settable_ctx_params(const EVP_RAND *rand);
 const OSSL_PROVIDER *EVP_RAND_provider(const EVP_RAND *rand);

=head1 DESCRIPTION

The EVP RAND routines are a high level interface to deterministic random
number generation algorithms and random seed material sources.

After creating a B<EVP_RAND_CTX> for the required algorithm using
EVP_RAND_CTX_new(), inputs to the algorithm are supplied
using calls to EVP_RAND_CTX_set_params() before
calling EVP_RAND_CTX_get_bytes() to generate random data.

=head2 Types

B<EVP_RAND> is a type that holds the implementation of a RAND.

B<EVP_RAND_CTX> is a context type that holds the algorithm inputs.

=head2 Algorithm implementation fetching

EVP_RAND_fetch() fetches an implementation of a RAND I<algorithm>, given
a library context I<libctx> and a set of I<properties>.
See L<provider(7)/Fetching algorithms> for further information.

The returned value must eventually be freed with
L<EVP_RAND_free(3)>.

EVP_RAND_up_ref() increments the reference count of an already fetched
RAND.

EVP_RAND_free() frees a fetched algorithm.
NULL is a valid parameter, for which this function is a no-op.

=head2 Context manipulation functions

EVP_RAND_CTX_new() creates a new context for the RAND implementation I<rand>.

EVP_RAND_CTX_free() frees up the context C<ctx>.  If I<ctx> is NULL, nothing
is done.

EVP_RAND_CTX_rand() returns the B<EVP_RAND> associated with the context
I<ctx>.

=head2 Computing functions

EVP_RAND_reseed() reseeds the random number generator.

EVP_RAND_get_bytes() returns C<outlen> bytes of random data and places it in the
I<out> buffer.

EVP_RAND_get_params() retrieves details about the implementation
I<rand>.
The set of parameters given with I<params> determine exactly what
parameters should be retrieved.
Note that a parameter that is unknown in the underlying context is
simply ignored.

EVP_RAND_CTX_get_params() retrieves chosen parameters, given the
context I<ctx> and its underlying context.
The set of parameters given with I<params> determine exactly what
parameters should be retrieved.
Note that a parameter that is unknown in the underlying context is
simply ignored.

EVP_RAND_CTX_set_params() passes chosen parameters to the underlying
context, given a context I<ctx>.
The set of parameters given with I<params> determine exactly what
parameters are passed down.
Note that a parameter that is unknown in the underlying context is
simply ignored.
Also, what happens when a needed parameter isn't passed down is
defined by the implementation.

EVP_RAND_gettable_params(), EVP_RAND_gettable_ctx_params() and
EVP_RAND_settable_ctx_params() get a constant B<OSSL_PARAM> array that
decribes the retrievable and settable parameters, i.e. parameters that
can be used with EVP_RAND_get_params(), EVP_RAND_CTX_get_params()
and EVP_RAND_CTX_set_params(), respectively.
See L<OSSL_PARAM(3)> for the use of B<OSSL_PARAM> as parameter descriptor.

=head2 Information functions

EVP_RAND_strength() returns the bit strength of the generator's output.

EVP_RAND_name() returns the name of the given RNG implementation.

EVP_RAND_provider() returns the provider that holds the implementation
of the given I<rand>.

EVP_RAND_do_all_ex() traverses all RNGs implemented by all activated
providers in the given library context I<libctx>, and for each of the
implementations, calls the given function I<fn> with the implementation method
and the given I<arg> as argument.

=head1 PARAMETERS

The standard parameter names are:

=over 4

=item "pass" (B<OSSL_RAND_PARAM_PASSWORD>) <octet string>

Some RAND implementations require a password.
For those RAND implementations that support it, this parameter sets the password.

=item "salt" (B<OSSL_RAND_PARAM_SALT>) <octet string>

Some RAND implementations can take a salt.
For those RAND implementations that support it, this parameter sets the salt.

The default value, if any, is implementation dependent.

=item "iter" (B<OSSL_RAND_PARAM_ITER>) <unsigned integer>

Some RAND implementations require an iteration count.
For those RAND implementations that support it, this parameter sets the
iteration count.

The default value, if any, is implementation dependent.

=item "properties" (B<OSSL_RAND_PARAM_PROPERTIES>) <UTF8 string>

=item "mac" (B<OSSL_RAND_PARAM_MAC>) <UTF8 string>

=item "digest" (B<OSSL_RAND_PARAM_DIGEST>) <UTF8 string>

For RAND implementations that use an underlying computation MAC or
digest, these parameters set what the algorithm should be.

The value is always the name of the intended algorithm,
or the properties.

Note that not all algorithms may support all possible underlying
implementations.

=item "key" (B<OSSL_RAND_PARAM_KEY>) <octet string>

Some RAND implementations require a key.
For those RAND implementations that support it, this octet string parameter
sets the key.

=item "maclen" (B<OSSL_RAND_PARAM_MAC_SIZE>) <unsigned integer>

Used by implementations that use a MAC with a variable output size (KMAC).
For those RAND implementations that support it, this parameter
sets the MAC output size.

The default value, if any, is implementation dependent.
The length must never exceed what can be given with a B<size_t>.

=item "maxmem_bytes" (B<OSSL_RAND_PARAM_SCRYPT_MAXMEM>) <unsigned integer>

Memory-hard password-based RAND algorithms, such as scrypt, use an amount of
memory that depends on the load factors provided as input.
For those RAND implementations that support it, this B<uint64_t> parameter sets
an upper limit on the amount of memory that may be consumed while performing
a key derivation.
If this memory usage limit is exceeded because the load factors are chosen
too high, the key derivation will fail.

The default value is implementation dependent.
The memory size must never exceed what can be given with a B<size_t>.

=back

=head1 RETURN VALUES

EVP_MAC_fetch() returns a pointer to a newly fetched B<EVP_RAND>, or
NULL if allocation failed.

EVP_RAND_name() returns the name for the given I<rand>, if it has been
added to the object database.

EVP_RAND_provider() returns a pointer to the provider for the RAND, or
NULL on error.

EVP_MAC_up_ref() returns 1 on success, 0 on error.

EVP_RAND_CTX_new() returns either the newly allocated
C<EVP_RAND_CTX> structure or C<NULL> if an error occurred.

EVP_RAND_CTX_free() and EVP_RAND_reset() do not return a value.

EVP_RAND_strength() returns the output strength.

The remaining functions return 1 for success and 0 or a negative value for
failure.  In particular, a return value of -2 indicates the operation is not
supported by the RAND algorithm.

=head1 SEE ALSO

L<EVP_RAND-TEST_RAND(7)>

=head1 HISTORY

This functionality was added to OpenSSL 3.0.

=head1 COPYRIGHT

Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
