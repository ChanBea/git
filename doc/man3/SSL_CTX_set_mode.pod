=pod

=head1 NAME

tls_CTX_set_mode, tls_CTX_clear_mode, tls_set_mode, tls_clear_mode, tls_CTX_get_mode, tls_get_mode - manipulate tls engine mode

=head1 SYNOPSIS

 #include <opentls/tls.h>

 long tls_CTX_set_mode(tls_CTX *ctx, long mode);
 long tls_CTX_clear_mode(tls_CTX *ctx, long mode);
 long tls_set_mode(tls *tls, long mode);
 long tls_clear_mode(tls *tls, long mode);

 long tls_CTX_get_mode(tls_CTX *ctx);
 long tls_get_mode(tls *tls);

=head1 DESCRIPTION

tls_CTX_set_mode() adds the mode set via bit-mask in B<mode> to B<ctx>.
Options already set before are not cleared.
tls_CTX_clear_mode() removes the mode set via bit-mask in B<mode> from B<ctx>.

tls_set_mode() adds the mode set via bit-mask in B<mode> to B<tls>.
Options already set before are not cleared.
tls_clear_mode() removes the mode set via bit-mask in B<mode> from B<tls>.

tls_CTX_get_mode() returns the mode set for B<ctx>.

tls_get_mode() returns the mode set for B<tls>.

=head1 NOTES

The following mode changes are available:

=over 4

=item tls_MODE_ENABLE_PARTIAL_WRITE

Allow tls_write_ex(..., n, &r) to return with 0 < r < n (i.e. report success
when just a single record has been written). This works in a similar way for
tls_write(). When not set (the default), tls_write_ex() or tls_write() will only
report success once the complete chunk was written. Once tls_write_ex() or
tls_write() returns successful, B<r> bytes have been written and the next call
to tls_write_ex() or tls_write() must only send the n-r bytes left, imitating
the behaviour of write().

=item tls_MODE_ACCEPT_MOVING_WRITE_BUFFER

Make it possible to retry tls_write_ex() or tls_write() with changed buffer
location (the buffer contents must stay the same). This is not the default to
avoid the misconception that non-blocking tls_write() behaves like
non-blocking write().

=item tls_MODE_AUTO_RETRY

During normal operations, non-application data records might need to be sent or
received that the application is not aware of.
If a non-application data record was processed,
L<tls_read_ex(3)> and L<tls_read(3)> can return with a failure and indicate the
need to retry with B<tls_ERROR_WANT_READ>.
If such a non-application data record was processed, the flag
B<tls_MODE_AUTO_RETRY> causes it to try to process the next record instead of
returning.

In a non-blocking environment applications must be prepared to handle
incomplete read/write operations.
Setting B<tls_MODE_AUTO_RETRY> for a non-blocking B<BIO> will process
non-application data records until either no more data is available or
an application data record has been processed.

In a blocking environment, applications are not always prepared to
deal with the functions returning intermediate reports such as retry
requests, and setting the B<tls_MODE_AUTO_RETRY> flag will cause the functions
to only return after successfully processing an application data record or a
failure.

Turning off B<tls_MODE_AUTO_RETRY> can be useful with blocking B<BIO>s in case
they are used in combination with something like select() or poll().
Otherwise the call to tls_read() or tls_read_ex() might hang when a
non-application record was sent and no application data was sent.

=item tls_MODE_RELEASE_BUFFERS

When we no longer need a read buffer or a write buffer for a given tls,
then release the memory we were using to hold it.
Using this flag can
save around 34k per idle tls connection.
This flag has no effect on tls v2 connections, or on DTLS connections.

=item tls_MODE_SEND_FALLBACK_SCSV

Send TLS_FALLBACK_SCSV in the ClientHello.
To be set only by applications that reconnect with a downgraded protocol
version; see draft-ietf-tls-downgrade-scsv-00 for details.

DO NOT ENABLE THIS if your application attempts a normal handshake.
Only use this in explicit fallback retries, following the guidance
in draft-ietf-tls-downgrade-scsv-00.

=item tls_MODE_ASYNC

Enable asynchronous processing. TLS I/O operations may indicate a retry with
tls_ERROR_WANT_ASYNC with this mode set if an asynchronous capable engine is
used to perform cryptographic operations. See L<tls_get_error(3)>.

=item tls_MODE_NO_KTLS_TX

Disable the use of the kernel TLS egress data-path.
By default kernel TLS is enabled if it is supported by the negotiated ciphersuites
and extensions and Opentls has been compiled with support for it.
The kernel TLS data-path implements the record layer,
and the crypto algorithm. The kernel will utilize the best hardware
available for crypto. Using the kernel data-path should reduce the memory
footprint of Opentls because no buffering is required. Also, the throughput
should improve because data copy is avoided when user data is encrypted into
kernel memory instead of the usual encrypt than copy to kernel.

Kernel TLS might not support all the features of Opentls. For instance,
renegotiation, and setting the maximum fragment size is not possible as of
Linux 4.20.

=item tls_MODE_DTLS_SCTP_LABEL_LENGTH_BUG

Older versions of Opentls had a bug in the computation of the label length
used for computing the endpoint-pair shared secret. The bug was that the
terminating zero was included in the length of the label. Setting this option
enables this behaviour to allow interoperability with such broken
implementations. Please note that setting this option breaks interoperability
with correct implementations. This option only applies to DTLS over SCTP.

=back

All modes are off by default except for tls_MODE_AUTO_RETRY which is on by
default since 1.1.1.

=head1 RETURN VALUES

tls_CTX_set_mode() and tls_set_mode() return the new mode bit-mask
after adding B<mode>.

tls_CTX_get_mode() and tls_get_mode() return the current bit-mask.

=head1 SEE ALSO

L<tls(7)>, L<tls_read_ex(3)>, L<tls_read(3)>, L<tls_write_ex(3)> or
L<tls_write(3)>, L<tls_get_error(3)>

=head1 HISTORY

tls_MODE_ASYNC was added in Opentls 1.1.0.
tls_MODE_NO_KTLS_TX was added in Opentls 3.0.

=head1 COPYRIGHT

Copyright 2001-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
