=pod

=head1 NAME

tls_get1_supported_ciphers,
tls_get_client_ciphers,
tls_get_ciphers,
tls_CTX_get_ciphers,
tls_bytes_to_cipher_list,
tls_get_cipher_list,
tls_get_shared_ciphers
- get list of available tls_CIPHERs

=head1 SYNOPSIS

 #include <opentls/tls.h>

 STACK_OF(tls_CIPHER) *tls_get_ciphers(const tls *tls);
 STACK_OF(tls_CIPHER) *tls_CTX_get_ciphers(const tls_CTX *ctx);
 STACK_OF(tls_CIPHER) *tls_get1_supported_ciphers(tls *s);
 STACK_OF(tls_CIPHER) *tls_get_client_ciphers(const tls *tls);
 int tls_bytes_to_cipher_list(tls *s, const unsigned char *bytes, size_t len,
                              int isv2format, STACK_OF(tls_CIPHER) **sk,
                              STACK_OF(tls_CIPHER) **scsvs);
 const char *tls_get_cipher_list(const tls *tls, int priority);
 char *tls_get_shared_ciphers(const tls *s, char *buf, int size);

=head1 DESCRIPTION

tls_get_ciphers() returns the stack of available tls_CIPHERs for B<tls>,
sorted by preference. If B<tls> is NULL or no ciphers are available, NULL
is returned.

tls_CTX_get_ciphers() returns the stack of available tls_CIPHERs for B<ctx>.

tls_get1_supported_ciphers() returns the stack of enabled tls_CIPHERs for
B<tls> as would be sent in a ClientHello (that is, sorted by preference).
The list depends on settings like the cipher list, the supported protocol
versions, the security level, and the enabled signature algorithms.
SRP and PSK ciphers are only enabled if the appropriate callbacks or settings
have been applied.
The list of ciphers that would be sent in a ClientHello can differ from
the list of ciphers that would be acceptable when acting as a server.
For example, additional ciphers may be usable by a server if there is
a gap in the list of supported protocols, and some ciphers may not be
usable by a server if there is not a suitable certificate configured.
If B<tls> is NULL or no ciphers are available, NULL is returned.

tls_get_client_ciphers() returns the stack of available tls_CIPHERs matching the
list received from the client on B<tls>. If B<tls> is NULL, no ciphers are
available, or B<tls> is not operating in server mode, NULL is returned.

tls_bytes_to_cipher_list() treats the supplied B<len> octets in B<bytes>
as a wire-protocol cipher suite specification (in the three-octet-per-cipher
tlsv2 wire format if B<isv2format> is nonzero; otherwise the two-octet
tlsv3/TLS wire format), and parses the cipher suites supported by the library
into the returned stacks of tls_CIPHER objects sk and Signalling Cipher-Suite
Values scsvs.  Unsupported cipher suites are ignored.  Returns 1 on success
and 0 on failure.

tls_get_cipher_list() returns a pointer to the name of the tls_CIPHER
listed for B<tls> with B<priority>. If B<tls> is NULL, no ciphers are
available, or there are less ciphers than B<priority> available, NULL
is returned.

tls_get_shared_ciphers() creates a colon separated and NUL terminated list of
tls_CIPHER names that are available in both the client and the server. B<buf> is
the buffer that should be populated with the list of names and B<size> is the
size of that buffer. A pointer to B<buf> is returned on success or NULL on
error. If the supplied buffer is not large enough to contain the complete list
of names then a truncated list of names will be returned. Note that just because
a ciphersuite is available (i.e. it is configured in the cipher list) and shared
by both the client and the server it does not mean that it is enabled (see the
description of tls_get1_supported_ciphers() above). This function will return
available shared ciphersuites whether or not they are enabled. This is a server
side function only and must only be called after the completion of the initial
handshake.

=head1 NOTES

The details of the ciphers obtained by tls_get_ciphers(), tls_CTX_get_ciphers()
tls_get1_supported_ciphers() and tls_get_client_ciphers() can be obtained using
the L<tls_CIPHER_get_name(3)> family of functions.

Call tls_get_cipher_list() with B<priority> starting from 0 to obtain the
sorted list of available ciphers, until NULL is returned.

Note: tls_get_ciphers(), tls_CTX_get_ciphers() and tls_get_client_ciphers()
return a pointer to an internal cipher stack, which will be freed later on when
the tls or tls_SESSION object is freed.  Therefore, the calling code B<MUST NOT>
free the return value itself.

The stack returned by tls_get1_supported_ciphers() should be freed using
sk_tls_CIPHER_free().

The stacks returned by tls_bytes_to_cipher_list() should be freed using
sk_tls_CIPHER_free().

=head1 RETURN VALUES

See DESCRIPTION

=head1 SEE ALSO

L<tls(7)>, L<tls_CTX_set_cipher_list(3)>,
L<tls_CIPHER_get_name(3)>

=head1 COPYRIGHT

Copyright 2000-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
