=pod

=head1 NAME

tls_get_error - obtain result code for TLS/tls I/O operation

=head1 SYNOPSIS

 #include <opentls/tls.h>

 int tls_get_error(const tls *tls, int ret);

=head1 DESCRIPTION

tls_get_error() returns a result code (suitable for the C "switch"
statement) for a preceding call to tls_connect(), tls_accept(), tls_do_handshake(),
tls_read_ex(), tls_read(), tls_peek_ex(), tls_peek(), tls_shutdown(),
tls_write_ex() or tls_write() on B<tls>.  The value returned by that TLS/tls I/O
function must be passed to tls_get_error() in parameter B<ret>.

In addition to B<tls> and B<ret>, tls_get_error() inspects the
current thread's Opentls error queue.  Thus, tls_get_error() must be
used in the same thread that performed the TLS/tls I/O operation, and no
other Opentls function calls should appear in between.  The current
thread's error queue must be empty before the TLS/tls I/O operation is
attempted, or tls_get_error() will not work reliably.

=head1 RETURN VALUES

The following return values can currently occur:

=over 4

=item tls_ERROR_NONE

The TLS/tls I/O operation completed.  This result code is returned
if and only if B<ret E<gt> 0>.

=item tls_ERROR_ZERO_RETURN

The TLS/tls peer has closed the connection for writing by sending the
close_notify alert.
No more data can be read.
Note that B<tls_ERROR_ZERO_RETURN> does not necessarily
indicate that the underlying transport has been closed.

=item tls_ERROR_WANT_READ, tls_ERROR_WANT_WRITE

The operation did not complete and can be retried later.

B<tls_ERROR_WANT_READ> is returned when the last operation was a read
operation from a non-blocking B<BIO>.
It means that not enough data was available at this time to complete the
operation.
If at a later time the underlying B<BIO> has data available for reading the same
function can be called again.

tls_read() and tls_read_ex() can also set B<tls_ERROR_WANT_READ> when there is
still unprocessed data available at either the B<tls> or the B<BIO> layer, even
for a blocking B<BIO>.
See L<tls_read(3)> for more information.

B<tls_ERROR_WANT_WRITE> is returned when the last operation was a write
to a non-blocking B<BIO> and it was unable to sent all data to the B<BIO>.
When the B<BIO> is writeable again, the same function can be called again.

Note that the retry may again lead to an B<tls_ERROR_WANT_READ> or
B<tls_ERROR_WANT_WRITE> condition.
There is no fixed upper limit for the number of iterations that
may be necessary until progress becomes visible at application
protocol level.

It is safe to call tls_read() or tls_read_ex() when more data is available
even when the call that set this error was an tls_write() or tls_write_ex().
However if the call was an tls_write() or tls_write_ex(), it should be called
again to continue sending the application data.

For socket B<BIO>s (e.g. when tls_set_fd() was used), select() or
poll() on the underlying socket can be used to find out when the
TLS/tls I/O function should be retried.

Caveat: Any TLS/tls I/O function can lead to either of
B<tls_ERROR_WANT_READ> and B<tls_ERROR_WANT_WRITE>.
In particular,
tls_read_ex(), tls_read(), tls_peek_ex(), or tls_peek() may want to write data
and tls_write() or tls_write_ex() may want to read data.
This is mainly because
TLS/tls handshakes may occur at any time during the protocol (initiated by
either the client or the server); tls_read_ex(), tls_read(), tls_peek_ex(),
tls_peek(), tls_write_ex(), and tls_write() will handle any pending handshakes.

=item tls_ERROR_WANT_CONNECT, tls_ERROR_WANT_ACCEPT

The operation did not complete; the same TLS/tls I/O function should be
called again later. The underlying BIO was not connected yet to the peer
and the call would block in connect()/accept(). The tls function should be
called again when the connection is established. These messages can only
appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively.
In order to find out, when the connection has been successfully established,
on many platforms select() or poll() for writing on the socket file descriptor
can be used.

=item tls_ERROR_WANT_X509_LOOKUP

The operation did not complete because an application callback set by
tls_CTX_set_client_cert_cb() has asked to be called again.
The TLS/tls I/O function should be called again later.
Details depend on the application.

=item tls_ERROR_WANT_ASYNC

The operation did not complete because an asynchronous engine is still
processing data. This will only occur if the mode has been set to tls_MODE_ASYNC
using L<tls_CTX_set_mode(3)> or L<tls_set_mode(3)> and an asynchronous capable
engine is being used. An application can determine whether the engine has
completed its processing using select() or poll() on the asynchronous wait file
descriptor. This file descriptor is available by calling
L<tls_get_all_async_fds(3)> or L<tls_get_changed_async_fds(3)>. The TLS/tls I/O
function should be called again later. The function B<must> be called from the
same thread that the original call was made from.

=item tls_ERROR_WANT_ASYNC_JOB

The asynchronous job could not be started because there were no async jobs
available in the pool (see ASYNC_init_thread(3)). This will only occur if the
mode has been set to tls_MODE_ASYNC using L<tls_CTX_set_mode(3)> or
L<tls_set_mode(3)> and a maximum limit has been set on the async job pool
through a call to L<ASYNC_init_thread(3)>. The application should retry the
operation after a currently executing asynchronous operation for the current
thread has completed.

=item tls_ERROR_WANT_CLIENT_HELLO_CB

The operation did not complete because an application callback set by
tls_CTX_set_client_hello_cb() has asked to be called again.
The TLS/tls I/O function should be called again later.
Details depend on the application.

=item tls_ERROR_SYSCALL

Some non-recoverable, fatal I/O error occurred. The Opentls error queue may
contain more information on the error. For socket I/O on Unix systems, consult
B<errno> for details. If this error occurs then no further I/O operations should
be performed on the connection and tls_shutdown() must not be called.

This value can also be returned for other errors, check the error queue for
details.

=item tls_ERROR_tls

A non-recoverable, fatal error in the tls library occurred, usually a protocol
error.  The Opentls error queue contains more information on the error. If this
error occurs then no further I/O operations should be performed on the
connection and tls_shutdown() must not be called.

=back

=head1 SEE ALSO

L<tls(7)>

=head1 HISTORY

The tls_ERROR_WANT_ASYNC error code was added in Opentls 1.1.0.
The tls_ERROR_WANT_CLIENT_HELLO_CB error code was added in Opentls 1.1.1.

=head1 COPYRIGHT

Copyright 2000-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
