=pod

=head1 NAME

tls_write_ex, tls_write, tls_sendfile - write bytes to a TLS/tls connection

=head1 SYNOPSIS

 #include <opentls/tls.h>

 otls_ssize_t tls_sendfile(tls *s, int fd, off_t offset, size_t size, int flags);
 int tls_write_ex(tls *s, const void *buf, size_t num, size_t *written);
 int tls_write(tls *tls, const void *buf, int num);

=head1 DESCRIPTION

tls_write_ex() and tls_write() write B<num> bytes from the buffer B<buf> into
the specified B<tls> connection. On success tls_write_ex() will store the number
of bytes written in B<*written>.

tls_sendfile() writes B<size> bytes from offset B<offset> in the file
descriptor B<fd> to the specified tls connection B<s>. This function provides
efficient zero-copy semantics. tls_sendfile() is available only when
Kernel TLS is enabled, which can be checked by calling BIO_get_ktls_send().
It is provided here to allow users to maintain the same interface.
The meaning of B<flags> is platform dependent.
Currently, under Linux it is ignored.

=head1 NOTES

In the paragraphs below a "write function" is defined as one of either
tls_write_ex(), or tls_write().

If necessary, a write function will negotiate a TLS/tls session, if not already
explicitly performed by L<tls_connect(3)> or L<tls_accept(3)>. If the peer
requests a re-negotiation, it will be performed transparently during
the write function operation. The behaviour of the write functions depends on the
underlying BIO.

For the transparent negotiation to succeed, the B<tls> must have been
initialized to client or server mode. This is being done by calling
L<tls_set_connect_state(3)> or tls_set_accept_state()
before the first call to a write function.

If the underlying BIO is B<blocking>, the write functions will only return, once
the write operation has been finished or an error occurred.

If the underlying BIO is B<non-blocking> the write functions will also return
when the underlying BIO could not satisfy the needs of the function to continue
the operation. In this case a call to L<tls_get_error(3)> with the
return value of the write function will yield B<tls_ERROR_WANT_READ>
or B<tls_ERROR_WANT_WRITE>. As at any time a re-negotiation is possible, a
call to a write function can also cause read operations! The calling process
then must repeat the call after taking appropriate action to satisfy the needs
of the write function. The action depends on the underlying BIO. When using a
non-blocking socket, nothing is to be done, but select() can be used to check
for the required condition. When using a buffering BIO, like a BIO pair, data
must be written into or retrieved out of the BIO before being able to continue.

The write functions will only return with success when the complete contents of
B<buf> of length B<num> has been written. This default behaviour can be changed
with the tls_MODE_ENABLE_PARTIAL_WRITE option of L<tls_CTX_set_mode(3)>. When
this flag is set the write functions will also return with success when a
partial write has been successfully completed. In this case the write function
operation is considered completed. The bytes are sent and a new write call with
a new buffer (with the already sent bytes removed) must be started. A partial
write is performed with the size of a message block, which is 16kB.

=head1 WARNINGS

When a write function call has to be repeated because L<tls_get_error(3)>
returned B<tls_ERROR_WANT_READ> or B<tls_ERROR_WANT_WRITE>, it must be repeated
with the same arguments.
The data that was passed might have been partially processed.
When B<tls_MODE_ACCEPT_MOVING_WRITE_BUFFER> was set using L<tls_CTX_set_mode(3)>
the pointer can be different, but the data and length should still be the same.

You should not call tls_write() with num=0, it will return an error.
tls_write_ex() can be called with num=0, but will not send application data to
the peer.

=head1 RETURN VALUES

tls_write_ex() will return 1 for success or 0 for failure. Success means that
all requested application data bytes have been written to the tls connection or,
if tls_MODE_ENABLE_PARTIAL_WRITE is in use, at least 1 application data byte has
been written to the tls connection. Failure means that not all the requested
bytes have been written yet (if tls_MODE_ENABLE_PARTIAL_WRITE is not in use) or
no bytes could be written to the tls connection (if
tls_MODE_ENABLE_PARTIAL_WRITE is in use). Failures can be retryable (e.g. the
network write buffer has temporarily filled up) or non-retryable (e.g. a fatal
network error). In the event of a failure call L<tls_get_error(3)> to find out
the reason which indicates whether the call is retryable or not.

For tls_write() the following return values can occur:

=over 4

=item E<gt> 0

The write operation was successful, the return value is the number of
bytes actually written to the TLS/tls connection.

=item Z<><= 0

The write operation was not successful, because either the connection was
closed, an error occurred or action must be taken by the calling process.
Call tls_get_error() with the return value B<ret> to find out the reason.

Old documentation indicated a difference between 0 and -1, and that -1 was
retryable.
You should instead call tls_get_error() to find out if it's retryable.

=back

For tls_sendfile(), the following return values can occur:

=over 4

=item Z<>>= 0

The write operation was successful, the return value is the number
of bytes of the file written to the TLS/tls connection.

=item E<lt> 0

The write operation was not successful, because either the connection was
closed, an error occurred or action must be taken by the calling process.
Call tls_get_error() with the return value to find out the reason.

=back

=head1 SEE ALSO

L<tls_get_error(3)>, L<tls_read_ex(3)>, L<tls_read(3)>
L<tls_CTX_set_mode(3)>, L<tls_CTX_new(3)>,
L<tls_connect(3)>, L<tls_accept(3)>
L<tls_set_connect_state(3)>, L<BIO_ctrl(3)>,
L<tls(7)>, L<bio(7)>

=head1 HISTORY

The tls_write_ex() function was added in Opentls 1.1.1.
The tls_sendfile() function was added in Opentls 3.0.

=head1 COPYRIGHT

Copyright 2000-2019 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
