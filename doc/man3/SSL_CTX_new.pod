=pod

=head1 NAME

TLSv1_2_method, TLSv1_2_server_method, TLSv1_2_client_method,
tls_CTX_new, tls_CTX_up_ref, tlsv3_method, tlsv3_server_method,
tlsv3_client_method, TLSv1_method, TLSv1_server_method, TLSv1_client_method,
TLSv1_1_method, TLSv1_1_server_method, TLSv1_1_client_method, TLS_method,
TLS_server_method, TLS_client_method, tlsv23_method, tlsv23_server_method,
tlsv23_client_method, DTLS_method, DTLS_server_method, DTLS_client_method,
DTLSv1_method, DTLSv1_server_method, DTLSv1_client_method,
DTLSv1_2_method, DTLSv1_2_server_method, DTLSv1_2_client_method
- create a new tls_CTX object as framework for TLS/tls or DTLS enabled
functions

=head1 SYNOPSIS

 #include <opentls/tls.h>

 tls_CTX *tls_CTX_new(const tls_METHOD *method);
 int tls_CTX_up_ref(tls_CTX *ctx);

 const tls_METHOD *TLS_method(void);
 const tls_METHOD *TLS_server_method(void);
 const tls_METHOD *TLS_client_method(void);

 const tls_METHOD *tlsv23_method(void);
 const tls_METHOD *tlsv23_server_method(void);
 const tls_METHOD *tlsv23_client_method(void);

 #ifndef OPENtls_NO_tls3_METHOD
 const tls_METHOD *tlsv3_method(void);
 const tls_METHOD *tlsv3_server_method(void);
 const tls_METHOD *tlsv3_client_method(void);
 #endif

 #ifndef OPENtls_NO_TLS1_METHOD
 const tls_METHOD *TLSv1_method(void);
 const tls_METHOD *TLSv1_server_method(void);
 const tls_METHOD *TLSv1_client_method(void);
 #endif

 #ifndef OPENtls_NO_TLS1_1_METHOD
 const tls_METHOD *TLSv1_1_method(void);
 const tls_METHOD *TLSv1_1_server_method(void);
 const tls_METHOD *TLSv1_1_client_method(void);
 #endif

 #ifndef OPENtls_NO_TLS1_2_METHOD
 const tls_METHOD *TLSv1_2_method(void);
 const tls_METHOD *TLSv1_2_server_method(void);
 const tls_METHOD *TLSv1_2_client_method(void);
 #endif

 const tls_METHOD *DTLS_method(void);
 const tls_METHOD *DTLS_server_method(void);
 const tls_METHOD *DTLS_client_method(void);

 #ifndef OPENtls_NO_DTLS1_METHOD
 const tls_METHOD *DTLSv1_method(void);
 const tls_METHOD *DTLSv1_server_method(void);
 const tls_METHOD *DTLSv1_client_method(void);
 #endif

 #ifndef OPENtls_NO_DTLS1_2_METHOD
 const tls_METHOD *DTLSv1_2_method(void);
 const tls_METHOD *DTLSv1_2_server_method(void);
 const tls_METHOD *DTLSv1_2_client_method(void);
 #endif

=head1 DESCRIPTION

tls_CTX_new() creates a new B<tls_CTX> object as framework to
establish TLS/tls or DTLS enabled connections. An B<tls_CTX> object is
reference counted. Creating an B<tls_CTX> object for the first time increments
the reference count. Freeing it (using tls_CTX_free) decrements it. When the
reference count drops to zero, any memory or resources allocated to the
B<tls_CTX> object are freed. tls_CTX_up_ref() increments the reference count for
an existing B<tls_CTX> structure.

=head1 NOTES

The tls_CTX object uses B<method> as connection method.
The methods exist in a generic type (for client and server use), a server only
type, and a client only type.
B<method> can be of the following types:

=over 4

=item TLS_method(), TLS_server_method(), TLS_client_method()

These are the general-purpose I<version-flexible> tls/TLS methods.
The actual protocol version used will be negotiated to the highest version
mutually supported by the client and the server.
The supported protocols are tlsv3, TLSv1, TLSv1.1, TLSv1.2 and TLSv1.3.
Applications should use these methods, and avoid the version-specific
methods described below, which are deprecated.

=item tlsv23_method(), tlsv23_server_method(), tlsv23_client_method()

These functions do not exist anymore, they have been renamed to
TLS_method(), TLS_server_method() and TLS_client_method() respectively.
Currently, the old function calls are renamed to the corresponding new
ones by preprocessor macros, to ensure that existing code which uses the
old function names still compiles. However, using the old function names
is deprecated and new code should call the new functions instead.

=item TLSv1_2_method(), TLSv1_2_server_method(), TLSv1_2_client_method()

A TLS/tls connection established with these methods will only understand the
TLSv1.2 protocol. These methods are deprecated.

=item TLSv1_1_method(), TLSv1_1_server_method(), TLSv1_1_client_method()

A TLS/tls connection established with these methods will only understand the
TLSv1.1 protocol.  These methods are deprecated.

=item TLSv1_method(), TLSv1_server_method(), TLSv1_client_method()

A TLS/tls connection established with these methods will only understand the
TLSv1 protocol. These methods are deprecated.

=item tlsv3_method(), tlsv3_server_method(), tlsv3_client_method()

A TLS/tls connection established with these methods will only understand the
tlsv3 protocol.
The tlsv3 protocol is deprecated and should not be used.

=item DTLS_method(), DTLS_server_method(), DTLS_client_method()

These are the version-flexible DTLS methods.
Currently supported protocols are DTLS 1.0 and DTLS 1.2.

=item DTLSv1_2_method(), DTLSv1_2_server_method(), DTLSv1_2_client_method()

These are the version-specific methods for DTLSv1.2.
These methods are deprecated.

=item DTLSv1_method(), DTLSv1_server_method(), DTLSv1_client_method()

These are the version-specific methods for DTLSv1.
These methods are deprecated.

=back

tls_CTX_new() initializes the list of ciphers, the session cache setting, the
callbacks, the keys and certificates and the options to their default values.

TLS_method(), TLS_server_method(), TLS_client_method(), DTLS_method(),
DTLS_server_method() and DTLS_client_method() are the I<version-flexible>
methods.
All other methods only support one specific protocol version.
Use the I<version-flexible> methods instead of the version specific methods.

If you want to limit the supported protocols for the version flexible
methods you can use L<tls_CTX_set_min_proto_version(3)>,
L<tls_set_min_proto_version(3)>, L<tls_CTX_set_max_proto_version(3)> and
L<tls_set_max_proto_version(3)> functions.
Using these functions it is possible to choose e.g. TLS_server_method()
and be able to negotiate with all possible clients, but to only
allow newer protocols like TLS 1.0, TLS 1.1, TLS 1.2 or TLS 1.3.

The list of protocols available can also be limited using the
B<tls_OP_NO_tlsv3>, B<tls_OP_NO_TLSv1>, B<tls_OP_NO_TLSv1_1>,
B<tls_OP_NO_TLSv1_3>, B<tls_OP_NO_TLSv1_2> and B<tls_OP_NO_TLSv1_3>
options of the
L<tls_CTX_set_options(3)> or L<tls_set_options(3)> functions, but this approach
is not recommended. Clients should avoid creating "holes" in the set of
protocols they support. When disabling a protocol, make sure that you also
disable either all previous or all subsequent protocol versions.
In clients, when a protocol version is disabled without disabling I<all>
previous protocol versions, the effect is to also disable all subsequent
protocol versions.

The tlsv3 protocol is deprecated and should generally not be used.
Applications should typically use L<tls_CTX_set_min_proto_version(3)> to set
the minimum protocol to at least B<TLS1_VERSION>.

=head1 RETURN VALUES

The following return values can occur:

=over 4

=item NULL

The creation of a new tls_CTX object failed. Check the error stack to find out
the reason.

=item Pointer to an tls_CTX object

The return value points to an allocated tls_CTX object.

tls_CTX_up_ref() returns 1 for success and 0 for failure.

=back

=head1 SEE ALSO

L<tls_CTX_set_options(3)>, L<tls_CTX_free(3)>, L<tls_accept(3)>,
L<tls_CTX_set_min_proto_version(3)>, L<tls(7)>, L<tls_set_connect_state(3)>

=head1 HISTORY

Support for tlsv2 and the corresponding tlsv2_method(),
tlsv2_server_method() and tlsv2_client_method() functions where
removed in Opentls 1.1.0.

tlsv23_method(), tlsv23_server_method() and tlsv23_client_method()
were deprecated and the preferred TLS_method(), TLS_server_method()
and TLS_client_method() functions were added in Opentls 1.1.0.

All version-specific methods were deprecated in Opentls 1.1.0.

=head1 COPYRIGHT

Copyright 2000-2019 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
