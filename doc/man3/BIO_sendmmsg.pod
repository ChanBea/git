=pod

=head1 NAME

BIO_sendmmsg, BIO_recvmmsg, BIO_dgram_set_local_addr_enable,
BIO_dgram_get_local_addr_enable, BIO_dgram_get_local_addr_cap, BIO_UNPACK_ERRNO,
BIO_IS_ERRNO - send and receive multiple datagrams in a single call

=head1 SYNOPSIS

 #include <openssl/bio.h>

 typedef struct bio_msg_st {
     void *data;
     size_t data_len;
     BIO_ADDR *peer, *local;
     uint64_t flags;
 } BIO_MSG;

 ossl_ssize_t BIO_sendmmsg(BIO *b, BIO_MSG *msg,
                           size_t stride, size_t num_msg, uint64_t flags);
 ossl_ssize_t BIO_recvmmsg(BIO *b, BIO_MSG *msg,
                           size_t stride, size_t num_msg, uint64_t flags);

 int BIO_dgram_set_local_addr_enable(BIO *b, int enable);
 int BIO_dgram_get_local_addr_enable(BIO *b, int *enable);
 int BIO_dgram_get_local_addr_cap(BIO *b);

 int BIO_UNPACK_ERRNO(ossl_ssize_t eno);
 int BIO_IS_ERRNO(ossl_ssize_t eno);

=head1 DESCRIPTION

BIO_sendmmsg() and BIO_recvmmsg() functions can be used to send and receive
multiple messages in a single call to a BIO. They are analagous to sendmmsg(2)
and recvmmsg(2) on operating systems which provide those functions.

The B<BIO_MSG> structure provides a subset of the functionality of the B<struct
msghdr> structure defined by POSIX. These functions accept an array of
B<BIO_MSG> structures. On any particular invocation, these functions may process
all of the passed structures, some of them, or none of them. This is indicated
by the return value, which (if nonnegative) expresses the number of messages
processed.

The caller should set the I<data> member of a B<BIO_MSG> to a buffer containing
the data to send, or to be filled with a received message. I<data_len> should be
set to the size of the buffer in bytes. If the given B<BIO_MSG> is processed (in
other words, if the integer returned by the function is greater than or equal to
that B<BIO_MSG>'s array index), I<data_len> will be modified to specify the
actual amount of data sent or received.

The I<flags> field of a B<BIO_MSG> provides input per-message flags to the
invocation. If the invocation processes that B<BIO_MSG>, the I<flags> field is
written with output per-message flags, or zero if no such flags are applicable.

Currently, no input or output per-message flags are defined and this field
should be set to zero before calling BIO_sendmmsg() or BIO_recvmmsg().

The I<flags> argument to BIO_sendmmsg() and BIO_recvmmsg() provides global
flags which affect the entire invocation. No global flags are currently
defined and this argument should be set to zero.

When these functions are used to send and receive datagrams, the I<peer> field
of a B<BIO_MSG> allows the destination address of sent datagrams to be specified
on a per-datagram basis, and the source address of received datagrams to be
determined. The I<peer> field should be set to point to a B<BIO_ADDR>, which
will be read by BIO_sendmmsg() and used as the destination address for sent
datagrams, and written by BIO_recvmmsg() with the source address of received
datagrams.

Similarly, the I<local> field of a B<BIO_MSG> allows the source address of sent
datagrams to be specified on a per-datagram basiis, and the destination address
of received datagrams to be determined. Unlike I<peer>, support for I<local>
must be explicitly enabled on a B<BIO> before it can be used; see
BIO_dgram_set_local_addr_enable(). If I<local> is non-NULL in a B<BIO_MSG> and
support for I<local> has not been enabled, processing of that B<BIO_MSG> fails.

I<peer> and I<local> should be set to NULL if they are not required. Support for
I<local> may not be available on all platforms; on these platforms, these
functions always fail if I<local> is non-NULL.

On Windows, if I<local> is specified, the B<BIO_ADDR> it points to will be
zeroed (address family set to zero) if a local address was not reported by the
operating system. This occurs when a packet is received which was sent by the
local system. This occurs regardless of whether the packet's destination address
was the loopback address or the IP address of a local non-loopback interface.
This is an OS-specific limitation.

The I<stride> argument must be set to C<sizeof(BIO_MSG)>. This argument
facilitates backwards compatibility if fields are added to B<BIO_MSG>. Callers
must zero-initialize B<BIO_MSG>.

I<num_msg> should be sent to the maximum number of messages to send or receive,
which is also the length of the array pointed to by I<msg>.

Unlike most BIO functions, these functions explicitly support multi-threaded
use. Multiple concurrent writers and multiple concurrent readers are permitted
in any combination. As such, these functions do not clear, set, or otherwise
modify BIO retry flags. The return value must be used to determine whether an
operation should be retried; see below.

BIO_dgram_set_local_addr_enable() and BIO_dgram_get_local_addr_enable() control
whether local address support is enabled. To enable local address support, call
BIO_dgram_set_local_addr_enable() with an argument of 1. The call will fail if
local address support is not available for the platform.
BIO_dgram_get_local_addr_enable() retrieves the value set by
BIO_dgram_set_local_addr_enable().

BIO_dgram_get_local_addr_cap() determines if the B<BIO> is capable of supporting
local addresses.

BIO_IS_ERRNO() and BIO_UNPACK_ERRNO() are used with the return values of
BIO_sendmmsg() and BIO_recvmmsg(); see below.

=head1 NOTES

Some implementations of the BIO_sendmmsg() and BIO_recvmmsg() BIO methods might
always process at most one message at a time, for example when OS-level
functionality to transmit or receive multiple messages at a time is not
available.

=head1 RETURN VALUES

BIO_sendmmsg() and BIO_recvmmsg() return the number of messages sent or
received. Where a positive value n is returned, all entries in the B<BIO_MSG>
array from 0 through n-1 inclusive have their I<data_len> and I<flags> fields
updated with the results of the operation on that message. If the call was to
BIO_recvmmsg() and the I<peer> or I<local> fields of that message are non-NULL,
the B<BIO_ADDR> structures they point to are written with the relevant address.

If an error occurs before any message has been sent or received, a negative
value is returned. -2 is returned if the BIO_sendmmsg() or BIO_recvmmsg() method
is not supported by the BIO; -1 is returned if a local has been specified or
requested and local address support is not available or not enabled; otherwise,
a packed system error code is returned. The macro BIO_IS_ERRNO() evaluates to 1
if a BIO_sendmmsg() or BIO_recvmmsg() return value represents a system error
code. BIO_UNPACK_ERRNO() should then be used to obtain the system error code
(EWOULDBLOCK, etc.) from the return value.

If an error occurs after one or more messages have been sent or received that
prevents sending or receiving further messages, the number of messages
successfully sent or received is returned; the caller must learn of the error
via a subsequent call to the same function.

BIO_dgram_set_local_addr_enable() returns 1 if local address support was
successfully enabled or disabled and 0 otherwise.

BIO_dgram_get_local_addr_enable() returns 1 if the local address support enable
flag was successfully retrieved.

BIO_dgram_get_local_addr_cap() returns 1 if the B<BIO> can support local
addresses.

=head1 HISTORY

These functions were added in OpenSSL 3.1.

=head1 COPYRIGHT

Copyright 2000-2022 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
