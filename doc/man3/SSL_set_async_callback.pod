=pod

=head1 NAME

tls_CTX_set_async_callback,
tls_CTX_set_async_callback_arg,
tls_set_async_callback,
tls_set_async_callback_arg,
tls_get_async_status,
tls_async_callback_fn
- manage asynchronous operations

=head1 SYNOPSIS

=for opentls multiple includes

 #include <opentls/tls.h>

 typedef int (*tls_async_callback_fn)(tls *s, void *arg);
 int tls_CTX_set_async_callback(tls_CTX *ctx, tls_async_callback_fn callback);
 int tls_CTX_set_async_callback_arg(tls_CTX *ctx, void *arg);
 int tls_set_async_callback(tls *s, tls_async_callback_fn callback);
 int tls_set_async_callback_arg(tls *s, void *arg);
 int tls_get_async_status(tls *s, int *status);

=head1 DESCRIPTION

tls_CTX_set_async_callback() sets an asynchronous callback function. All B<tls>
objects generated based on this B<tls_CTX> will get this callback. If an engine
supports the callback mechanism, it will be automatically called if
B<tls_MODE_ASYNC> has been set and an asynchronous capable engine completes a
cryptography operation to notify the application to resume the paused work flow.

tls_CTX_set_async_callback_arg() sets the callback argument.

tls_set_async_callback() allows an application to set a callback in an
asynchronous B<tls> object, so that when an engine completes a cryptography
operation, the callback will be called to notify the application to resume the
paused work flow.

tls_set_async_callback_arg() sets an argument for the B<tls> object when the
above callback is called.

tls_get_async_status() returns the engine status. This function facilitates the
communication from the engine to the application. During an tls session,
cryptographic operations are dispatched to an engine. The engine status is very
useful for an application to know if the operation has been successfully
dispatched. If the engine does not support this additional callback method,
B<ASYNC_STATUS_UNSUPPORTED> will be returned. See ASYNC_WAIT_CTX_set_status()
for a description of all of the status values.

An example of the above functions would be the following:

=over 4

=item 1.

Application sets the async callback and callback data on an tls connection 
by calling tls_set_async_callback().

=item 2.

Application sets B<tls_MODE_ASYNC> and makes an asynchronous tls call

=item 3.

Opentls submits the asynchronous request to the engine. If a retry occurs at
this point then the status within the B<ASYNC_WAIT_CTX> would be set and the
async callback function would be called (goto Step 7).

=item 4.

The Opentls engine pauses the current job and returns, so that the
application can continue processing other connections.

=item 5.

At a future point in time (probably via a polling mechanism or via an
interrupt) the engine will become aware that the asynchronous request has
finished processing.

=item 6.

The engine will call the application's callback passing the callback data as
a parameter.

=item 7.

The callback function should then run. Note: it is a requirement that the
callback function is small and non-blocking as it will be run in the context of
a polling mechanism or an interrupt.

=item 8.

It is the application's responsibility via the callback function to schedule
recalling the Opentls asynchronous function and to continue processing.

=item 9.

The callback function has the option to check the status returned via
tls_get_async_status() to determine whether a retry happened instead of the
request being submitted, allowing different processing if required.

=back

=head1 RETURN VALUES

tls_CTX_set_async_callback(), tls_set_async_callback(),
tls_CTX_set_async_callback_arg(), tls_CTX_set_async_callback_arg() and
tls_get_async_status() return 1 on success or 0 on error.

=head1 SEE ALSO

L<tls(7)>

=head1 HISTORY

tls_CTX_set_async_callback(), tls_CTX_set_async_callback_arg(),
tls_set_async_callback(), tls_set_async_callback_arg() and
tls_get_async_status() were first added to Opentls 3.0.

=head1 COPYRIGHT

Copyright 2019 The Opentls Project Authors. All Rights Reserved.

Licensed under the Opentls license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
