=pod

=head1 NAME

OPENtls_INIT_new, OPENtls_INIT_set_config_filename,
OPENtls_INIT_set_config_appname, OPENtls_INIT_set_config_file_flags,
OPENtls_INIT_free, OPENtls_init_crypto, OPENtls_cleanup, OPENtls_atexit,
OPENtls_thread_stop_ex, OPENtls_thread_stop - Opentls initialisation
and deinitialisation functions

=head1 SYNOPSIS

 #include <opentls/crypto.h>

 void OPENtls_cleanup(void);
 int OPENtls_init_crypto(uint64_t opts, const OPENtls_INIT_SETTINGS *settings);
 int OPENtls_atexit(void (*handler)(void));
 void OPENtls_thread_stop_ex(OPENtls_CTX *ctx);
 void OPENtls_thread_stop(void);

 OPENtls_INIT_SETTINGS *OPENtls_INIT_new(void);
 int OPENtls_INIT_set_config_filename(OPENtls_INIT_SETTINGS *init,
                                      const char* filename);
 int OPENtls_INIT_set_config_file_flags(OPENtls_INIT_SETTINGS *init,
                                        unsigned long flags);
 int OPENtls_INIT_set_config_appname(OPENtls_INIT_SETTINGS *init,
                                     const char* name);
 void OPENtls_INIT_free(OPENtls_INIT_SETTINGS *init);

=head1 DESCRIPTION

During normal operation Opentls (libcrypto) will allocate various resources at
start up that must, subsequently, be freed on close down of the library.
Additionally some resources are allocated on a per thread basis (if the
application is multi-threaded), and these resources must be freed prior to the
thread closing.

As of version 1.1.0 Opentls will automatically allocate all resources that it
needs so no explicit initialisation is required. Similarly it will also
automatically deinitialise as required.

However, there may be situations when explicit initialisation is desirable or
needed, for example when some non-default initialisation is required. The
function OPENtls_init_crypto() can be used for this purpose for
libcrypto (see also L<OPENtls_init_tls(3)> for the libtls
equivalent).

Numerous internal Opentls functions call OPENtls_init_crypto().
Therefore, in order to perform non-default initialisation,
OPENtls_init_crypto() MUST be called by application code prior to
any other Opentls function calls.

The B<opts> parameter specifies which aspects of libcrypto should be
initialised. Valid options are:

=over 4

=item OPENtls_INIT_NO_LOAD_CRYPTO_STRINGS

Suppress automatic loading of the libcrypto error strings. This option is
not a default option. Once selected subsequent calls to
OPENtls_init_crypto() with the option
B<OPENtls_INIT_LOAD_CRYPTO_STRINGS> will be ignored.

=item OPENtls_INIT_LOAD_CRYPTO_STRINGS

Automatic loading of the libcrypto error strings. With this option the
library will automatically load the libcrypto error strings.
This option is a default option. Once selected subsequent calls to
OPENtls_init_crypto() with the option
B<OPENtls_INIT_NO_LOAD_CRYPTO_STRINGS> will be ignored.

=item OPENtls_INIT_ADD_ALL_CIPHERS

With this option the library will automatically load and make available all
libcrypto ciphers. This option is a default option. Once selected subsequent
calls to OPENtls_init_crypto() with the option
B<OPENtls_INIT_NO_ADD_ALL_CIPHERS> will be ignored.

=item OPENtls_INIT_ADD_ALL_DIGESTS

With this option the library will automatically load and make available all
libcrypto digests. This option is a default option. Once selected subsequent
calls to OPENtls_init_crypto() with the option
B<OPENtls_INIT_NO_ADD_ALL_CIPHERS> will be ignored.

=item OPENtls_INIT_NO_ADD_ALL_CIPHERS

With this option the library will suppress automatic loading of libcrypto
ciphers. This option is not a default option. Once selected subsequent
calls to OPENtls_init_crypto() with the option
B<OPENtls_INIT_ADD_ALL_CIPHERS> will be ignored.

=item OPENtls_INIT_NO_ADD_ALL_DIGESTS

With this option the library will suppress automatic loading of libcrypto
digests. This option is not a default option. Once selected subsequent
calls to OPENtls_init_crypto() with the option
B<OPENtls_INIT_ADD_ALL_DIGESTS> will be ignored.

=item OPENtls_INIT_LOAD_CONFIG

With this option an Opentls configuration file will be automatically loaded and
used by calling OPENtls_config(). This is a default option.
Note that in Opentls 1.1.1 this was the default for libtls but not for
libcrypto (see L<OPENtls_init_tls(3)> for further details about libtls
initialisation).
In Opentls 1.1.0 this was a non-default option for both libtls and libcrypto.
See the description of OPENtls_INIT_new(), below.

=item OPENtls_INIT_NO_LOAD_CONFIG

With this option the loading of Opentls configuration files will be suppressed.
It is the equivalent of calling OPENtls_no_config(). This is not a default
option.

=item OPENtls_INIT_ASYNC

With this option the library with automatically initialise the libcrypto async
sub-library (see L<ASYNC_start_job(3)>). This is a default option.

=item OPENtls_INIT_ENGINE_RDRAND

With this option the library will automatically load and initialise the
RDRAND engine (if available). This not a default option.

=item OPENtls_INIT_ENGINE_DYNAMIC

With this option the library will automatically load and initialise the
dynamic engine. This not a default option.

=item OPENtls_INIT_ENGINE_OPENtls

With this option the library will automatically load and initialise the
opentls engine. This not a default option.

=item OPENtls_INIT_ENGINE_CRYPTODEV

With this option the library will automatically load and initialise the
cryptodev engine (if available). This not a default option.

=item OPENtls_INIT_ENGINE_CAPI

With this option the library will automatically load and initialise the
CAPI engine (if available). This not a default option.

=item OPENtls_INIT_ENGINE_PADLOCK

With this option the library will automatically load and initialise the
padlock engine (if available). This not a default option.

=item OPENtls_INIT_ENGINE_AFALG

With this option the library will automatically load and initialise the
AFALG engine. This not a default option.

=item OPENtls_INIT_ENGINE_ALL_BUILTIN

With this option the library will automatically load and initialise all the
built in engines listed above with the exception of the opentls and afalg
engines. This not a default option.

=item OPENtls_INIT_ATFORK

With this option the library will register its fork handlers.
See OPENtls_fork_prepare(3) for details.

=item OPENtls_INIT_NO_ATEXIT

By default Opentls will attempt to clean itself up when the process exits via an
"atexit" handler. Using this option suppresses that behaviour. This means that
the application will have to clean up Opentls explicitly using
OPENtls_cleanup().

=back

Multiple options may be combined together in a single call to
OPENtls_init_crypto(). For example:

 OPENtls_init_crypto(OPENtls_INIT_NO_ADD_ALL_CIPHERS
                     | OPENtls_INIT_NO_ADD_ALL_DIGESTS, NULL);

The OPENtls_cleanup() function deinitialises Opentls (both libcrypto
and libtls). All resources allocated by Opentls are freed. Typically there
should be no need to call this function directly as it is initiated
automatically on application exit. This is done via the standard C library
atexit() function. In the event that the application will close in a manner
that will not call the registered atexit() handlers then the application should
call OPENtls_cleanup() directly. Developers of libraries using Opentls
are discouraged from calling this function and should instead, typically, rely
on auto-deinitialisation. This is to avoid error conditions where both an
application and a library it depends on both use Opentls, and the library
deinitialises it before the application has finished using it.

Once OPENtls_cleanup() has been called the library cannot be reinitialised.
Attempts to call OPENtls_init_crypto() will fail and an ERR_R_INIT_FAIL error
will be added to the error stack. Note that because initialisation has failed
Opentls error strings will not be available, only an error code. This code can
be put through the opentls errstr command line application to produce a human
readable error (see L<opentls-errstr(1)>).

The OPENtls_atexit() function enables the registration of a
function to be called during OPENtls_cleanup(). Stop handlers are
called after deinitialisation of resources local to a thread, but before other
process wide resources are freed. In the event that multiple stop handlers are
registered, no guarantees are made about the order of execution.

The OPENtls_thread_stop_ex() function deallocates resources associated
with the current thread for the given OPENtls_CTX B<ctx>. The B<ctx> parameter
can be NULL in which case the default OPENtls_CTX is used.

Typically, this function will be called automatically by the library when
the thread exits as long as the OPENtls_CTX has not been freed before the thread
exits. If OPENtls_CTX_free() is called OPENtls_thread_stop_ex will be called
automatically for the current thread (but not any other threads that may have
used this OPENtls_CTX).

OPENtls_thread_stop_ex should be called on all threads that will exit after the
OPENtls_CTX is freed.
Typically this is not necessary for the default OPENtls_CTX (because all
resources are cleaned up on library exit) except if thread local resources
should be freed before library exit, or under the circumstances described in
the NOTES section below.

OPENtls_thread_stop() is the same as OPENtls_thread_stop_ex() except that the
default OPENtls_CTX is always used.

The B<OPENtls_INIT_LOAD_CONFIG> flag will load a configuration file, as with
L<CONF_modules_load_file(3)> with NULL filename and application name and the
B<CONF_MFLAGS_IGNORE_MISSING_FILE>, B<CONF_MFLAGS_IGNORE_RETURN_CODES>  and
B<CONF_MFLAGS_DEFAULT_SECTION> flags.
The filename, application name, and flags can be customized by providing a
non-null B<OPENtls_INIT_SETTINGS> object.
The object can be allocated via B<OPENtls_INIT_new()>.
The B<OPENtls_INIT_set_config_filename()> function can be used to specify a
non-default filename, which is copied and need not refer to persistent storage.
Similarly, OPENtls_INIT_set_config_appname() can be used to specify a
non-default application name.
Finally, OPENtls_INIT_set_file_flags can be used to specify non-default flags.
If the B<CONF_MFLAGS_IGNORE_RETURN_CODES> flag is not included, any errors in
the configuration file will cause an error return from B<OPENtls_init_crypto>
or indirectly L<OPENtls_init_tls(3)>.
The object can be released with OPENtls_INIT_free() when done.

=head1 NOTES

Resources local to a thread are deallocated automatically when the thread exits
(e.g. in a pthreads environment, when pthread_exit() is called). On Windows
platforms this is done in response to a DLL_THREAD_DETACH message being sent to
the libcrypto32.dll entry point. Some windows functions may cause threads to exit
without sending this message (for example ExitProcess()). If the application
uses such functions, then the application must free up Opentls resources
directly via a call to OPENtls_thread_stop() on each thread. Similarly this
message will also not be sent if Opentls is linked statically, and therefore
applications using static linking should also call OPENtls_thread_stop() on each
thread. Additionally if Opentls is loaded dynamically via LoadLibrary() and the
threads are not destroyed until after FreeLibrary() is called then each thread
should call OPENtls_thread_stop() prior to the FreeLibrary() call.

On Linux/Unix where Opentls has been loaded via dlopen() and the application is
multi-threaded and if dlclose() is subsequently called prior to the threads
being destroyed then Opentls will not be able to deallocate resources associated
with those threads. The application should either call OPENtls_thread_stop() on
each thread prior to the dlclose() call, or alternatively the original dlopen()
call should use the RTLD_NODELETE flag (where available on the platform).

=head1 RETURN VALUES

The functions OPENtls_init_crypto, OPENtls_atexit() and
OPENtls_INIT_set_config_appname() return 1 on success or 0 on error.

=head1 SEE ALSO

L<OPENtls_init_tls(3)>

=head1 HISTORY

The OPENtls_init_crypto(), OPENtls_cleanup(), OPENtls_atexit(),
OPENtls_thread_stop(), OPENtls_INIT_new(), OPENtls_INIT_set_config_appname()
and OPENtls_INIT_free() functions were added in Opentls 1.1.0.

=head1 COPYRIGHT

Copyright 2016-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
