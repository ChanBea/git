=pod

=head1 NAME

tls_SESSION_new,
tls_SESSION_dup,
tls_SESSION_up_ref,
tls_SESSION_free - create, free and manage tls_SESSION structures

=head1 SYNOPSIS

 #include <opentls/tls.h>

 tls_SESSION *tls_SESSION_new(void);
 tls_SESSION *tls_SESSION_dup(const tls_SESSION *src);
 int tls_SESSION_up_ref(tls_SESSION *ses);
 void tls_SESSION_free(tls_SESSION *session);

=head1 DESCRIPTION

tls_SESSION_new() creates a new tls_SESSION structure and returns a pointer to
it.

tls_SESSION_dup() copies the contents of the tls_SESSION structure in B<src>
and returns a pointer to it.

tls_SESSION_up_ref() increments the reference count on the given tls_SESSION
structure.

tls_SESSION_free() decrements the reference count of B<session> and removes
the B<tls_SESSION> structure pointed to by B<session> and frees up the allocated
memory, if the reference count has reached 0.
If B<session> is NULL nothing is done.

=head1 NOTES

tls_SESSION objects are allocated, when a TLS/tls handshake operation
is successfully completed. Depending on the settings, see
L<tls_CTX_set_session_cache_mode(3)>,
the tls_SESSION objects are internally referenced by the tls_CTX and
linked into its session cache. tls objects may be using the tls_SESSION object;
as a session may be reused, several tls objects may be using one tls_SESSION
object at the same time. It is therefore crucial to keep the reference
count (usage information) correct and not delete a tls_SESSION object
that is still used, as this may lead to program failures due to
dangling pointers. These failures may also appear delayed, e.g.
when an tls_SESSION object was completely freed as the reference count
incorrectly became 0, but it is still referenced in the internal
session cache and the cache list is processed during a
L<tls_CTX_flush_sessions(3)> operation.

tls_SESSION_free() must only be called for tls_SESSION objects, for
which the reference count was explicitly incremented (e.g.
by calling tls_get1_session(), see L<tls_get_session(3)>)
or when the tls_SESSION object was generated outside a TLS handshake
operation, e.g. by using L<d2i_tls_SESSION(3)>.
It must not be called on other tls_SESSION objects, as this would cause
incorrect reference counts and therefore program failures.

=head1 RETURN VALUES

tls_SESSION_new returns a pointer to the newly allocated tls_SESSION structure
or NULL on error.

tls_SESSION_up_ref returns 1 on success or 0 on error.

=head1 SEE ALSO

L<tls(7)>, L<tls_get_session(3)>,
L<tls_CTX_set_session_cache_mode(3)>,
L<tls_CTX_flush_sessions(3)>,
L<d2i_tls_SESSION(3)>

=head1 HISTORY

The tls_SESSION_dup() function was added in Opentls 1.1.1.

=head1 COPYRIGHT

Copyright 2000-2016 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
