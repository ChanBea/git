=pod

=head1 NAME

OSSL_trace_set_callback, OSSL_trace_cb - Enabling trace output

=head1 SYNOPSIS

 #include <openssl/trace.h>

 typedef size_t (*OSSL_trace_cb)(const char *buf, size_t cnt, void *data);

void OSSL_trace_set_callback(int category, OSSL_trace_cb fn, void  data);

=head1 DESCRIPTION

If available (see L</NOTES> below), the application can request
internal trace output.
This output comes in form of free text for humans to read.

The trace output is divided into categories which can be
enabled individually.
They are enabled by giving them a tracer function, which is
responsible for performing the actual output.

=head2 Functions

OSSL_trace_set_callback() is used to enable a trace category by giving it the tracer
function B<fn> with the associated data B<data>, which will simply
be passed through to B<fn> whenever it's called.

The tracer function must return a C<size_t>, which must be zero on
error and otherwise return the number of bytes that were output.
It receives a text buffer B<buf> with B<cnt> bytes of text, as well as
the B<data> that was passed to OSSL_trace_set_callback().

Calling OSSL_trace_set_callback() with C<NULL> for B<fn> disables tracing for
the given B<category>

=head2 Trace categories

The trace categories are simple numbers available through macros.

=over 4

=item C<OSSL_TRACE_CATEGORY_SELF> | C<OSSL_TRACE_CATEGORY_TRACE>

Traces the OpenSSL trace API itself.

More precisely, this will generate trace output any time a new
trace hook is set.

=item C<OSSL_TRACE_CATEGORY_INIT>

Traces OpenSSL library initialization and cleanup.

This needs special care, as OpenSSL will do automatic cleanup after
exit from C<main()>.
If the tracer function outputs to the standard handles C<stderr> or
C<stdout>, this isn't an issue.
However, if the output is sent somewhere else, this "somewhere else"
needs to be cleaned away very late to ensure that the trace output
from OpenSSL's cleanup comes through.
A suggestion is to make such cleanup part of a function that's
registered very early with L<atexit(3)>.

=item C<OSSL_TRACE_CATEGORY_TLS> | C<OSSL_TRACE_CATEGORY_SSL>

Traces the TLS/SSL protocoll.

=item C<OSSL_TRACE_CATEGORY_TLS_CIPHER> | C<OSSL_TRACE_CATEGORY_SSL_CIPHER>

Traces the ciphers used by the TLS/SSL protocoll.

=item C<OSSL_TRACE_CATEGORY_ENGINE_CONF>

Traces the ENGINE configuration.

=item C<OSSL_TRACE_CATEGORY_ENGINE_TABLE>

Traces the ENGINE algorithm table selection.

More precisely, engine_table_select(), the function that is used by
RSA, DSA (etc) code to select registered ENGINEs, cache defaults and
functional references (etc), will generate trace summaries.

=item C<OSSL_TRACE_CATEGORY_ENGINE_REF_COUNT>

Tracds the ENGINE reference counting.

More precisely, both reference counts in the ENGINE structure will be
monitored with a line of trace output generated for each change.

=item C<OSSL_TRACE_CATEGORY_PKCS5V2>

Traces PKCS#5 v2 key generation.

=item C<OSSL_TRACE_CATEGORY_PKCS12_KEYGEN>

Traces PKCS#12 key generation.

=item C<OSSL_TRACE_CATEGORY_PKCS12_DECRYPT>

Traces PKCS#12 decryption.

=item C<OSSL_TRACE_CATEGORY_X509V3_POLICY>

Traces X509v3 policy processing.

More precisely, this generates the complete policy tree at various
point during evaluation.

=item C<OSSL_TRACE_CATEGORY_BN_CTX>

Traces BIGNUM context operations.

=back

There is also C<OSSL_TRACE_CATEGORY_DEFAULT>, which works as a fallback and can
be used to get I<all> trace output.

=head1 NOTES

The functionality documented here may have no effect, depending on how
the OpenSSL library was built.
The functions are always available, but may be non-operational.
If the macro C<OPENSSL_NO_TRACE> is defined in
C<openssl/opensslconf.h>, these functions are not operational.

=head1 RETURN VALUES

OSSL_trace_set_callback() does not return any value.

=head1 HISTORY

The OSSL_trace_set_callback() function was added in OpenSSL 3.0.0.

=head1 COPYRIGHT

Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
