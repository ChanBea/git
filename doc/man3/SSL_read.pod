=pod

=head1 NAME

tls_read_ex, tls_read, tls_peek_ex, tls_peek
- read bytes from a TLS/tls connection

=head1 SYNOPSIS

 #include <opentls/tls.h>

 int tls_read_ex(tls *tls, void *buf, size_t num, size_t *readbytes);
 int tls_read(tls *tls, void *buf, int num);

 int tls_peek_ex(tls *tls, void *buf, size_t num, size_t *readbytes);
 int tls_peek(tls *tls, void *buf, int num);

=head1 DESCRIPTION

tls_read_ex() and tls_read() try to read B<num> bytes from the specified B<tls>
into the buffer B<buf>. On success tls_read_ex() will store the number of bytes
actually read in B<*readbytes>.

tls_peek_ex() and tls_peek() are identical to tls_read_ex() and tls_read()
respectively except no bytes are actually removed from the underlying BIO during
the read, so that a subsequent call to tls_read_ex() or tls_read() will yield
at least the same bytes.

=head1 NOTES

In the paragraphs below a "read function" is defined as one of tls_read_ex(),
tls_read(), tls_peek_ex() or tls_peek().

If necessary, a read function will negotiate a TLS/tls session, if not already
explicitly performed by L<tls_connect(3)> or L<tls_accept(3)>. If the
peer requests a re-negotiation, it will be performed transparently during
the read function operation. The behaviour of the read functions depends on the
underlying BIO.

For the transparent negotiation to succeed, the B<tls> must have been
initialized to client or server mode. This is being done by calling
L<tls_set_connect_state(3)> or tls_set_accept_state() before the first
invocation of a read function.

The read functions work based on the tls/TLS records. The data are received in
records (with a maximum record size of 16kB). Only when a record has been
completely received, can it be processed (decryption and check of integrity).
Therefore data that was not retrieved at the last read call can still be
buffered inside the tls layer and will be retrieved on the next read
call. If B<num> is higher than the number of bytes buffered then the read
functions will return with the bytes buffered. If no more bytes are in the
buffer, the read functions will trigger the processing of the next record.
Only when the record has been received and processed completely will the read
functions return reporting success. At most the contents of one record will
be returned. As the size of an tls/TLS record may exceed the maximum packet size
of the underlying transport (e.g. TCP), it may be necessary to read several
packets from the transport layer before the record is complete and the read call
can succeed.

If B<tls_MODE_AUTO_RETRY> has been switched off and a non-application data
record has been processed, the read function can return and set the error to
B<tls_ERROR_WANT_READ>.
In this case there might still be unprocessed data available in the B<BIO>.
If read ahead was set using L<tls_CTX_set_read_ahead(3)>, there might also still
be unprocessed data available in the B<tls>.
This behaviour can be controlled using the L<tls_CTX_set_mode(3)> call.

If the underlying BIO is B<blocking>, a read function will only return once the
read operation has been finished or an error occurred, except when a
non-application data record has been processed and B<tls_MODE_AUTO_RETRY> is
not set.
Note that if B<tls_MODE_AUTO_RETRY> is set and only non-application data is
available the call will hang.

If the underlying BIO is B<non-blocking>, a read function will also return when
the underlying BIO could not satisfy the needs of the function to continue the
operation.
In this case a call to L<tls_get_error(3)> with the
return value of the read function will yield B<tls_ERROR_WANT_READ> or
B<tls_ERROR_WANT_WRITE>.
As at any time it's possible that non-application data needs to be sent,
a read function can also cause write operations.
The calling process then must repeat the call after taking appropriate action
to satisfy the needs of the read function.
The action depends on the underlying BIO.
When using a non-blocking socket, nothing is to be done, but select() can be
used to check for the required condition.
When using a buffering BIO, like a BIO pair, data must be written into or
retrieved out of the BIO before being able to continue.

L<tls_pending(3)> can be used to find out whether there
are buffered bytes available for immediate retrieval.
In this case the read function can be called without blocking or actually
receiving new data from the underlying socket.

=head1 RETURN VALUES

tls_read_ex() and tls_peek_ex() will return 1 for success or 0 for failure.
Success means that 1 or more application data bytes have been read from the tls
connection.
Failure means that no bytes could be read from the tls connection.
Failures can be retryable (e.g. we are waiting for more bytes to
be delivered by the network) or non-retryable (e.g. a fatal network error).
In the event of a failure call L<tls_get_error(3)> to find out the reason which
indicates whether the call is retryable or not.

For tls_read() and tls_peek() the following return values can occur:

=over 4

=item E<gt> 0

The read operation was successful.
The return value is the number of bytes actually read from the TLS/tls
connection.

=item Z<><= 0

The read operation was not successful, because either the connection was closed,
an error occurred or action must be taken by the calling process.
Call L<tls_get_error(3)> with the return value B<ret> to find out the reason.

Old documentation indicated a difference between 0 and -1, and that -1 was
retryable.
You should instead call tls_get_error() to find out if it's retryable.

=back

=head1 SEE ALSO

L<tls_get_error(3)>, L<tls_write_ex(3)>,
L<tls_CTX_set_mode(3)>, L<tls_CTX_new(3)>,
L<tls_connect(3)>, L<tls_accept(3)>
L<tls_set_connect_state(3)>,
L<tls_pending(3)>,
L<tls_shutdown(3)>, L<tls_set_shutdown(3)>,
L<tls(7)>, L<bio(7)>

=head1 HISTORY

The tls_read_ex() and tls_peek_ex() functions were added in Opentls 1.1.1.

=head1 COPYRIGHT

Copyright 2000-2019 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
