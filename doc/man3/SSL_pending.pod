=pod

=head1 NAME

tls_pending, tls_has_pending - check for readable bytes buffered in an
tls object

=head1 SYNOPSIS

 #include <opentls/tls.h>

 int tls_pending(const tls *tls);
 int tls_has_pending(const tls *s);

=head1 DESCRIPTION

Data is received in whole blocks known as records from the peer. A whole record
is processed (e.g. decrypted) in one go and is buffered by Opentls until it is
read by the application via a call to L<tls_read_ex(3)> or L<tls_read(3)>.

tls_pending() returns the number of bytes which have been processed, buffered
and are available inside B<tls> for immediate read.

If the B<tls> object's I<read_ahead> flag is set (see
L<tls_CTX_set_read_ahead(3)>), additional protocol bytes (beyond the current
record) may have been read containing more TLS/tls records. This also applies to
DTLS and pipelining (see L<tls_CTX_set_split_send_fragment(3)>). These
additional bytes will be buffered by Opentls but will remain unprocessed until
they are needed. As these bytes are still in an unprocessed state tls_pending()
will ignore them. Therefore it is possible for no more bytes to be readable from
the underlying BIO (because Opentls has already read them) and for tls_pending()
to return 0, even though readable application data bytes are available (because
the data is in unprocessed buffered records).

tls_has_pending() returns 1 if B<s> has buffered data (whether processed or
unprocessed) and 0 otherwise. Note that it is possible for tls_has_pending() to
return 1, and then a subsequent call to tls_read_ex() or tls_read() to return no
data because the unprocessed buffered data when processed yielded no application
data (for example this can happen during renegotiation). It is also possible in
this scenario for tls_has_pending() to continue to return 1 even after an
tls_read_ex() or tls_read() call because the buffered and unprocessed data is
not yet processable (e.g. because Opentls has only received a partial record so
far).

=head1 RETURN VALUES

tls_pending() returns the number of buffered and processed application data
bytes that are pending and are available for immediate read. tls_has_pending()
returns 1 if there is buffered record data in the tls object and 0 otherwise.

=head1 SEE ALSO

L<tls_read_ex(3)>, L<tls_read(3)>, L<tls_CTX_set_read_ahead(3)>,
L<tls_CTX_set_split_send_fragment(3)>, L<tls(7)>

=head1 HISTORY

The tls_has_pending() function was added in Opentls 1.1.0.

=head1 COPYRIGHT

Copyright 2000-2016 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
