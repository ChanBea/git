=pod

=head1 NAME

STORE_LOADER, STORE_LOADER_CTX, STORE_LOADER_new,
STORE_LOADER_get0_engine, STORE_LOADER_get0_scheme,
STORE_LOADER_set_open, STORE_LOADER_set_ctrl, STORE_LOADER_set_load,
STORE_LOADER_set_eof, STORE_LOADER_set_close, STORE_LOADER_free,
STORE_register_loader, STORE_unregister_loader, STORE_open_fn,
STORE_ctrl_fn, STORE_load_fn, STORE_eof_fn, STORE_close_fn - Types and
functions to manipulate, register and unregister STORE loaders for
different URI schemes

=head1 SYNOPSIS

 #include <openssl/store.h>

 typedef struct store_loader_st STORE_LOADER;

 STORE_LOADER *STORE_LOADER_new(ENGINE *e, const char *scheme);
 const ENGINE *STORE_LOADER_get0_engine(const STORE_LOADER *store_loader);
 const char *STORE_LOADER_get0_scheme(const STORE_LOADER *store_loader);

 /* struct store_loader_ctx_st is defined differently by each loader */
 typedef struct store_loader_ctx_st STORE_LOADER_CTX;

 typedef STORE_LOADER_CTX *(*STORE_open_fn)(const char *uri,
                                            const UI_METHOD *ui_method,
                                            void *ui_data);
 int STORE_LOADER_set_open(STORE_LOADER *store_loader,
                           STORE_open_fn store_open_function);
 typedef int (*STORE_ctrl_fn)(STORE_LOADER_CTX *ctx, int cmd, va_list args);
 int STORE_LOADER_set_ctrl(STORE_LOADER *store_loader,
                           STORE_ctrl_fn store_ctrl_function);
 typedef STORE_INFO *(*STORE_load_fn)(STORE_LOADER_CTX *ctx,
                                      UI_METHOD *ui_method, void *ui_data);
 int STORE_LOADER_set_load(STORE_LOADER *store_loader,
                           STORE_load_fn store_load_function);
 typedef int (*STORE_eof_fn)(STORE_LOADER_CTX *ctx);
 int STORE_LOADER_set_eof(STORE_LOADER *store_loader,
                            STORE_eof_fn store_eof_function);
 typedef int (*STORE_close_fn)(STORE_LOADER_CTX *ctx);
 int STORE_LOADER_set_close(STORE_LOADER *store_loader,
                            STORE_close_fn store_close_function);
 void STORE_LOADER_free(STORE_LOADER *store_loader);
 
 int STORE_register_loader(STORE_LOADER *loader);
 STORE_LOADER *STORE_unregister_loader(const char *scheme);

=head1 DESCRIPTION

These functions help applications and engines to create loaders for
schemes they support.

=head2 Types

B<STORE_LOADER> is the type to hold a loader.  It contains a scheme
and the functions needed to implement STORE_open(), STORE_eof(),
STORE_load() and STORE_close() for this scheme.

B<STORE_LOADER_CTX> is a type template, to be defined by each loader
using B<struct store_loader_ctx_st { ... }>.

B<STORE_open_fn>, B<STORE_ctrl_fn>, B<STORE_load_fn>, B<STORE_eof_fn>
and B<STORE_close_fn> are the function pointer types used within a
STORE loader.  The functions pointed at define the functionality of
the given loader.

=over 4

=item B<STORE_open_fn>

This function takes a URI and is expected to interpret it in the best
manner possible according to the scheme the loader implements, it also
takes a B<UI_METHOD> and associated data, to be used any time
something needs to be prompted for.  Furthermore, this function is
expected to initialize what needs to be initialized, to create a
privata data store (B<STORE_LOADER_CTX>, see above), and to return
it.  If something goes wrong, this function is expected to return
NULL.

=item B<STORE_ctrl_fn>

This function takes a B<STORE_LOADER_CTX> pointer, a command number
B<cmd> and a B<va_list> B<args> and is used to manipulate loader
specific parameters.

=begin comment

Globally known command numbers are documented in L<STORE_ctrl(3)>,
along with what B<args> are expected with each of them.

=end comment

Loader specific command numbers must begin at B<STORE_C_CUSTOM_START>.
Any number below that is reserved for future globally known command
numbers.

This function is expected to return 1 on success, 0 on error.

=item B<STORE_load_fn>

This function takes a B<STORE_LOADER_CTX> pointer and a B<UI_METHOD>
with associated data.  It's expected to load the next available data,
mold it into a data structure that can be wrapped in a B<STORE_INFO>
using one of the L<STORE_INFO(3)> functions.  If no more data is
available, this function is expected to call STORE_INFO_new_ENDOFDATA()
and to return its result.  Should an error occur, this function is
expected to return NULL.

Note that this function retrives I<one> data item only.

=item B<STORE_eof_fn>

This function takes a B<STORE_LOADER_CTX> pointer and is expected to
return 0 if it expects that more data can be loaded from the store, or
when it doesn't know.  It's expected to return 1 when it knows for
sure that no more data is available (for example when the
B<STORE_load_fn> function starts returning the result of
STORE_INFO_new_ENDOFDATA()).

=item B<STORE_close_fn>

This function takes a B<STORE_LOADER_CTX> pointer and is expected to
close or shut down what needs to be closed, and finally free the
contents of the B<STORE_LOADER_CTX> pointer.  It returns 1 on success
and 0 on error.

=back

=head2 Functions

STORE_LOADER_new() creates a new B<STORE_LOADER>.  It takes an B<ENGINE>
B<e> and a string B<scheme>.  B<scheme> must I<always> be set.  Both B<e>
and B<scheme> are used as is and must therefore be alive as long as the
created loader is.

STORE_LOADER_get0_engine() returns the engine of the B<store_loader>.
STORE_LOADER_get0_scheme() returns the scheme of the B<store_loader>.

STORE_LOADER_set_open() sets the opener function for the
B<store_loader>.

STORE_LOADER_set_ctrl() sets the control function for the
B<store_loader>.

STORE_LOADER_set_load() sets the loader function for the
B<store_loader>.

STORE_LOADER_set_eof() sets the end of file checker function for the
B<store_loader>.

STORE_LOADER_set_close() sets the closing function for the
B<store_loader>.

STORE_LOADER_free() frees the given B<store_loader>.

STORE_register_loader() register the given B<store_loader> and thereby
makes it available for use with STORE_open(), STORE_load(),
STORE_eof() and STORE_close().

STORE_unregister_loader() unregister the store loader for the given
B<scheme>.

=head1 NOTES

The B<file:> scheme has built in support.

=head1 RETURN VALUES

The functions with the types B<STORE_open_fn>, B<STORE_ctrl_fn>,
B<STORE_load_fn>, B<STORE_eof_fn> and B<STORE_close_fn> have the same
return values as STORE_open(), STORE_load(), STORE_eof() and
STORE_close(), respectively.

STORE_LOADER_new() returns a pointer to a B<STORE_LOADER> on success,
or B<NULL> on failure.

STORE_LOADER_set_open(), STORE_LOADER_set_ctrl(),
STORE_LOADER_set_load(), STORE_LOADER_set_eof() and
STORE_LOADER_set_close() return 1 on success, or 0 on failure.

STORE_register_loader() returns 1 on success, or 0 on failure.

STORE_unregister_loader() returns the unregistered loader on success,
or B<NULL> on failure.

=head1 SEE ALSO

L<STORE_open(3)>

=head1 HISTORY

STORE_LOADER(), STORE_LOADER_CTX(), STORE_LOADER_new(),
STORE_LOADER_set0_scheme(), STORE_LOADER_set_open(),
STORE_LOADER_set_ctrl(), STORE_LOADER_set_load(), STORE_LOADER_set_eof(),
STORE_LOADER_set_close(), STORE_LOADER_free(), STORE_register_loader(),
STORE_unregister_loader(), STORE_open_fn(), STORE_ctrl_fn(), STORE_load_fn(),
STORE_eof_fn() and STORE_close_fn()
were added to OpenSSL 1.1.1.

=head1 COPYRIGHT

Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
