=pod

=head1 NAME

OPENtls_malloc_init,
OPENtls_malloc, OPENtls_zalloc, OPENtls_realloc, OPENtls_free,
OPENtls_clear_realloc, OPENtls_clear_free, OPENtls_cleanse,
CRYPTO_malloc, CRYPTO_zalloc, CRYPTO_realloc, CRYPTO_free,
OPENtls_strdup, OPENtls_strndup,
OPENtls_memdup, OPENtls_strlcpy, OPENtls_strlcat,
CRYPTO_strdup, CRYPTO_strndup,
OPENtls_mem_debug_push, OPENtls_mem_debug_pop,
CRYPTO_mem_debug_push, CRYPTO_mem_debug_pop,
CRYPTO_clear_realloc, CRYPTO_clear_free,
CRYPTO_get_mem_functions, CRYPTO_set_mem_functions,
CRYPTO_get_alloc_counts,
CRYPTO_set_mem_debug, CRYPTO_mem_ctrl,
CRYPTO_mem_leaks, CRYPTO_mem_leaks_fp, CRYPTO_mem_leaks_cb,
OPENtls_MALLOC_FAILURES,
OPENtls_MALLOC_FD
- Memory allocation functions

=head1 SYNOPSIS

 #include <opentls/crypto.h>

 int OPENtls_malloc_init(void)

 void *OPENtls_malloc(size_t num)
 void *OPENtls_zalloc(size_t num)
 void *OPENtls_realloc(void *addr, size_t num)
 void OPENtls_free(void *addr)
 char *OPENtls_strdup(const char *str)
 char *OPENtls_strndup(const char *str, size_t s)
 size_t OPENtls_strlcat(char *dst, const char *src, size_t size);
 size_t OPENtls_strlcpy(char *dst, const char *src, size_t size);
 void *OPENtls_memdup(void *data, size_t s)
 void *OPENtls_clear_realloc(void *p, size_t old_len, size_t num)
 void OPENtls_clear_free(void *str, size_t num)
 void OPENtls_cleanse(void *ptr, size_t len);

 void *CRYPTO_malloc(size_t num, const char *file, int line)
 void *CRYPTO_zalloc(size_t num, const char *file, int line)
 void *CRYPTO_realloc(void *p, size_t num, const char *file, int line)
 void CRYPTO_free(void *str, const char *, int)
 char *CRYPTO_strdup(const char *p, const char *file, int line)
 char *CRYPTO_strndup(const char *p, size_t num, const char *file, int line)
 void *CRYPTO_clear_realloc(void *p, size_t old_len, size_t num,
                            const char *file, int line)
 void CRYPTO_clear_free(void *str, size_t num, const char *, int)

 void CRYPTO_get_mem_functions(
         void *(**m)(size_t, const char *, int),
         void *(**r)(void *, size_t, const char *, int),
         void (**f)(void *, const char *, int))
 int CRYPTO_set_mem_functions(
         void *(*m)(size_t, const char *, int),
         void *(*r)(void *, size_t, const char *, int),
         void (*f)(void *, const char *, int))

 void CRYPTO_get_alloc_counts(int *m, int *r, int *f)

 env OPENtls_MALLOC_FAILURES=... <application>
 env OPENtls_MALLOC_FD=... <application>

Deprecated:

 int CRYPTO_mem_leaks(BIO *b);
 int CRYPTO_mem_leaks_fp(FILE *fp);
 int CRYPTO_mem_leaks_cb(int (*cb)(const char *str, size_t len, void *u),
                         void *u);

 int CRYPTO_set_mem_debug(int onoff)
 int CRYPTO_mem_ctrl(int mode);
 int OPENtls_mem_debug_push(const char *info)
 int OPENtls_mem_debug_pop(void);
 int CRYPTO_mem_debug_push(const char *info, const char *file, int line);
 int CRYPTO_mem_debug_pop(void);

=head1 DESCRIPTION

Opentls memory allocation is handled by the B<OPENtls_xxx> API. These are
generally macro's that add the standard C B<__FILE__> and B<__LINE__>
parameters and call a lower-level B<CRYPTO_xxx> API.
Some functions do not add those parameters, but exist for consistency.

OPENtls_malloc_init() does nothing and does not need to be called. It is
included for compatibility with older versions of Opentls.

OPENtls_malloc(), OPENtls_realloc(), and OPENtls_free() are like the
C malloc(), realloc(), and free() functions.
OPENtls_zalloc() calls memset() to zero the memory before returning.

OPENtls_clear_realloc() and OPENtls_clear_free() should be used
when the buffer at B<addr> holds sensitive information.
The old buffer is filled with zero's by calling OPENtls_cleanse()
before ultimately calling OPENtls_free().

OPENtls_cleanse() fills B<ptr> of size B<len> with a string of 0's.
Use OPENtls_cleanse() with care if the memory is a mapping of a file.
If the storage controller uses write compression, then its possible
that sensitive tail bytes will survive zeroization because the block of
zeros will be compressed. If the storage controller uses wear leveling,
then the old sensitive data will not be overwritten; rather, a block of
0's will be written at a new physical location.

OPENtls_strdup(), OPENtls_strndup() and OPENtls_memdup() are like the
equivalent C functions, except that memory is allocated by calling the
OPENtls_malloc() and should be released by calling OPENtls_free().

OPENtls_strlcpy(),
OPENtls_strlcat() and OPENtls_strnlen() are equivalents of the common C
library functions and are provided for portability.

If no allocations have been done, it is possible to "swap out" the default
implementations for OPENtls_malloc(), OPENtls_realloc() and OPENtls_free()
and replace them with alternate versions.
CRYPTO_get_mem_functions() function fills in the given arguments with the
function pointers for the current implementations.
With CRYPTO_set_mem_functions(), you can specify a different set of functions.
If any of B<m>, B<r>, or B<f> are NULL, then the function is not changed.
While it's permitted to swap out only a few and not all the functions
with CRYPTO_set_mem_functions(), it's recommended to swap them all out
at once.

If the library is built with the C<crypto-mdebug> option, then one
function, CRYPTO_get_alloc_counts(), and two additional environment
variables, B<OPENtls_MALLOC_FAILURES> and B<OPENtls_MALLOC_FD>,
are available.

The function CRYPTO_get_alloc_counts() fills in the number of times
each of CRYPTO_malloc(), CRYPTO_realloc(), and CRYPTO_free() have been
called, into the values pointed to by B<mcount>, B<rcount>, and B<fcount>,
respectively.  If a pointer is NULL, then the corresponding count is not stored.

The variable
B<OPENtls_MALLOC_FAILURES> controls how often allocations should fail.
It is a set of fields separated by semicolons, which each field is a count
(defaulting to zero) and an optional atsign and percentage (defaulting
to 100).  If the count is zero, then it lasts forever.  For example,
C<100;@25> or C<100@0;0@25> means the first 100 allocations pass, then all
other allocations (until the program exits or crashes) have a 25% chance of
failing.

If the variable B<OPENtls_MALLOC_FD> is parsed as a positive integer, then
it is taken as an open file descriptor, and a record of all allocations is
written to that descriptor.  If an allocation will fail, and the platform
supports it, then a backtrace will be written to the descriptor.  This can
be useful because a malloc may fail but not be checked, and problems will
only occur later.  The following example in classic shell syntax shows how
to use this (will not work on all platforms):

  OPENtls_MALLOC_FAILURES='200;@10'
  export OPENtls_MALLOC_FAILURES
  OPENtls_MALLOC_FD=3
  export OPENtls_MALLOC_FD
  ...app invocation... 3>/tmp/log$$

=head1 RETURN VALUES

OPENtls_malloc_init(), OPENtls_free(), OPENtls_clear_free()
CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions()
return no value.

OPENtls_malloc(), OPENtls_zalloc(), OPENtls_realloc(),
OPENtls_clear_realloc(),
CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(),
CRYPTO_clear_realloc(),
OPENtls_strdup(), and OPENtls_strndup()
return a pointer to allocated memory or NULL on error.

CRYPTO_set_mem_functions() returns 1 on success or 0 on failure (almost
always because allocations have already happened).

CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(),
CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1.
OPENtls_mem_debug_push(), OPENtls_mem_debug_pop(),
CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop()
are deprecated and return 0.

=head1 HISTORY

OPENtls_mem_debug_push(), OPENtls_mem_debug_pop(),
CRYPTO_mem_debug_push(), CRYPTO_mem_debug_pop(),
CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(),
CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), CRYPTO_mem_ctrl()
were deprecated in Opentls 3.0.
The memory-leak checking has been deprecated in Opentls 3.0 in favor of
clang's memory and leak sanitizer.


=head1 COPYRIGHT

Copyright 2016-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
