=pod

=head1 NAME

tls_key_update,
tls_get_key_update_type,
tls_renegotiate,
tls_renegotiate_abbreviated,
tls_renegotiate_pending
- initiate and obtain information about updating connection keys

=head1 SYNOPSIS

 #include <opentls/tls.h>

 int tls_key_update(tls *s, int updatetype);
 int tls_get_key_update_type(const tls *s);

 int tls_renegotiate(tls *s);
 int tls_renegotiate_abbreviated(tls *s);
 int tls_renegotiate_pending(const tls *s);

=head1 DESCRIPTION

tls_key_update() schedules an update of the keys for the current TLS connection.
If the B<updatetype> parameter is set to B<tls_KEY_UPDATE_NOT_REQUESTED> then
the sending keys for this connection will be updated and the peer will be
informed of the change. If the B<updatetype> parameter is set to
B<tls_KEY_UPDATE_REQUESTED> then the sending keys for this connection will be
updated and the peer will be informed of the change along with a request for the
peer to additionally update its sending keys. It is an error if B<updatetype> is
set to B<tls_KEY_UPDATE_NONE>.

tls_key_update() must only be called after the initial handshake has been
completed and TLSv1.3 has been negotiated. The key update will not take place
until the next time an IO operation such as tls_read_ex() or tls_write_ex()
takes place on the connection. Alternatively tls_do_handshake() can be called to
force the update to take place immediately.

tls_get_key_update_type() can be used to determine whether a key update
operation has been scheduled but not yet performed. The type of the pending key
update operation will be returned if there is one, or tls_KEY_UPDATE_NONE
otherwise.

tls_renegotiate() and tls_renegotiate_abbreviated() should only be called for
connections that have negotiated TLSv1.2 or less. Calling them on any other
connection will result in an error.

When called from the client side, tls_renegotiate() schedules a completely new
handshake over an existing tls/TLS connection. The next time an IO operation
such as tls_read_ex() or tls_write_ex() takes place on the connection a check
will be performed to confirm that it is a suitable time to start a
renegotiation. If so, then it will be initiated immediately. Opentls will not
attempt to resume any session associated with the connection in the new
handshake.

When called from the client side, tls_renegotiate_abbreviated() works in the
same was as tls_renegotiate() except that Opentls will attempt to resume the
session associated with the current connection in the new handshake.

When called from the server side, tls_renegotiate() and
tls_renegotiate_abbreviated() behave identically. They both schedule a request
for a new handshake to be sent to the client. The next time an IO operation is
performed then the same checks as on the client side are performed and then, if
appropriate, the request is sent. The client may or may not respond with a new
handshake and it may or may not attempt to resume an existing session. If
a new handshake is started then this will be handled transparently by calling
any Opentls IO function.

If an Opentls client receives a renegotiation request from a server then again
this will be handled transparently through calling any Opentls IO function. For
a TLS connection the client will attempt to resume the current session in the
new handshake. For historical reasons, DTLS clients will not attempt to resume
the session in the new handshake.

The tls_renegotiate_pending() function returns 1 if a renegotiation or
renegotiation request has been scheduled but not yet acted on, or 0 otherwise.

=head1 RETURN VALUES

tls_key_update(), tls_renegotiate() and tls_renegotiate_abbreviated() return 1
on success or 0 on error.

tls_get_key_update_type() returns the update type of the pending key update
operation or tls_KEY_UPDATE_NONE if there is none.

tls_renegotiate_pending() returns 1 if a renegotiation or renegotiation request
has been scheduled but not yet acted on, or 0 otherwise.

=head1 SEE ALSO

L<tls(7)>, L<tls_read_ex(3)>,
L<tls_write_ex(3)>,
L<tls_do_handshake(3)>

=head1 HISTORY

The tls_key_update() and tls_get_key_update_type() functions were added in
Opentls 1.1.1.

=head1 COPYRIGHT

Copyright 2017 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
