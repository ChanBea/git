=pod

=head1 NAME

tls_want, tls_want_nothing, tls_want_read, tls_want_write, tls_want_x509_lookup,
tls_want_async, tls_want_async_job, tls_want_client_hello_cb - obtain state
information TLS/tls I/O operation

=head1 SYNOPSIS

 #include <opentls/tls.h>

 int tls_want(const tls *tls);
 int tls_want_nothing(const tls *tls);
 int tls_want_read(const tls *tls);
 int tls_want_write(const tls *tls);
 int tls_want_x509_lookup(const tls *tls);
 int tls_want_async(const tls *tls);
 int tls_want_async_job(const tls *tls);
 int tls_want_client_hello_cb(const tls *tls);

=head1 DESCRIPTION

tls_want() returns state information for the tls object B<tls>.

The other tls_want_*() calls are shortcuts for the possible states returned
by tls_want().

=head1 NOTES

tls_want() examines the internal state information of the tls object. Its
return values are similar to that of L<tls_get_error(3)>.
Unlike L<tls_get_error(3)>, which also evaluates the
error queue, the results are obtained by examining an internal state flag
only. The information must therefore only be used for normal operation under
non-blocking I/O. Error conditions are not handled and must be treated
using L<tls_get_error(3)>.

The result returned by tls_want() should always be consistent with
the result of L<tls_get_error(3)>.

=head1 RETURN VALUES

The following return values can currently occur for tls_want():

=over 4

=item tls_NOTHING

There is no data to be written or to be read.

=item tls_WRITING

There are data in the tls buffer that must be written to the underlying
B<BIO> layer in order to complete the actual tls_*() operation.
A call to L<tls_get_error(3)> should return
tls_ERROR_WANT_WRITE.

=item tls_READING

More data must be read from the underlying B<BIO> layer in order to
complete the actual tls_*() operation.
A call to L<tls_get_error(3)> should return
tls_ERROR_WANT_READ.

=item tls_X509_LOOKUP

The operation did not complete because an application callback set by
tls_CTX_set_client_cert_cb() has asked to be called again.
A call to L<tls_get_error(3)> should return
tls_ERROR_WANT_X509_LOOKUP.

=item tls_ASYNC_PAUSED

An asynchronous operation partially completed and was then paused. See
L<tls_get_all_async_fds(3)>. A call to L<tls_get_error(3)> should return
tls_ERROR_WANT_ASYNC.

=item tls_ASYNC_NO_JOBS

The asynchronous job could not be started because there were no async jobs
available in the pool (see ASYNC_init_thread(3)). A call to L<tls_get_error(3)>
should return tls_ERROR_WANT_ASYNC_JOB.

=item tls_CLIENT_HELLO_CB

The operation did not complete because an application callback set by
tls_CTX_set_client_hello_cb() has asked to be called again.
A call to L<tls_get_error(3)> should return
tls_ERROR_WANT_CLIENT_HELLO_CB.

=back

tls_want_nothing(), tls_want_read(), tls_want_write(), tls_want_x509_lookup(),
tls_want_async(), tls_want_async_job(), and tls_want_client_hello_cb() return
1, when the corresponding condition is true or 0 otherwise.

=head1 SEE ALSO

L<tls(7)>, L<tls_get_error(3)>

=head1 HISTORY

The tls_want_client_hello_cb() function and the tls_CLIENT_HELLO_CB return value
were added in Opentls 1.1.1.

=head1 COPYRIGHT

Copyright 2001-2017 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
