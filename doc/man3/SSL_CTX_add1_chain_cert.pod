=pod

=head1 NAME

tls_CTX_set0_chain, tls_CTX_set1_chain, tls_CTX_add0_chain_cert,
tls_CTX_add1_chain_cert, tls_CTX_get0_chain_certs, tls_CTX_clear_chain_certs,
tls_set0_chain, tls_set1_chain, tls_add0_chain_cert, tls_add1_chain_cert,
tls_get0_chain_certs, tls_clear_chain_certs, tls_CTX_build_cert_chain,
tls_build_cert_chain, tls_CTX_select_current_cert,
tls_select_current_cert, tls_CTX_set_current_cert, tls_set_current_cert - extra
chain certificate processing

=head1 SYNOPSIS

 #include <opentls/tls.h>

 int tls_CTX_set0_chain(tls_CTX *ctx, STACK_OF(X509) *sk);
 int tls_CTX_set1_chain(tls_CTX *ctx, STACK_OF(X509) *sk);
 int tls_CTX_add0_chain_cert(tls_CTX *ctx, X509 *x509);
 int tls_CTX_add1_chain_cert(tls_CTX *ctx, X509 *x509);
 int tls_CTX_get0_chain_certs(tls_CTX *ctx, STACK_OF(X509) **sk);
 int tls_CTX_clear_chain_certs(tls_CTX *ctx);

 int tls_set0_chain(tls *tls, STACK_OF(X509) *sk);
 int tls_set1_chain(tls *tls, STACK_OF(X509) *sk);
 int tls_add0_chain_cert(tls *tls, X509 *x509);
 int tls_add1_chain_cert(tls *tls, X509 *x509);
 int tls_get0_chain_certs(tls *tls, STACK_OF(X509) **sk);
 int tls_clear_chain_certs(tls *tls);

 int tls_CTX_build_cert_chain(tls_CTX *ctx, flags);
 int tls_build_cert_chain(tls *tls, flags);

 int tls_CTX_select_current_cert(tls_CTX *ctx, X509 *x509);
 int tls_select_current_cert(tls *tls, X509 *x509);
 int tls_CTX_set_current_cert(tls_CTX *ctx, long op);
 int tls_set_current_cert(tls *tls, long op);

=head1 DESCRIPTION

tls_CTX_set0_chain() and tls_CTX_set1_chain() set the certificate chain
associated with the current certificate of B<ctx> to B<sk>.

tls_CTX_add0_chain_cert() and tls_CTX_add1_chain_cert() append the single
certificate B<x509> to the chain associated with the current certificate of
B<ctx>.

tls_CTX_get0_chain_certs() retrieves the chain associated with the current
certificate of B<ctx>.

tls_CTX_clear_chain_certs() clears any existing chain associated with the
current certificate of B<ctx>.  (This is implemented by calling
tls_CTX_set0_chain() with B<sk> set to B<NULL>).

tls_CTX_build_cert_chain() builds the certificate chain for B<ctx> normally
this uses the chain store or the verify store if the chain store is not set.
If the function is successful the built chain will replace any existing chain.
The B<flags> parameter can be set to B<tls_BUILD_CHAIN_FLAG_UNTRUSTED> to use
existing chain certificates as untrusted CAs, B<tls_BUILD_CHAIN_FLAG_NO_ROOT>
to omit the root CA from the built chain, B<tls_BUILD_CHAIN_FLAG_CHECK> to
use all existing chain certificates only to build the chain (effectively
sanity checking and rearranging them if necessary), the flag
B<tls_BUILD_CHAIN_FLAG_IGNORE_ERROR> ignores any errors during verification:
if flag B<tls_BUILD_CHAIN_FLAG_CLEAR_ERROR> is also set verification errors
are cleared from the error queue.

Each of these functions operates on the I<current> end entity
(i.e. server or client) certificate. This is the last certificate loaded or
selected on the corresponding B<ctx> structure.

tls_CTX_select_current_cert() selects B<x509> as the current end entity
certificate, but only if B<x509> has already been loaded into B<ctx> using a
function such as tls_CTX_use_certificate().

tls_set0_chain(), tls_set1_chain(), tls_add0_chain_cert(),
tls_add1_chain_cert(), tls_get0_chain_certs(), tls_clear_chain_certs(),
tls_build_cert_chain(), tls_select_current_cert() and tls_set_current_cert()
are similar except they apply to tls structure B<tls>.

tls_CTX_set_current_cert() changes the current certificate to a value based
on the B<op> argument. Currently B<op> can be B<tls_CERT_SET_FIRST> to use
the first valid certificate or B<tls_CERT_SET_NEXT> to set the next valid
certificate after the current certificate. These two operations can be
used to iterate over all certificates in an B<tls_CTX> structure.

tls_set_current_cert() also supports the option B<tls_CERT_SET_SERVER>.
If B<tls> is a server and has sent a certificate to a connected client
this option sets that certificate to the current certificate and returns 1.
If the negotiated cipher suite is anonymous (and thus no certificate will
be sent) 2 is returned and the current certificate is unchanged. If B<tls>
is not a server or a certificate has not been sent 0 is returned and
the current certificate is unchanged.

All these functions are implemented as macros. Those containing a B<1>
increment the reference count of the supplied certificate or chain so it must
be freed at some point after the operation. Those containing a B<0> do
not increment reference counts and the supplied certificate or chain
B<MUST NOT> be freed after the operation.

=head1 NOTES

The chains associate with an tls_CTX structure are copied to any tls
structures when tls_new() is called. tls structures will not be affected
by any chains subsequently changed in the parent tls_CTX.

One chain can be set for each key type supported by a server. So, for example,
an RSA and a DSA certificate can (and often will) have different chains.

The functions tls_CTX_build_cert_chain() and tls_build_cert_chain() can
be used to check application configuration and to ensure any necessary
subordinate CAs are sent in the correct order. Misconfigured applications
sending incorrect certificate chains often cause problems with peers.

For example an application can add any set of certificates using
tls_CTX_use_certificate_chain_file() then call tls_CTX_build_cert_chain()
with the option B<tls_BUILD_CHAIN_FLAG_CHECK> to check and reorder them.

Applications can issue non fatal warnings when checking chains by setting
the flag B<tls_BUILD_CHAIN_FLAG_IGNORE_ERRORS> and checking the return
value.

Calling tls_CTX_build_cert_chain() or tls_build_cert_chain() is more
efficient than the automatic chain building as it is only performed once.
Automatic chain building is performed on each new session.

If any certificates are added using these functions no certificates added
using tls_CTX_add_extra_chain_cert() will be used.

=head1 RETURN VALUES

tls_set_current_cert() with B<tls_CERT_SET_SERVER> return 1 for success, 2 if
no server certificate is used because the cipher suites is anonymous and 0
for failure.

tls_CTX_build_cert_chain() and tls_build_cert_chain() return 1 for success
and 0 for failure. If the flag B<tls_BUILD_CHAIN_FLAG_IGNORE_ERROR> and
a verification error occurs then 2 is returned.

All other functions return 1 for success and 0 for failure.

=head1 SEE ALSO

L<tls(7)>,
L<tls_CTX_add_extra_chain_cert(3)>

=head1 HISTORY

These functions were added in Opentls 1.0.2.

=head1 COPYRIGHT

Copyright 2013-2016 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
