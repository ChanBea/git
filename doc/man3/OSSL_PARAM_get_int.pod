=pod

=head1 NAME

OSSL_PARAM_locate,
OSSL_PARAM_int, OSSL_PARAM_get_int OSSL_PARAM_set_int,
OSSL_PARAM_reserve_int, OSSL_PARAM_return_int,
OSSL_PARAM_uint, OSSL_PARAM_get_uint OSSL_PARAM_set_uint,
OSSL_PARAM_reserve_uint, OSSL_PARAM_return_uint,
OSSL_PARAM_int64, OSSL_PARAM_get_int64 OSSL_PARAM_set_int64,
OSSL_PARAM_reserve_int64, OSSL_PARAM_return_int64,
OSSL_PARAM_uint64, OSSL_PARAM_get_uint64 OSSL_PARAM_set_uint64,
OSSL_PARAM_reserve_uint64, OSSL_PARAM_return_uint64,
OSSL_PARAM_long, OSSL_PARAM_get_long OSSL_PARAM_set_long,
OSSL_PARAM_reserve_long, OSSL_PARAM_return_long,
OSSL_PARAM_size_t, OSSL_PARAM_get_size_t OSSL_PARAM_set_size_t,
OSSL_PARAM_reserve_size_t, OSSL_PARAM_return_size_t,
OSSL_PARAM_double, OSSL_PARAM_get_double OSSL_PARAM_set_double,
OSSL_PARAM_reserve_double, OSSL_PARAM_return_double,
OSSL_PARAM_pointer, OSSL_PARAM_get_pointer OSSL_PARAM_set_pointer,
OSSL_PARAM_reserve_pointer, OSSL_PARAM_return_pointer,
OSSL_PARAM_bignum, OSSL_PARAM_get_bignum OSSL_PARAM_set_bignum,
OSSL_PARAM_reserve_bignum, OSSL_PARAM_return_bignum,
OSSL_PARAM_retrieve_bignum,
OSSL_PARAM_buffer, OSSL_PARAM_get_buffer OSSL_PARAM_set_buffer,
OSSL_PARAM_reserve_buffer, OSSL_PARAM_return_buffer
- OSSL_PARAM helpers

=head1 SYNOPSIS

=for comment generic

 #include <openssl/params.h>

 OSSL_PARAM *OSSL_PARAM_locate(OSSL_PARAM *p, const char *key);

 #define OSSL_PARAM_TYPE(name)

 int OSSL_PARAM_set_TYPE(OSSL_PARAM *p, const char *key, TYPE *val);
 int OSSL_PARAM_reserve_TYPE(OSSL_PARAM *p, const char *key TYPE *val);
 int OSSL_PARAM_reserve_bignum(OSSL_PARAM *p, const char *key,
                               void *buffer, size_t size);
 int OSSL_PARAM_reserve_buffer(OSSL_PARAM *p, const char *key,
                               void *buffer, size_t size);

 int OSSL_PARAM_get_TYPE(OSSL_PARAM *p, const char *key, TYPE *val);
 int OSSL_PARAM_get_buffer(OSSL_PARAM *p, const char *key,
                           void **val, size_t *size);

 int OSSL_PARAM_return_TYPE(OSSL_PARAM *p, const char *key, TYPE val);
 int OSSL_PARAM_return_buffer(OSSL_PARAM *p, const char *key,
                              void *buff, size_t size);

 int OSSL_PARAM_retrieve_bignum(OSSL_PARAM *p, const char *key,
                                BIGNUM **bn);


=head1 DESCRIPTION

This pages describes a set of utility functions and macros that simplify and
add type safety to L<OSSL_PARAM(3)> arrays.
In the following text, B<TYPE> stands for one of the following types:

 int
 unsigned int ("uint")
 int64_t
 uint64_t
 long
 unsigned long ("ulong")
 size_t
 double
 void * ("pointer")
 array of bytes ("buffer")
 BIGNUM

A pointer is a generic pointer. All of the types above are fixed-size,
except for C<buffer> and C<BIGNUM>.

OSSL_PARAM_locate() finds the parameter in the B<p> list with the name
B<key>.  Most of the functions described below take a pointer to a parameter
list, B<p>, and a key naming a specific parameter, B<key>.  If B<key>
is NULL, then B<p> is used directly, otherwise OSSL_PARAM_locate() is
called to find a matching entry for B<key>.  This technique can be used
for optional parameters, or for passing values when the array has been
initialized with fixed positions:

 OSSL_PARAM plist[] = {
     OSSL_PARAM_int("optional"),
     OSSL_PARAM_pointer("ptr"),
     OSSL_PARAM_bignum("prime"),
     OSSL_PARAM_int("status"),
     { NULL }
 };

 if ((p = OSSL_PARAM_locate(plist, "optional")) != NULL)
     OSSL_PARAM_get_int(p, NULL, &anint);

 OSSL_PARAM_get_int(&plist[0], NULL, &anint);
 OSSL_PARAM_get_pointer(&plist[1], NULL, &ptr);
 ...

The macro OSSL_PARAM_TYPE() (for example, OSSL_PARAM_int()) returns an
initialized value of an B<OSSL_PARAM> array initialized for the specified
B<TYPE>.

In the following paragraphs, consider one function calling another, and
that B<OSSL_PARAM> is used to pass parameters between them:

 /* For simplicity, showing only one argument */
 called_function(OSSL_PARAM *p)
 {
 }

 calling_function()
 {
     called_function(plist);
 }

I<Input> parameters are entries in the B<OSSL_PARAM> list that are set
in the calling function and used in the called function. Variable-sized
items can be passed using just a pointer to the data.
I<Output> parameters are entries in the B<OSSL_PARAM> list that have
space "reserved" in the calling function, and the value is set in the
called function.
(For maximum portability across all platforms, output parameters must have
have any storage space allocated in the calling routine.)
Using a parameter as both input and output is undefined.

To set an input parameter, use OSSL_PARAM_set_TYPE() and give address of a
variable of the same type. The variable must remain in scope for lifetime
of the parameter list.  For example:

 OSSL_PARAM_set_int(plist, "optional", &anint);
 OSSL_PARAM_set_pointer(&plist[1], NULL, &bufptr);

To reserve space for an output parameter use OSSL_PARAM_reserve_TYPE().
Fixed-size values should be given the address of a local variable;
buffers and B<BIGNUM>'s are given a buffer and size for the called
function to store the result.

 OSSL_PARAM_reserve_int(plist, "status", &status);
 OSSL_PARAM_reserve_bignum(plist, "prime", buff, sizeof(buff))

Within the called function, parameters are retrieved using
OSSL_PARAM_get_TYPE() to get a value of type B<TYPE> from the parameter
pointer using B<p> and B<key> as described above.

To set the value of an output parameter, the called function uses the
OSSL_PARAM_return_TYPE() function.

 OSSL_PARAM_return_int(plist, "status", status);
 OSSL_PARAM_return_bignum(plist, "prime", bn);

No coercion is done, and it is an error if the types do not match.
Variable-sized values will use the reserved buffer. If the value does
not fit, it will indicate the size needed and return an error.

In the calling function, fixed-size values can be obtained by using the
variable specified in the "reserve" call.
Buffers and B<BIGNUM>'s can be obtained by using the relevant "retrieve"
function.

=head1 RETURN VALUES

OSSL_PARAM_locate() returns a pointer to the requested parameter or B<NULL>
if it is not found.
All other functions return B<1> on success and B<0> on failure.

=head1 BUGS

Negative BIGNUM values cannot be returned.

=head1 HISTORY

These APIs were introduced in OpenSSL 3.0.0.

=head1 COPYRIGHT

Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
