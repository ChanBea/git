=pod

=head1 NAME

BIO_do_handshake,
BIO_f_tls, BIO_set_tls, BIO_get_tls, BIO_set_tls_mode,
BIO_set_tls_renegotiate_bytes,
BIO_get_num_renegotiates, BIO_set_tls_renegotiate_timeout, BIO_new_tls,
BIO_new_tls_connect, BIO_new_buffer_tls_connect, BIO_tls_copy_session_id,
BIO_tls_shutdown - tls BIO

=head1 SYNOPSIS

=for opentls multiple includes

 #include <opentls/bio.h>
 #include <opentls/tls.h>

 const BIO_METHOD *BIO_f_tls(void);

 long BIO_set_tls(BIO *b, tls *tls, long c);
 long BIO_get_tls(BIO *b, tls **tlsp);
 long BIO_set_tls_mode(BIO *b, long client);
 long BIO_set_tls_renegotiate_bytes(BIO *b, long num);
 long BIO_set_tls_renegotiate_timeout(BIO *b, long seconds);
 long BIO_get_num_renegotiates(BIO *b);

 BIO *BIO_new_tls(tls_CTX *ctx, int client);
 BIO *BIO_new_tls_connect(tls_CTX *ctx);
 BIO *BIO_new_buffer_tls_connect(tls_CTX *ctx);
 int BIO_tls_copy_session_id(BIO *to, BIO *from);
 void BIO_tls_shutdown(BIO *bio);

 long BIO_do_handshake(BIO *b);

=head1 DESCRIPTION

BIO_f_tls() returns the tls BIO method. This is a filter BIO which
is a wrapper round the Opentls tls routines adding a BIO "flavour" to
tls I/O.

I/O performed on an tls BIO communicates using the tls protocol with
the tlss read and write BIOs. If an tls connection is not established
then an attempt is made to establish one on the first I/O call.

If a BIO is appended to an tls BIO using BIO_push() it is automatically
used as the tls BIOs read and write BIOs.

Calling BIO_reset() on an tls BIO closes down any current tls connection
by calling tls_shutdown(). BIO_reset() is then sent to the next BIO in
the chain: this will typically disconnect the underlying transport.
The tls BIO is then reset to the initial accept or connect state.

If the close flag is set when an tls BIO is freed then the internal
tls structure is also freed using tls_free().

BIO_set_tls() sets the internal tls pointer of BIO B<b> to B<tls> using
the close flag B<c>.

BIO_get_tls() retrieves the tls pointer of BIO B<b>, it can then be
manipulated using the standard tls library functions.

BIO_set_tls_mode() sets the tls BIO mode to B<client>. If B<client>
is 1 client mode is set. If B<client> is 0 server mode is set.

BIO_set_tls_renegotiate_bytes() sets the renegotiate byte count
to B<num>. When set after every B<num> bytes of I/O (read and write)
the tls session is automatically renegotiated. B<num> must be at
least 512 bytes.

BIO_set_tls_renegotiate_timeout() sets the renegotiate timeout to
B<seconds>. When the renegotiate timeout elapses the session is
automatically renegotiated.

BIO_get_num_renegotiates() returns the total number of session
renegotiations due to I/O or timeout.

BIO_new_tls() allocates an tls BIO using tls_CTX B<ctx> and using
client mode if B<client> is non zero.

BIO_new_tls_connect() creates a new BIO chain consisting of an
tls BIO (using B<ctx>) followed by a connect BIO.

BIO_new_buffer_tls_connect() creates a new BIO chain consisting
of a buffering BIO, an tls BIO (using B<ctx>) and a connect
BIO.

BIO_tls_copy_session_id() copies an tls session id between
BIO chains B<from> and B<to>. It does this by locating the
tls BIOs in each chain and calling tls_copy_session_id() on
the internal tls pointer.

BIO_tls_shutdown() closes down an tls connection on BIO
chain B<bio>. It does this by locating the tls BIO in the
chain and calling tls_shutdown() on its internal tls
pointer.

BIO_do_handshake() attempts to complete an tls handshake on the
supplied BIO and establish the tls connection. It returns 1
if the connection was established successfully. A zero or negative
value is returned if the connection could not be established, the
call BIO_should_retry() should be used for non blocking connect BIOs
to determine if the call should be retried. If an tls connection has
already been established this call has no effect.

=head1 NOTES

tls BIOs are exceptional in that if the underlying transport
is non blocking they can still request a retry in exceptional
circumstances. Specifically this will happen if a session
renegotiation takes place during a BIO_read_ex() operation, one
case where this happens is when step up occurs.

The tls flag tls_AUTO_RETRY can be
set to disable this behaviour. That is when this flag is set
an tls BIO using a blocking transport will never request a
retry.

Since unknown BIO_ctrl() operations are sent through filter
BIOs the servers name and port can be set using BIO_set_host()
on the BIO returned by BIO_new_tls_connect() without having
to locate the connect BIO first.

Applications do not have to call BIO_do_handshake() but may wish
to do so to separate the handshake process from other I/O
processing.

BIO_set_tls(), BIO_get_tls(), BIO_set_tls_mode(),
BIO_set_tls_renegotiate_bytes(), BIO_set_tls_renegotiate_timeout(),
BIO_get_num_renegotiates(), and BIO_do_handshake() are implemented as macros.

=head1 RETURN VALUES

BIO_f_tls() returns the tls B<BIO_METHOD> structure.

BIO_set_tls(), BIO_get_tls(), BIO_set_tls_mode(), BIO_set_tls_renegotiate_bytes(),
BIO_set_tls_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on
success or a value which is less than or equal to 0 if an error occurred.

BIO_new_tls(), BIO_new_tls_connect() and BIO_new_buffer_tls_connect() return
a valid B<BIO> structure on success or B<NULL> if an error occurred.

BIO_tls_copy_session_id() returns 1 on success or 0 on error.

BIO_do_handshake() returns 1 if the connection was established successfully.
A zero or negative value is returned if the connection could not be established.

=head1 EXAMPLES

This tls/TLS client example attempts to retrieve a page from an
tls/TLS web server. The I/O routines are identical to those of the
unencrypted example in L<BIO_s_connect(3)>.

 BIO *sbio, *out;
 int len;
 char tmpbuf[1024];
 tls_CTX *ctx;
 tls *tls;

 /* XXX Seed the PRNG if needed. */

 ctx = tls_CTX_new(TLS_client_method());

 /* XXX Set verify paths and mode here. */

 sbio = BIO_new_tls_connect(ctx);
 BIO_get_tls(sbio, &tls);
 if (tls == NULL) {
     fprintf(stderr, "Can't locate tls pointer\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }

 /* Don't want any retries */
 tls_set_mode(tls, tls_MODE_AUTO_RETRY);

 /* XXX We might want to do other things with tls here */

 /* An empty host part means the loopback address */
 BIO_set_conn_hostname(sbio, ":https");

 out = BIO_new_fp(stdout, BIO_NOCLOSE);
 if (BIO_do_connect(sbio) <= 0) {
     fprintf(stderr, "Error connecting to server\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }
 if (BIO_do_handshake(sbio) <= 0) {
     fprintf(stderr, "Error establishing tls connection\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }

 /* XXX Could examine tls here to get connection info */

 BIO_puts(sbio, "GET / HTTP/1.0\n\n");
 for (;;) {
     len = BIO_read(sbio, tmpbuf, 1024);
     if (len <= 0)
         break;
     BIO_write(out, tmpbuf, len);
 }
 BIO_free_all(sbio);
 BIO_free(out);

Here is a simple server example. It makes use of a buffering
BIO to allow lines to be read from the tls BIO using BIO_gets.
It creates a pseudo web page containing the actual request from
a client and also echoes the request to standard output.

 BIO *sbio, *bbio, *acpt, *out;
 int len;
 char tmpbuf[1024];
 tls_CTX *ctx;
 tls *tls;

 /* XXX Seed the PRNG if needed. */

 ctx = tls_CTX_new(TLS_server_method());
 if (!tls_CTX_use_certificate_file(ctx, "server.pem", tls_FILETYPE_PEM)
         || !tls_CTX_use_PrivateKey_file(ctx, "server.pem", tls_FILETYPE_PEM)
         || !tls_CTX_check_private_key(ctx)) {
     fprintf(stderr, "Error setting up tls_CTX\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }

 /* XXX Other things like set verify locations, EDH temp callbacks. */

 /* New tls BIO setup as server */
 sbio = BIO_new_tls(ctx, 0);
 BIO_get_tls(sbio, &tls);
 if (tls == NULL) {
     fprintf(stderr, "Can't locate tls pointer\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }

 tls_set_mode(tls, tls_MODE_AUTO_RETRY);
 bbio = BIO_new(BIO_f_buffer());
 sbio = BIO_push(bbio, sbio);
 acpt = BIO_new_accept("4433");

 /*
  * By doing this when a new connection is established
  * we automatically have sbio inserted into it. The
  * BIO chain is now 'swallowed' by the accept BIO and
  * will be freed when the accept BIO is freed.
  */
 BIO_set_accept_bios(acpt, sbio);
 out = BIO_new_fp(stdout, BIO_NOCLOSE);

 /* Setup accept BIO */
 if (BIO_do_accept(acpt) <= 0) {
     fprintf(stderr, "Error setting up accept BIO\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }

 /* We only want one connection so remove and free accept BIO */
 sbio = BIO_pop(acpt);
 BIO_free_all(acpt);

 if (BIO_do_handshake(sbio) <= 0) {
     fprintf(stderr, "Error in tls handshake\n");
     ERR_print_errors_fp(stderr);
     exit(1);
 }

 BIO_puts(sbio, "HTTP/1.0 200 OK\r\nContent-type: text/plain\r\n\r\n");
 BIO_puts(sbio, "\r\nConnection Established\r\nRequest headers:\r\n");
 BIO_puts(sbio, "--------------------------------------------------\r\n");

 for (;;) {
     len = BIO_gets(sbio, tmpbuf, 1024);
     if (len <= 0)
         break;
     BIO_write(sbio, tmpbuf, len);
     BIO_write(out, tmpbuf, len);
     /* Look for blank line signifying end of headers*/
     if (tmpbuf[0] == '\r' || tmpbuf[0] == '\n')
         break;
 }

 BIO_puts(sbio, "--------------------------------------------------\r\n");
 BIO_puts(sbio, "\r\n");
 BIO_flush(sbio);
 BIO_free_all(sbio);

=head1 HISTORY

In Opentls before 1.0.0 the BIO_pop() call was handled incorrectly,
the I/O BIO reference count was incorrectly incremented (instead of
decremented) and dissociated with the tls BIO even if the tls BIO was not
explicitly being popped (e.g. a pop higher up the chain). Applications which
included workarounds for this bug (e.g. freeing BIOs more than once) should
be modified to handle this fix or they may free up an already freed BIO.

=head1 COPYRIGHT

Copyright 2000-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
