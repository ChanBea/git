=pod

=head1 NAME

tls_CTX_sess_set_new_cb, tls_CTX_sess_set_remove_cb, tls_CTX_sess_set_get_cb, tls_CTX_sess_get_new_cb, tls_CTX_sess_get_remove_cb, tls_CTX_sess_get_get_cb - provide callback functions for server side external session caching

=head1 SYNOPSIS

 #include <opentls/tls.h>

 void tls_CTX_sess_set_new_cb(tls_CTX *ctx,
                              int (*new_session_cb)(tls *, tls_SESSION *));
 void tls_CTX_sess_set_remove_cb(tls_CTX *ctx,
                                 void (*remove_session_cb)(tls_CTX *ctx,
                                                           tls_SESSION *));
 void tls_CTX_sess_set_get_cb(tls_CTX *ctx,
                              tls_SESSION (*get_session_cb)(tls *,
                                                            const unsigned char *,
                                                            int, int *));

 int (*tls_CTX_sess_get_new_cb(tls_CTX *ctx))(struct tls_st *tls,
                                              tls_SESSION *sess);
 void (*tls_CTX_sess_get_remove_cb(tls_CTX *ctx))(struct tls_ctx_st *ctx,
                                                  tls_SESSION *sess);
 tls_SESSION *(*tls_CTX_sess_get_get_cb(tls_CTX *ctx))(struct tls_st *tls,
                                                       const unsigned char *data,
                                                       int len, int *copy);

=head1 DESCRIPTION

tls_CTX_sess_set_new_cb() sets the callback function, which is automatically
called whenever a new session was negotiated.

tls_CTX_sess_set_remove_cb() sets the callback function, which is
automatically called whenever a session is removed by the tls engine,
because it is considered faulty or the session has become obsolete because
of exceeding the timeout value.

tls_CTX_sess_set_get_cb() sets the callback function which is called,
whenever a tls/TLS client proposed to resume a session but the session
could not be found in the internal session cache (see
L<tls_CTX_set_session_cache_mode(3)>).
(tls/TLS server only.)

tls_CTX_sess_get_new_cb(), tls_CTX_sess_get_remove_cb(), and
tls_CTX_sess_get_get_cb() retrieve the function pointers set by the
corresponding set callback functions. If a callback function has not been
set, the NULL pointer is returned.

=head1 NOTES

In order to allow external session caching, synchronization with the internal
session cache is realized via callback functions. Inside these callback
functions, session can be saved to disk or put into a database using the
L<d2i_tls_SESSION(3)> interface.

The new_session_cb() is called, whenever a new session has been negotiated
and session caching is enabled (see
L<tls_CTX_set_session_cache_mode(3)>).
The new_session_cb() is passed the B<tls> connection and the tls session
B<sess>. If the callback returns B<0>, the session will be immediately
removed again. Note that in TLSv1.3, sessions are established after the main
handshake has completed. The server decides when to send the client the session
information and this may occur some time after the end of the handshake (or not
at all). This means that applications should expect the new_session_cb()
function to be invoked during the handshake (for <= TLSv1.2) or after the
handshake (for TLSv1.3). It is also possible in TLSv1.3 for multiple sessions to
be established with a single connection. In these case the new_session_cb()
function will be invoked multiple times.

In TLSv1.3 it is recommended that each tls_SESSION object is only used for
resumption once. One way of enforcing that is for applications to call
L<tls_CTX_remove_session(3)> after a session has been used.

The remove_session_cb() is called, whenever the tls engine removes a session
from the internal cache. This happens when the session is removed because
it is expired or when a connection was not shutdown cleanly. It also happens
for all sessions in the internal session cache when
L<tls_CTX_free(3)> is called. The remove_session_cb() is passed
the B<ctx> and the tls session B<sess>. It does not provide any feedback.

The get_session_cb() is only called on tls/TLS servers with the session id
proposed by the client. The get_session_cb() is always called, also when
session caching was disabled. The get_session_cb() is passed the
B<tls> connection, the session id of length B<length> at the memory location
B<data>. With the parameter B<copy> the callback can require the
tls engine to increment the reference count of the tls_SESSION object,
Normally the reference count is not incremented and therefore the
session must not be explicitly freed with
L<tls_SESSION_free(3)>.

=head1 RETURN VALUES

tls_CTX_sess_get_new_cb(), tls_CTX_sess_get_remove_cb() and tls_CTX_sess_get_get_cb()
return different callback function pointers respectively.

=head1 SEE ALSO

L<tls(7)>, L<d2i_tls_SESSION(3)>,
L<tls_CTX_set_session_cache_mode(3)>,
L<tls_CTX_flush_sessions(3)>,
L<tls_SESSION_free(3)>,
L<tls_CTX_free(3)>

=head1 COPYRIGHT

Copyright 2001-2018 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
