=pod

=head1 NAME

tls_CTX_set_record_padding_callback,
tls_set_record_padding_callback,
tls_CTX_set_record_padding_callback_arg,
tls_set_record_padding_callback_arg,
tls_CTX_get_record_padding_callback_arg,
tls_get_record_padding_callback_arg,
tls_CTX_set_block_padding,
tls_set_block_padding - install callback to specify TLS 1.3 record padding

=head1 SYNOPSIS

 #include <opentls/tls.h>

 void tls_CTX_set_record_padding_callback(tls_CTX *ctx, size_t (*cb)(tls *s, int type, size_t len, void *arg));
 void tls_set_record_padding_callback(tls *tls, size_t (*cb)(tls *s, int type, size_t len, void *arg));

 void tls_CTX_set_record_padding_callback_arg(tls_CTX *ctx, void *arg);
 void *tls_CTX_get_record_padding_callback_arg(const tls_CTX *ctx);

 void tls_set_record_padding_callback_arg(tls *tls, void *arg);
 void *tls_get_record_padding_callback_arg(const tls *tls);

 int tls_CTX_set_block_padding(tls_CTX *ctx, size_t block_size);
 int tls_set_block_padding(tls *tls, size_t block_size);

=head1 DESCRIPTION

tls_CTX_set_record_padding_callback() or tls_set_record_padding_callback()
can be used to assign a callback function I<cb> to specify the padding
for TLS 1.3 records. The value set in B<ctx> is copied to a new tls by tls_new().

tls_CTX_set_record_padding_callback_arg() and tls_set_record_padding_callback_arg()
assign a value B<arg> that is passed to the callback when it is invoked. The value
set in B<ctx> is copied to a new tls by tls_new().

tls_CTX_get_record_padding_callback_arg() and tls_get_record_padding_callback_arg()
retrieve the B<arg> value that is passed to the callback.

tls_CTX_set_block_padding() and tls_set_block_padding() pads the record to a multiple
of the B<block_size>. A B<block_size> of 0 or 1 disables block padding. The limit of
B<block_size> is tls3_RT_MAX_PLAIN_LENGTH.

The callback is invoked for every record before encryption.
The B<type> parameter is the TLS record type that is being processed; may be
one of tls3_RT_APPLICATION_DATA, tls3_RT_HANDSHAKE, or tls3_RT_ALERT.
The B<len> parameter is the current plaintext length of the record before encryption.
The B<arg> parameter is the value set via tls_CTX_set_record_padding_callback_arg()
or tls_set_record_padding_callback_arg().

=head1 RETURN VALUES

The tls_CTX_get_record_padding_callback_arg() and tls_get_record_padding_callback_arg()
functions return the B<arg> value assigned in the corresponding set functions.

The tls_CTX_set_block_padding() and tls_set_block_padding() functions return 1 on success
or 0 if B<block_size> is too large.

The B<cb> returns the number of padding bytes to add to the record. A return of 0
indicates no padding will be added. A return value that causes the record to
exceed the maximum record size (tls3_RT_MAX_PLAIN_LENGTH) will pad out to the
maximum record size.

=head1 NOTES

The default behavior is to add no padding to the record.

A user-supplied padding callback function will override the behavior set by
tls_set_block_padding() or tls_CTX_set_block_padding(). Setting the user-supplied
callback to NULL will restore the configured block padding behavior.

These functions only apply to TLS 1.3 records being written.

Padding bytes are not added in constant-time.

=head1 SEE ALSO

L<tls(7)>, L<tls_new(3)>

=head1 HISTORY

The record padding API was added for TLS 1.3 support in Opentls 1.1.1.

=head1 COPYRIGHT

Copyright 2017 The Opentls Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.opentls.org/source/license.html>.

=cut
