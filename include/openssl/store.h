/*
 * Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the OpenSSL license (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef HEADER_STORE_H
# define HEADER_STORE_H

# include <openssl/ossl_typ.h>
# include <openssl/pem.h>
# include <openssl/safestack.h>

# ifdef  __cplusplus
extern "C" {
# endif

DEFINE_STACK_OF(STORE_INFO)

/*
 * The main STORE function.  It takes a URI is input, calls the
 * registered function for that URI's scheme and returns whatever
 * that function returns.
 */
STACK_OF(STORE_INFO) *STORE_load(const char *uri,
                                 pem_password_cb *pw_callback,
                                 void *pw_callback_data);

/*
 * Function to register a loader for the given URI scheme.
 * The loader receives all the main components of an URI except for the
 * scheme.
 */
typedef STACK_OF(STORE_INFO) *(*STORE_loader_fn)(const char *authority,
                                                 const char *path,
                                                 const char *query,
                                                 const char *fragment,
                                                 pem_password_cb *pw_callback,
                                                 void *pw_callback_data);
int STORE_register_loader(const char *scheme, STORE_loader_fn loader);

/*
 * Function to fetch the loader for a given URI scheme
 */
STORE_loader_fn STORE_get_loader(const char *scheme);

/*
 * Function to unregister the loader for a given URI scheme
 */
int STORE_unregister_loader(const char *scheme);

/*
 * Types of data that can be stored in a STORE_INFO.
 * STORE_INFO_NAME is typically found when getting a listing of
 * available "files" / "tokens" / what have you.
 */
# define STORE_INFO_NAME 0       /* char * */
# define STORE_INFO_PKEY 1       /* EVP_PKEY * */
# define STORE_INFO_CERT 2       /* X509 * */
# define STORE_INFO_CRL  3       /* X509_CRL * */

/*
 * Functions to generate STORE_INFOs, one function for each type we
 * support having in them.  Along with each of them, one macro that
 * can be used to determine what types are supported.
 *
 * In all cases, ownership of the object is transfered to the STORE_INFO
 * and will therefore be freed when the STORE_INFO is freed.
 */
STORE_INFO *STORE_INFO_new_NAME(char *name);
STORE_INFO *STORE_INFO_new_PKEY(EVP_PKEY *pkey);
STORE_INFO *STORE_INFO_new_CERT(X509 *x509);
STORE_INFO *STORE_INFO_new_CRL(X509_CRL *crl);

/*
 * Functions to try to extract data from a STORE_INFO.
 */
int STORE_INFO_get_type(const STORE_INFO *store_info);
const char *STORE_INFO_get0_NAME(const STORE_INFO *store_info);
const EVP_PKEY *STORE_INFO_get0_PKEY(const STORE_INFO *store_info);
const X509 *STORE_INFO_get0_CERT(const STORE_INFO *store_info);
const X509_CRL *STORE_INFO_get0_CRL(const STORE_INFO *store_info);

const char *STORE_INFO_type_string(int type);

/*
 * Free the STORE_INFO
 */
void STORE_INFO_free(STORE_INFO *store_info);

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */

int ERR_load_STORE_strings(void);

/* Error codes for the STORE functions. */

/* Function codes. */
# define STORE_F_FILE_LOADER                              103
# define STORE_F_STORE_FILE_LOADER                        101
# define STORE_F_STORE_FILE_LOADER_INIT                   102
# define STORE_F_STORE_GET_LOADER                         105
# define STORE_F_STORE_INFO_NEW_CERT                      108
# define STORE_F_STORE_INFO_NEW_CRL                       109
# define STORE_F_STORE_INFO_NEW_NAME                      110
# define STORE_F_STORE_INFO_NEW_PKEY                      111
# define STORE_F_STORE_REGISTER_LOADER                    106
# define STORE_F_STORE_UNREGISTER_LOADER                  107
# define STORE_F_UNREGISTER_LOADER_INT                    104

/* Reason codes. */
# define STORE_R_UNREGISTERED_SCHEME                      105
# define STORE_R_UNSUPPORED_DATA_FORMAT                   101
# define STORE_R_UNSUPPORTED_SCHEME                       100
# define STORE_R_URI_AUTHORITY_UNSUPPORED                 102
# define STORE_R_URI_FRAGMENT_UNSUPPORED                  103
# define STORE_R_URI_QUERY_UNSUPPORED                     104

# ifdef  __cplusplus
}
# endif
#endif
