## -*- mode: perl; -*-
# Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the OpenSSL license (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html

##### VMS
#
# Main supporters:
# Richard Levitte <levitte@openssl.org>
#

# Helper functions for the VMS configs
my $vms_info = {};
sub vms_info {
    unless (%$vms_info) {
        my $pointer_size = shift;
        my $pointer_size_str = $pointer_size == 0 ? "" : "$pointer_size";

        $vms_info->{disable_warns} = [ ];
        $vms_info->{pointer_size} = $pointer_size_str;
        if ($pointer_size == 64) {
            `PIPE CC /NOCROSS_REFERENCE /NOLIST /NOOBJECT /WARNINGS = DISABLE = ( MAYLOSEDATA3, EMPTYFILE ) NL: 2> NL:`;
            if ($? == 0) {
                push @{$vms_info->{disable_warns}}, "MAYLOSEDATA3";
            }
        }

        unless ($disabled{zlib}) {
            my $default_zlib = 'GNV$LIBZSHR' . $pointer_size_str;
            if (defined($disabled{"zlib-dynamic"})) {
                $vms_info->{zlib} = $withargs{zlib_lib} || "$default_zlib/SHARE";
            } else {
                $vms_info->{def_zlib} = $withargs{zlib_lib} || $default_zlib;
                # In case the --with-zlib-lib value contains something like
                # /SHARE or /LIB or so at the end, remove it.
                $vms_info->{def_zlib} =~ s|/.*$||g;
            }
        }
    }
    return $vms_info;
}

(
    "vms-generic" => {
        inherit_from     => [ "BASE_VMS" ],
        template         => 1,
        cc               => "CC/DECC",
        cflags           => picker(default => "/STANDARD=(ISOC94,RELAXED)/NOLIST/PREFIX=ALL",
                                   debug   => "/NOOPTIMIZE/DEBUG",
                                   release => "/OPTIMIZE/NODEBUG"),
        defines          => add("OPENSSL_USE_NODELETE"),
        lflags           => picker(default => "/MAP='F\$PARSE(\".MAP\",\"\$\@\")'",
                                   debug   => "/DEBUG/TRACEBACK",
                                   release => "/NODEBUG/NOTRACEBACK"),
        lib_cflags       => add("/NAMES=(AS_IS,SHORTENED)/EXTERN_MODEL=STRICT_REFDEF"),
        # no_inst_lib_cflags is used instead of lib_cflags by descrip.mms.tmpl
        # for object files belonging to selected internal libraries
        no_inst_lib_cflags => "",
        shared_target    => "vms-shared",
        dso_scheme       => "vms",
        thread_scheme    => "pthreads",

        apps_aux_src     => "vms_decc_init.c vms_term_sock.c",
    },

    "vms-alpha" => {
        inherit_from     => [ "vms-generic" ],
        cflags           => add(sub { my @warnings =
                                          @{vms_info(0)->{disable_warns}};
                                      @warnings
                                          ? "/WARNINGS=DISABLE=(".join(",",@warnings).")" : (); }),
        defines          =>
                    add(sub {
                            return vms_info(0)->{def_zlib}
                                ? "LIBZ=\"\"\"".vms_info(0)->{def_zlib}."\"\"\"" : ();
                            }),
        ex_libs          => add(sub { return vms_info(0)->{zlib} || (); }),
        pointer_size     => sub { return vms_info(0)->{pointer_size} },
        #as               => "???",
        #debug_aflags     => "/NOOPTIMIZE/DEBUG",
        #release_aflags   => "/OPTIMIZE/NODEBUG",
        bn_opts          => "SIXTY_FOUR_BIT RC4_INT",
    },
    "vms-alpha-p32" => {
        inherit_from     => [ "vms-generic" ],
        cflags           =>
            add("/POINTER_SIZE=32",
                sub { my @warnings =
                          @{vms_info(32)->{disable_warns}};
                      @warnings
                          ? "/WARNINGS=DISABLE=(".join(",",@warnings).")" : ();
                } ),
        defines          =>
                    add(sub {
                            return vms_info(32)->{def_zlib}
                                ? "LIBZ=\"\"\"".vms_info(32)->{def_zlib}."\"\"\"" : ();
                            }),
        ex_libs          => add(sub { return vms_info(32)->{zlib} || (); }),
        pointer_size     => sub { return vms_info(32)->{pointer_size} },
    },
    "vms-alpha-p64" => {
        inherit_from     => [ "vms-generic" ],
        cflags           =>
            add("/POINTER_SIZE=64=ARGV",
                sub { my @warnings =
                          @{vms_info(64)->{disable_warns}};
                      @warnings
                          ? "/WARNINGS=DISABLE=(".join(",",@warnings).")" : ();
                } ),
        defines          =>
                    add(sub {
                            return vms_info(64)->{def_zlib}
                                ? "LIBZ=\"\"\"".vms_info(64)->{def_zlib}."\"\"\"" : ();
                            }),
        ex_libs          => add(sub { return vms_info(64)->{zlib} || (); }),
        pointer_size     => sub { return vms_info(64)->{pointer_size} },
    },
    "vms-ia64" => {
        inherit_from     => [ "vms-generic" ],
        cflags           => add(sub { my @warnings =
                                          @{vms_info(0)->{disable_warns}};
                                      @warnings
                                          ? "/WARNINGS=DISABLE=(".join(",",@warnings).")" : (); }),
        defines          =>
                    add(sub {
                            return vms_info(0)->{def_zlib}
                                ? "LIBZ=\"\"\"".vms_info(0)->{def_zlib}."\"\"\"" : ();
                            }),
        ex_libs          => add(sub { return vms_info(0)->{zlib} || (); }),
        pointer_size     => sub { return vms_info(0)->{pointer_size} },
        #as               => "I4S",
        #debug_aflags     => "/NOOPTIMIZE/DEBUG",
        #release_aflags   => "/OPTIMIZE/NODEBUG",
        bn_opts          => "SIXTY_FOUR_BIT RC4_INT",
    },
    "vms-ia64-p32" => {
        inherit_from     => [ "vms-generic" ],
        cflags           =>
            add("/POINTER_SIZE=32",
                sub { my @warnings =
                          @{vms_info(32)->{disable_warns}};
                      @warnings
                          ? "/WARNINGS=DISABLE=(".join(",",@warnings).")" : ();
                } ),
        defines          =>
                    add(sub {
                            return vms_info(32)->{def_zlib}
                                ? "LIBZ=\"\"\"".vms_info(32)->{def_zlib}."\"\"\"" : ();
                            }),
        ex_libs          => add(sub { return vms_info(32)->{zlib} || (); }),
        pointer_size     => sub { return vms_info(32)->{pointer_size} },
    },
    "vms-ia64-p64" => {
        inherit_from     => [ "vms-generic" ],
        cflags           =>
            add("/POINTER_SIZE=64=ARGV",
                sub { my @warnings =
                          @{vms_info(64)->{disable_warns}};
                      @warnings
                          ? "/WARNINGS=DISABLE=(".join(",",@warnings).")" : ();
                } ),
        defines          =>
                    add(sub {
                            return vms_info(64)->{def_zlib}
                                ? "LIBZ=\"\"\"".vms_info(64)->{def_zlib}."\"\"\"" : ();
                            }),
        ex_libs          => add(sub { return vms_info(64)->{zlib} || (); }),
        pointer_size     => sub { return vms_info(64)->{pointer_size} },
    },
);
