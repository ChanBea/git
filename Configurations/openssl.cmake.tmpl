##
## CMake configuration file for OpenSSL
##
## {- join("\n## ", @autowarntext) -}
{-
  use File::Basename;
  use OpenSSL::Util;

  our $sover_dirname = platform->shlib_version_as_filename();

  my $build_scheme = $target{build_scheme};
  my $install_flavour = $build_scheme->[$#$build_scheme]; # last element
  my $win_installenv =
      $install_flavour eq "VC-WOW" ? "ProgramFiles(x86)"
                                   : "ProgramW6432";
  my $win_commonenv =
      $install_flavour eq "VC-WOW" ? "CommonProgramFiles(x86)"
                                   : "CommonProgramW6432";
  our $win_installroot =
      defined($ENV{$win_installenv}) ? $win_installenv : 'ProgramFiles';
  our $win_commonroot =
      defined($ENV{$win_commonenv}) ? $win_commonenv : 'CommonProgramFiles';

  # expand variables early
  $win_installroot = $ENV{$win_installroot};
  $win_commonroot = $ENV{$win_commonroot};

  sub compute_target_name {
      my $intent = shift;
      my $x = shift;
      if ($intent eq 'lib') {
          return basename(platform->staticname($x));
      } elsif ($intent eq 'shlib') {
          return basename(platform->sharedname($x) // platform->staticname($x));
      } elsif ($intent eq 'dso') {
          return basename(platform->dsoname($x));
      } elsif ($intent eq 'bin') {
          return basename(platform->binname($x));
      } else {
          return basename(platform->staticname($x));
      }
  }

  '';
-}

set(CMAKE_EXECUTE_PROCESS_COMMAND_ECHO STDOUT)

include(CheckCCompilerFlag)
include(CheckPIESupported)

# Make position independent targets
check_pie_supported(OUTPUT_VARIABLE _OSSL_CHECK_PIE_SUPPORT_OUTPUT LANGUAGES C)
if(NOT CMAKE_C_LINK_PIE_SUPPORTED)
  set(OPENSSL_POSITION_INDEPENDENT_CODE OFF)
  if(NOT WIN32)
    message(WARNING "PIE is not supported at link time: ${_OSSL_CHECK_PIE_SUPPORT_OUTPUT}.\n"
                    "PIE link options will not be passed to linker.")
  endif()
else()
  set(OPENSSL_POSITION_INDEPENDENT_CODE ON)
endif()

# Determine version-script support.
if(NOT CMAKE_LINK_DEF_FILE_FLAG)
  file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ossl-version-script-test.def" "{ };")
  check_c_compiler_flag("-Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/ossl-version-script-test.def"
                          OPENSSL_HAS_VERSION_SCRIPT_SUPPORT)
endif()

set(OPENSSL_SRCDIR {- use File::Spec::Functions qw(:DEFAULT rel2abs);
                      fixup_path(rel2abs($config{sourcedir})) -})
set(OPENSSL_BLDDIR {- use File::Spec::Functions qw(:DEFAULT rel2abs);
                      fixup_path(rel2abs($config{builddir})) -})
set(OPENSSL_FIPSKEY "{- $config{FIPSKEY} -}")

set(OPENSSL_VERSION "{- $config{full_version} -}")
set(OPENSSL_VERSION_NUMBER "{- $config{version} -}")
set(OPENSSL_VERSION_MAJOR "{- $config{major} -}")
set(OPENSSL_VERSION_MINOR "{- $config{minor} -}")

set(SHLIB_VERSION_NUMBER "{- $config{shlib_version} -}")

set(OPENSSL_OS "${CMAKE_SYSTEM_NAME}")

set(OPENSSL_LIBS {- join(" ", map { my $x = platform->staticlib($_) // ();
                                    $x ? compute_target_name('lib', $_) : () } @{$unified_info{libraries}}) -})
set(OPENSSL_SHLIBS {- join(" ", map { my $x = platform->sharedlib($_) // ();
                                      $x ? compute_target_name('shlib', $_) : () } @{$unified_info{libraries}}) -})
set(OPENSSL_MODULES {-  our @MODULES = map { my $x = platform->dso($_) // ();
                                             $x ? compute_target_name('dso', $_) : () }
                                        # Drop all modules that are dependencies, they will
                                        # be processed through their dependents
                                        grep { my $x = $_;
                                               !grep { grep { $_ eq $x } @$_ }
                                                     values %{$unified_info{depends}} }
                                        @{$unified_info{modules}};
                        join(" ", @MODULES) -})
set(OPENSSL_FIPSMODULE {- # We do some extra checking here, as there should be only one
                          use File::Basename;
                          our @fipsmodules =
                              grep { !$unified_info{attributes}->{modules}->{$_}->{noinst}
                                     && $unified_info{attributes}->{modules}->{$_}->{fips} }
                              @{$unified_info{modules}};
                          die "More that one FIPS module" if scalar @fipsmodules > 1;
                          join(" ", map { my $x = platform->dso($_) // ();
                                          $x ? compute_target_name('dso', $_) : () } @fipsmodules) -})
set(OPENSSL_FIPSMODULENAME {- die 'More that one FIPS module' if scalar @fipsmodules > 1;
                              join(" ", map { basename(platform->dso($_)) } @fipsmodules) -})
set(OPENSSL_PROGRAMS {- our @PROGRAMS = map { my $x = platform->bin($_) // ();
                                              $x ? compute_target_name('bin', $_) : () } @{$unified_info{programs}};
                        join(" ", @PROGRAMS) -})

set(OPENSSL_GENERATED_MANDATORY {- # Files that require mandatory generation
                                   our @GENERATED_MANDATORY = @{$unified_info{depends}->{""}};
                                   join(" ", map { fixup_path($_) } @GENERATED_MANDATORY) -})
#set(OPENSSL_GENERATED {- # common0.tmpl provides @generated
#                         our @GENERATED = map { platform->convertext($_) } @generated;
#                         join(" ", map { fixup_path($_) } @GENERATED) -})

set(OPENSSL_INSTALL_LIBS {-
        join(" ", map { fixup_path(platform->sharedlib_import($_)
                                   // platform->staticlib($_)) }
                  grep { !$unified_info{attributes}->{libraries}->{$_}->{noinst} }
                  @{$unified_info{libraries}})
-})
set(OPENSSL_INSTALL_SHLIBS {-
        join(" ", map { my $x = platform->sharedlib($_);
                        $x ? fixup_path($x) : () }
                  grep { !$unified_info{attributes}->{libraries}->{$_}->{noinst} }
                  @{$unified_info{libraries}})
-})
set(OPENSSL_INSTALL_ENGINES {-
        join(" ", map { fixup_path(platform->dso($_)) }
                  grep { !$unified_info{attributes}->{modules}->{$_}->{noinst}
                         && $unified_info{attributes}->{modules}->{$_}->{engine} }
                  @{$unified_info{modules}})
-})
set(OPENSSL_INSTALL_MODULES {-
        join(" ", map { fixup_path(platform->dso($_)) }
                  grep { !$unified_info{attributes}->{modules}->{$_}->{noinst}
                          && !$unified_info{attributes}->{modules}->{$_}->{engine}
                          && !$unified_info{attributes}->{modules}->{$_}->{fips} }
                  @{$unified_info{modules}})
-})
set(OPENSSL_INSTALL_FIPSMODULE {-
        join(" ", map { fixup_path(platform->dso($_)) }
                  grep { !$unified_info{attributes}->{modules}->{$_}->{noinst}
                          && $unified_info{attributes}->{modules}->{$_}->{fips} }
                  @{$unified_info{modules}})
-})
set(OPENSSL_INSTALL_FIPSMODULECONF "providers/fipsmodule.cnf")
set(OPENSSL_INSTALL_PROGRAMS {-
        join(" ", map { fixup_path(platform->bin($_)) }
                  grep { !$unified_info{attributes}->{programs}->{$_}->{noinst} }
                  @{$unified_info{programs}})
-})
set(OPENSSL_BIN_SCRIPTS {-
        join(" ", map { fixup_path($_) }
                  grep { !$unified_info{attributes}->{scripts}->{$_}->{noinst}
                         && !$unified_info{attributes}->{scripts}->{$_}->{misc} }
                  @{$unified_info{scripts}})
-})
set(OPENSSL_MISC_SCRIPTS {-
        join(" ", map { fixup_path($_) }
                  grep { !$unified_info{attributes}->{scripts}->{$_}->{noinst}
                         && $unified_info{attributes}->{scripts}->{$_}->{misc} }
                  @{$unified_info{scripts}})
-})
set(OPENSSL_IMAGEDOCS1 {- our @IMAGEDOCS1 = @{$unified_info{imagedocs}->{man1}};
                        join(" ", map { fixup_path($_) } @IMAGEDOCS1) -})
set(OPENSSL_IMAGEDOCS3 {- our @IMAGEDOCS3 = @{$unified_info{imagedocs}->{man3}};
                        join(" ", map { fixup_path($_) } @IMAGEDOCS3) -})
set(OPENSSL_IMAGEDOCS5 {- our @IMAGEDOCS5 = @{$unified_info{imagedocs}->{man5}};
                        join(" ", map { fixup_path($_) } @IMAGEDOCS5) -})
set(OPENSSL_IMAGEDOCS7 {- our @IMAGEDOCS7 = @{$unified_info{imagedocs}->{man7}};
                        join(" ", map { fixup_path($_) } @IMAGEDOCS7) -})
set(OPENSSL_HTMLDOCS1 {- our @HTMLDOCS1 = @{$unified_info{htmldocs}->{man1}};
                        join(" ", map { fixup_path($_) } @HTMLDOCS1) -})
set(OPENSSL_HTMLDOCS3 {- our @HTMLDOCS3 = @{$unified_info{htmldocs}->{man3}};
                        join(" ", map { fixup_path($_) } @HTMLDOCS3) -})
set(OPENSSL_HTMLDOCS5 {- our @HTMLDOCS5 = @{$unified_info{htmldocs}->{man5}};
                        join(" ", map { fixup_path($_) } @HTMLDOCS5) -})
set(OPENSSL_HTMLDOCS7 {- our @HTMLDOCS7 = @{$unified_info{htmldocs}->{man7}};
                        join(" ", map { fixup_path($_) } @HTMLDOCS7) -})
set(OPENSSL_HTMLDOCS1_BLDDIRS {- my %dirs = map { dirname($_) => 1 } @HTMLDOCS1;
                                join(" ", map { fixup_path($_) } sort keys %dirs) -})
set(OPENSSL_HTMLDOCS3_BLDDIRS {- my %dirs = map { dirname($_) => 1 } @HTMLDOCS3;
                                join(" ", map { fixup_path($_) } sort keys %dirs) -})
set(OPENSSL_HTMLDOCS5_BLDDIRS {- my %dirs = map { dirname($_) => 1 } @HTMLDOCS5;
                                join(" ", map { fixup_path($_) } sort keys %dirs) -})
set(OPENSSL_HTMLDOCS7_BLDDIRS {- my %dirs = map { dirname($_) => 1 } @HTMLDOCS7;
                                join(" ", map { fixup_path($_) } sort keys %dirs) -})

set(APPS_OPENSSL {- # This path must match perl's native path format so
                    # that progs.pl can lookup apps files properly.
                    use File::Spec::Functions;
                    escape_cmd(catfile("apps","openssl")) -})

# Do not edit these manually. Use Configure with --prefix or --openssldir
# to change this!  Short explanation in the top comment in Configure
set(INSTALLTOP_dev {- # $prefix is used in the OPENSSLDIR perl snippet
                    use File::Spec::Functions qw(:DEFAULT splitpath);
                    our $prefix = canonpath($config{prefix}
                                            || "$win_installroot\\OpenSSL");
                    our ($prefix_dev, $prefix_dir, $prefix_file) =
                        splitpath($prefix, 1);
                    fixup_path($prefix_dev) -})
set(INSTALLTOP_dir {- fixup_path(canonpath($prefix_dir)) -})
set(OPENSSLDIR_dev {-
                    #
                    # The logic here is that if no --openssldir was given,
                    # OPENSSLDIR will get the value "$win_commonroot/SSL".
                    # If --openssldir was given and the value is an absolute
                    # path, OPENSSLDIR will get its value without change.
                    # If the value from --openssldir is a relative path,
                    # OPENSSLDIR will get $prefix with the --openssldir
                    # value appended as a subdirectory.
                    #
                    use File::Spec::Functions qw(:DEFAULT splitpath);
                    our $openssldir =
                        $config{openssldir} ?
                            (file_name_is_absolute($config{openssldir}) ?
                                 canonpath($config{openssldir})
                                 : catdir($prefix, $config{openssldir}))
                            : canonpath("$win_commonroot/SSL");
                    our ($openssldir_dev, $openssldir_dir, $openssldir_file) =
                        splitpath($openssldir, 1);
                    fixup_path($openssldir_dev) -})
set(OPENSSLDIR_dir {- fixup_path(canonpath($openssldir_dir)) -})
set(OPENSSL_LIBDIR {- our $libdir = $config{libdir} || "lib";
                      fixup_path(file_name_is_absolute($libdir) ? "" : $libdir); -})
set(MODULESDIR_dev {- use File::Spec::Functions qw(:DEFAULT splitpath catpath);
                      our $modulesprefix = catdir($prefix,$libdir);
                      our ($modulesprefix_dev, $modulesprefix_dir, $modulesprefix_file) = splitpath($modulesprefix, 1);
                      our $modulesdir_dev = $modulesprefix_dev;
                      our $modulesdir_dir = catdir($modulesprefix_dir, 'ossl-modules');
                      our $modulesdir = catpath($modulesdir_dev, $modulesdir_dir);
                      our $enginesdir_dev = $modulesprefix_dev;
                      our $enginesdir_dir = catdir($modulesprefix_dir, "engines-".$sover_dirname);
                      our $enginesdir = catpath($enginesdir_dev, $enginesdir_dir);
                      fixup_path($modulesdir_dev) -})
set(MODULESDIR_dir {- fixup_path(canonpath($modulesdir_dir)) -})
set(ENGINESDIR_dev {- fixup_path($enginesdir_dev) -})
set(ENGINESDIR_dir {- fixup_path(canonpath($enginesdir_dir)) -})
if(OPENSSL_DESTDIR)
  set(OPENSSL_INSTALLTOP "${OPENSSL_DESTDIR}${INSTALLTOP_dir}")
  set(OPENSSL_OPENSSLDIR "${OPENSSL_DESTDIR}${OPENSSLDIR_dir}")
  set(OPENSSL_ENGINESDIR "${OPENSSL_DESTDIR}${ENGINESDIR_dir}")
  set(OPENSSL_MODULESDIR "${OPENSSL_DESTDIR}${MODULESDIR_dir}")
else()
  set(OPENSSL_INSTALLTOP "${INSTALLTOP_dev}${INSTALLTOP_dir}")
  set(OPENSSL_OPENSSLDIR "${OPENSSLDIR_dev}${OPENSSLDIR_dir}")
  set(OPENSSL_ENGINESDIR "${ENGINESDIR_dev}${ENGINESDIR_dir}")
  set(OPENSSL_MODULESDIR "${MODULESDIR_dev}${MODULESDIR_dir}")
endif(OPENSSL_DESTDIR)

##### User defined commands and flags ################################

set(OPENSSL_CC {- $x = $config{CC}; $x ? fixup_path($x) : () -})
set(OPENSSL_CXX {- $x = $config{CXX}; $x ? fixup_path($x) : () -})
set(OPENSSL_CXXFLAGS {- our $cppflags1 = join(" ",
                                              (map { "-D".$_} @{$config{CPPDEFINES}}),
                                              (map { " -I".$_} @{$config{CPPINCLUDES}}),
                                              @{$config{CXXFLAGS}}) -})
set(OPENSSL_CFLAGS {- join(" ", @{$config{CFLAGS}}) -})
set(OPENSSL_LD {- $x = $config{LD}; $x ? fixup_path($x) : () -})
set(OPENSSL_LDFLAGS {- join(" ", map { quotify1($_) } @{$config{LDFLAGS}}) -})
set(OPENSSL_EX_LIBS {- join(" ", map { fixup_path($_) } @{$config{LDLIBS}}) -})

##### Project flags ##################################################

if (WIN32)
  set(OPENSSL_COMMON_DEFINES -DOPENSSL_SYS_WIN32 -DWIN32_LEAN_AND_MEAN -DUNICODE -D_UNICODE -D_CRT_SECURE_NO_DEPRECATE -D_WINSOCK_DEPRECATED_NO_WARNINGS)
  set(OPENSSL_SHLIB_DEFINES -D_WINDLL)
else()
  set(OPENSSL_COMMON_DEFINES)
  set(OPENSSL_SHLIB_DEFINES)
endif()

# Variables starting with CNF_ are common variables for all product types

set(CNF_ASFLAGS {- join(' ', $target{asflags} || (), @{$config{asflags}}) -})
set(CNF_CPPDEFS {- join(' ', @{$target{defines}}, @{$config{defines}}) -})
if (WIN32) # Force some defines on win32
  set(CNF_CPPDEFS OPENSSL_SYS_WIN32 WIN32_LEAN_AND_MEAN UNICODE _UNICODE ${CNF_CPPDEFS})
endif()
set(CNF_CPPINCS {- join(' ', map { fixup_path($_) } @{$target{includes}}, @{$config{includes}}) -})
set(CNF_CPPFLAGS {- our $cppflags2 = join(' ', $target{cppflags} || (),
                        (map { '-D'.$_ } @{$target{defines}}, @{$config{defines}}),
                        (map { '-I'.fixup_path($_) } @{$target{includes}}, @{$config{includes}}),
                        @{$config{cppflags}}) -})
set(CNF_CFLAGS {- join(' ', $target{cflags} || (), @{$config{cflags}}) -})
set(CNF_CXXFLAGS {- join(' ', $target{cxxflags} || (), @{$config{cxxflags}}) -})
set(CNF_LDFLAGS {- join(' ', $target{lflags} || (), @{$config{lflags}}) -})
if (WIN32)
  set(CNF_EX_LIBS {- my @ex_libs = ();
                     push @ex_libs, 'ws2_32' unless $disabled{sock};
                     push @ex_libs, 'gdi32 advapi32 crypt32 user32';
                     join(' ', @ex_libs, @{$config{ex_libs}}) -})
else()
  set(CNF_EX_LIBS {- join(' ', @{$config{ex_libs}}) -})
endif()

# Variables starting with LIB_ are used to build library object files
# and shared libraries.
# Variables starting with DSO_ are used to build DSOs and their object files.
# Variables starting with BIN_ are used to build programs and their object
# files.

set(LIB_ASFLAGS {- join(' ', $target{lib_asflags} || (),
                             @{$config{lib_asflags}}) -} ${CNF_ASFLAGS} ${ASFLAGS})
set(LIB_CPPDEFS {- join(' ', @{$target{lib_defines}},
                             @{$target{shared_defines}},
                             @{$config{lib_defines}},
                             @{$config{shared_defines}}) -} OPENSSLDIR="${OPENSSL_OPENSSLDIR}" ENGINESDIR="${OPENSSL_ENGINESDIR}" MODULESDIR="${OPENSSL_MODULESDIR}" ${CNF_CPPDEFS})
set(LIB_CPPINCS {- join(' ', (map { fixup_path($_) }
                                 @{$target{lib_includes}},
                                 @{$target{shared_includes}},
                                 @{$config{lib_includes}},
                                 @{$config{shared_includes}})) -} ${CNF_CPPINCS})
set(LIB_CPPFLAGS {- our $lib_cppflags =
                    join(' ', $target{lib_cppflags} || (),
                            $target{shared_cppflag} || (),
                            (map { '-D'.$_ }
                                 @{$target{lib_defines}},
                                 @{$target{shared_defines}},
                                 @{$config{lib_defines}},
                                 @{$config{shared_defines}}),
                            (map { '-I'.fixup_path($_) }
                                 @{$target{lib_includes}},
                                 @{$target{shared_includes}},
                                 @{$config{lib_includes}},
                                 @{$config{shared_includes}}),
                            @{$config{lib_cppflags}},
                            @{$config{shared_cppflag}});
                    join(' ', $lib_cppflags) -} -DOPENSSLDIR="${OPENSSL_OPENSSLDIR}" -DENGINESDIR="${OPENSSL_ENGINESDIR}" -DMODULESDIR="${OPENSSL_MODULESDIR}" ${CNF_CPPFLAGS} ${CPPFLAGS})
set(LIB_CFLAGS {- join(' ', $target{lib_cflags} || (),
                            $target{shared_cflag} || (),
                            @{$config{lib_cflags}},
                            @{$config{shared_cflag}}) -} ${CNF_CFLAGS} ${CFLAGS})
set(LIB_LDFLAGS {- join(' ', $target{shared_ldflag} || (),
                             $config{shared_ldflag} || ()) -} ${CNF_LDFLAGS} ${LDFLAGS})
set(LIB_EX_LIBS ${CNF_EX_LIBS} ${OPENSSL_EX_LIBS})
set(DSO_ASFLAGS {- join(' ', $target{dso_asflags} || (),
                             $target{module_asflags} || (),
                             @{$config{dso_asflags}},
                             @{$config{module_asflags}}) -} ${CNF_ASFLAGS} ${ASFLAGS})
set(DSO_CPPDEFS {- join(' ', @{$target{dso_defines}},
                             @{$target{module_defines}},
                             @{$config{dso_defines}},
                             @{$config{module_defines}}) -} ${CNF_CPPDEFS})
set(DSO_CPPINCS {- join(' ', (map { fixup_path($_) }
                                @{$target{dso_includes}},
                                @{$target{module_includes}},
                                @{$config{dso_includes}},
                                @{$config{module_includes}})) -} ${CNF_CPPINCS})
set(DSO_CPPFLAGS {- join(' ', $target{dso_cppflags} || (),
                            $target{module_cppflag} || (),
                            (map { '-D'.quotify1($_) }
                                 @{$target{dso_defines}},
                                 @{$target{module_defines}},
                                 @{$config{dso_defines}},
                                 @{$config{module_defines}}),
                            (map { '-I'.quotify1($_) }
                                 @{$target{dso_includes}},
                                 @{$target{module_includes}},
                                 @{$config{dso_includes}},
                                 @{$config{module_includes}}),
                            @{$config{dso_cppflags}},
                            @{$config{module_cppflags}}) -} ${CNF_CPPFLAGS} ${CPPFLAGS})
set(DSO_CFLAGS {- join(' ', $target{dso_cflags} || (),
                            $target{module_cflags} || (),
                            @{$config{dso_cflags}},
                            @{$config{module_cflags}}) -} ${CNF_CFLAGS} ${CFLAGS})
set(DSO_LDFLAGS {- join(' ', $target{dso_lflags} || (),
                            $target{module_ldflags} || (),
                            @{$config{dso_lflags}},
                            @{$config{module_ldflags}}) -} ${CNF_LDFLAGS} ${LDFLAGS})
set(DSO_EX_LIBS ${CNF_EX_LIBS} ${OPENSSL_EX_LIBS})
set(BIN_ASFLAGS {- join(' ', $target{bin_asflags} || (),
                             @{$config{bin_asflags}}) -} ${CNF_ASFLAGS} ${ASFLAGS})
set(BIN_CPPDEFS {- join(' ', @{$target{bin_defines}}) -} ${CNF_CPPDEFS})
set(BIN_CPPINCS {- join(' ', map { fixup_path($_) } @{$target{bin_includes}}) -} ${CNF_CPPINCS})
set(BIN_CPPFLAGS {- join(' ', $target{bin_cppflags} || (),
                            (map { '-D'.$_ } @{$config{bin_defines} || ()}),
                            @{$config{bin_cppflags}}) -} ${CNF_CPPFLAGS} ${CPPFLAGS})
set(BIN_CFLAGS {- join(' ', $target{bin_cflags} || (),
                            @{$config{bin_cflags}}) -} ${CNF_CFLAGS} ${CFLAGS})
set(BIN_LDFLAGS {- join(' ', $target{bin_lflags} || (),
                            @{$config{bin_lflags}}) -} ${CNF_LDFLAGS} ${LDFLAGS})
set(BIN_EX_LIBS ${CNF_EX_LIBS} ${OPENSSL_EX_LIBS})

# CPPFLAGS_Q is used for one thing only: to build up buildinf.h
set(CPPFLAGS_Q "{- join(' ', $lib_cppflags || (),
                             $cppflags2 || (),
                             $cppflags1 || ()) -}")
set(PLATFORM "{- $config{target} -}")

if(WIN32)
  enable_language(ASM_NASM)
  set(OPENSSL_AS {- $x = $config{AS}; $x ? fixup_path($x) : () -})
  set(OPENSSL_ASFLAGS {- join(' ', @{$config{ASFLAGS}}) -})
  set(OPENSSL_AS_ENV "ASM=${OPENSSL_AS}")
  set(PERLASM_SCHEME "{- $target{perlasm_scheme} -}")
else()
  enable_language(ASM)
  set(OPENSSL_AS "${CMAKE_ASM_COMPILER}")
  set(OPENSSL_ASFLAGS "-x assembler")
  set(OPENSSL_AS_ENV "CC=${OPENSSL_AS}")
  set(PERLASM_SCHEME "elf")
endif()

set(OPENSSL_PROCESSOR "{- $config{processor} -}")

# Building targets ###################################################

{-
 use File::Basename;
 use File::Spec::Functions qw/:DEFAULT abs2rel rel2abs file_name_is_absolute/;

  # Helper function to convert dependencies in platform agnostic form to
  # dependencies in platform form.
  sub compute_platform_depends {
      map { my $x = $_;
            grep { $x eq $_ } @{$unified_info{programs}} and platform->bin($x)
            or grep { $x eq $_ } @{$unified_info{modules}} and platform->dso($x)
            or grep { $x eq $_ } @{$unified_info{libraries}} and platform->lib($x)
            or platform->convertext($x); } @_;
  }

 # Helper function to figure out dependencies on libraries
 # It takes a list of library names and outputs a list of dependencies
 sub compute_lib_depends {
     if ($disabled{shared}) {
	 return map { platform->staticlib($_) } @_;
     }
     return map { platform->sharedlib_import($_) // platform->staticlib($_) } @_;
 }

 sub compute_lib_depend_targets {
     if ($disabled{shared}) {
	 return map { "openssl_".basename(platform->staticname($_)) } @_;
     }
     return map { "openssl_".basename(platform->sharedname($_) // platform->staticname($_)) } @_;
 }

  sub generatetarget {
      # Nothing to do for CMake for now.
      return <<"EOF";
EOF
  }

  sub generatesrc {
      my %args = @_;
      my $gen0 = $args{generator}->[0];
      my $gen_args = join('', map { $_ =~ s/\$\((\S+)\)/\$\{$1\}/; " $_" }
                              @{$args{generator}}[1..$#{$args{generator}}]);
      my $gen_incs = join("", map { " ".fixup_path("-I".$_) } @{$args{generator_incs}});
      my $incs = join("", map { " ".fixup_path("-I".$_) } @{$args{incs}});
      my $defs = join("", map { " -D".$_ } @{$args{defs}});
      my $deps = join(' ',
                      map { file_name_is_absolute($_) || ($_ =~ m|^../|) ? "\"$_\"" : $_ }
                      compute_platform_depends(@{$args{generator_deps}},
                                               @{$args{deps}}));

      if ($args{src} =~ /\.html$/) {
          #
          # HTML generator
          #
          my $title = basename($args{src}, ".html");
          my $pod = fixup_path($gen0);
          my $gen_out = fixup_path($args{src});
          return <<"EOF";
list(APPEND GENERATE_HTML_DOCS $gen_out)
add_custom_command(OUTPUT $gen_out MAIN_DEPENDENCY $pod
                   COMMAND \${PERL_EXECUTABLE} "util/mkpod2html.pl" -i $pod -o $gen_out -t "$title" -r "\${OPENSSL_SRCDIR}/doc"
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
      } elsif (platform->isdef($args{src})) {
          #
          # Linker script-ish generator
          #
          my $gen_out = fixup_path("\${OPENSSL_SRCDIR}/".platform->def($args{src}));
          my $gensrc = fixup_path($gen0);
          my $mkdef = fixup_path(abs2rel(rel2abs(catfile($config{sourcedir},
                                                         "util", "mkdef.pl")),
                                         rel2abs($config{builddir})));
          my $ord_ver = $args{intent} eq 'lib' ? ' --version ${OPENSSL_VERSION_NUMBER}' : '';
          my $ord_name =
              $args{generator}->[1] || basename(platform->dsoname($args{product}));
          return <<"EOF";
add_custom_command(OUTPUT $gen_out MAIN_DEPENDENCY $gensrc
                   COMMAND \${PERL_EXECUTABLE} $mkdef$ord_ver --type $args{intent} --ordinals $gensrc --name $ord_name --OS \${OPENSSL_OS} > $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
      } elsif (platform->isasm($args{src})) {
          #
          # Assembler generator
          #
          my $cppflags = {
              shlib => '${LIB_CFLAGS} ${LIB_CPPFLAGS}',
              lib => '${LIB_CFLAGS} ${LIB_CPPFLAGS}',
              dso => '${DSO_CFLAGS} ${DSO_CPPFLAGS}',
              bin => '${BIN_CFLAGS} ${BIN_CPPFLAGS}'
          } -> {$args{intent}};
          my $gen_in = fixup_path($gen0);
          my $gen_out = fixup_path("\${OPENSSL_SRCDIR}/".platform->asm($args{src}));

          my $generator;
          if ($gen0 =~ /\.pl$/) {
              $generator = '${PERL_EXECUTABLE}'.$gen_incs.' '.$gen_in.$gen_args
                  .' "${PERLASM_SCHEME}"'.$incs.' '.$cppflags.$defs.' ${PROCESSSOR}';
          } elsif ($gen0 =~ /\.S$/) {
              $generator = undef;
          } else {
              die "Generator type for $src unknown: $gen0\n";
          }

          if (defined($generator)) {
            return <<"EOF";
add_custom_command(OUTPUT $gen_out
                   COMMAND \${CMAKE_COMMAND} -E env "\${OPENSSL_AS_ENV}" $generator $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
          }
          return <<"EOF";
list(APPEND OPENSSL_CPPASM_SOURCES $gen_in)
EOF
      } elsif ($gen0 =~ m|^.*\.in$|) {
          #
          # "dofile" generator (file.in -> file)
          #
          my $dofile = fixup_path(
                        abs2rel(rel2abs(catfile($config{sourcedir},
                                                "util", "dofile.pl")),
                                rel2abs($config{builddir})));
          my $gen_in = fixup_path($gen0);
          my $gen_out = fixup_path(file_name_is_absolute($args{src}) || ($args{src} =~ m|^../|)
                                    ? $args{src} : "\${OPENSSL_SRCDIR}/".$args{src});
          my @perlmodules = ( 'configdata.pm',
                              grep { $_ =~ m|\.pm$| } @{$args{deps}} );
          my %perlmoduleincs = map { fixup_path("-I".rel2abs(dirname($_))) => 1 } @perlmodules;
          @perlmodules = map { "-M".basename($_, '.pm') } @perlmodules;
          my $perlmodules = join(' ', '', sort keys %perlmoduleincs, @perlmodules);

          # If this is a mandatory generated file, then generate it during
          # configuration using execute_process.
          if (grep { $args{src} eq $_ } @GENERATED_MANDATORY) {
              return <<"EOF";
execute_process(COMMAND "\${PERL_EXECUTABLE}"$perlmodules $dofile "-o$target{build_file}" $gen_in$gen_args
                OUTPUT_FILE $gen_out
                WORKING_DIRECTORY "\${OPENSSL_SRCDIR}"
                COMMAND_ECHO STDERR)
EOF
          }

          # Check if this is a doc to be generated.
          if ($args{src} =~ /\.pod$/) {
              my $gen_cmd = escape_cmd('${PERL_EXECUTABLE}'.$perlmodules.' '
                                        .$dofile.' -o'.$target{build_file}.' '
                                        .$gen_in.$gen_args.' > '.$gen_out);
              return <<"EOF";
list(APPEND GENERATE_POD_DOCS $gen_out)
add_custom_command(OUTPUT $gen_out MAIN_DEPENDENCY $gen_in
                   COMMAND \${PERL_EXECUTABLE}$perlmodules $dofile -o$target{build_file} $gen_in$gen_args > $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
          }

          our @gen_deps = compute_platform_depends(@{$args{generator_deps}},
                                                   @{$args{deps}});
          my $gen_deps = join(' ', map { fixup_path($_)} @gen_deps);
          if (@gen_deps) {
              $gen_deps = ' DEPENDS '.$gen_deps;
          }
          return <<"EOF";
add_custom_command(OUTPUT $gen_out MAIN_DEPENDENCY $gen_in$gen_deps
                   COMMAND \${PERL_EXECUTABLE}$perlmodules $dofile "-o$target{build_file}" $gen_in$gen_args > $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
      } elsif (grep { $_ eq $gen0 } @{$unified_info{programs}}) {
          #
          # Generic generator using OpenSSL programs
          #

          # Redo $gen0, to ensure that we have the proper extension.
          $gen0 = fixup_path(platform->bin($gen0));
          my $gen_out = fixup_path(file_name_is_absolute($args{src}) || ($args{src} =~ m|^../|)
                                    ? $args{src} : "\${OPENSSL_SRCDIR}/".$args{src});
          return <<"EOF";
execute_process(COMMAND "\${PERL_EXECUTABLE}" "\${OPENSSL_BLDDIR}/util/wrap.pl" $gen0$gen_args
                OUTPUT_FILE $gen_out
                WORKING_DIRECTORY "\${OPENSSL_SRCDIR}"
                COMMAND_ECHO STDERR)
EOF
      } else {
          #
          # Generic generator using Perl
          #
          my $gen_in = fixup_path(file_name_is_absolute($gen0) || ($gen0 =~ m|^../|)
                                    ? $gen0 : "\${OPENSSL_SRCDIR}/".$gen0);
          my $gen_out = fixup_path(file_name_is_absolute($args{src}) || ($args{src} =~ m|^../|)
                                    ? $args{src} : "\${OPENSSL_SRCDIR}/".$args{src});
          if ($args{src} =~ /\.rc$/) {
            return <<"EOF";
# Generate resource
add_custom_command(OUTPUT $gen_out
                   COMMAND \${PERL_EXECUTABLE}$gen_incs $gen_in$gen_args > $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
          }
          if ($gen0 =~ /\.pod$/ || $args{src} =~ /\.pod$/) {
              return <<"EOF";
list(APPEND GENERATE_MAN_DOCS $gen_out)
add_custom_command(OUTPUT $gen_out MAIN_DEPENDENCY $gen_in
                   COMMAND \${PERL_EXECUTABLE}$gen_incs $gen_in$gen_args > $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
          }
          my $depends = join(' ', map { fixup_path(file_name_is_absolute($_) || ($_ =~ m|^../|)
                                                  ? $_ : "\${OPENSSL_SRCDIR}/".$_) } @{$args{deps}});
          if (@{$args{deps}}) {
              $depends = ' DEPENDS '.$depends;
          }
          return <<"EOF";
add_custom_command(OUTPUT $gen_out MAIN_DEPENDENCY $gen_in$depends
                   COMMAND \${PERL_EXECUTABLE}$gen_incs $gen_in$gen_args > $gen_out
                   WORKING_DIRECTORY "\${OPENSSL_SRCDIR}")
EOF
      }
  }

 sub src2obj {
     my $asmext = platform->asmext();
     my %args = @_;
     my $product = basename(platform->dsoname($args{product}));
     my $target_n = compute_target_name($args{intent}, $args{product});
     my @srcs = map { my $x = $_;
                      (platform->isasm($x) && grep { $x eq $_ } @generated)
                      ? platform->asm($x) : $x } ( @{$args{srcs}} );
     my $srcs = join(" ",  map { fixup_path(file_name_is_absolute($_) || ($_ =~ m|^../|)
                                            ? $_ : "\${OPENSSL_SRCDIR}/".$_) } @srcs);
     my $src0 = fixup_path("\${OPENSSL_SRCDIR}/".$srcs[0]);
     my $deps = join(';', map { my $x = $_;
                                $x =~ s/\\/\//g;
                                file_name_is_absolute($_) || ($_ =~ m|^../|) ?
                                    $x : escape_cmd("\${OPENSSL_SRCDIR}/".$x) } @{$args{deps}});
     my $makedepcmd = $config{makedepcmd} unless $disabled{makedepend};
     my $obj = platform->obj($args{obj});
     my $dep = platform->dep($args{obj});

    my $recipe;
    if ($srcs[0] =~ /\Q${asmext}\E$/) {
        my $asflags = { shlib => '${LIB_ASFLAGS}',
		        lib => '${LIB_ASFLAGS}',
		        dso => '${DSO_ASFLAGS}',
		        bin => '${BIN_ASFLAGS}' } -> {$args{intent}};
        $recipe .= <<"EOF";
list(APPEND OPENSSL_ASM_SOURCES_$target_n $srcs)
set_source_files_properties($src0 PROPERTIES COMPILE_OPTIONS "$asflags")
EOF
    } elsif ($srcs[0] =~ /.S$/) {
        $recipe .= <<"EOF";
list(APPEND OPENSSL_ASM_S_SOURCES_$target_n $srcs)
EOF
    } else {
        my $defs = { shlib => '${LIB_CPPDEFS}',
		     lib => '${LIB_CPPDEFS}',
		     dso => '${DSO_CPPDEFS}',
		     bin => '${BIN_CPPDEFS}' } -> {$args{intent}};
        if (@{$args{defs}}) {
            $defs .= ";";
            $defs .= join(";", @{$args{defs}});
        }
        $recipe .= <<"EOF";
list(APPEND OPENSSL_SOURCES_$target_n $srcs)
set_source_files_properties($src0 PROPERTIES COMPILE_DEFINITIONS "$defs")
EOF
    }
    if (@{$args{incs}}) {
        my $incs = join(';', map { my $x = "\${OPENSSL_SRCDIR}".($_ eq '.' ? "" : "/$_");
                                   $x =~ s/\\/\//g;
                                   file_name_is_absolute($_) || ($_ =~ m|^../|) ?
                                       $x : escape_cmd($x) } @{$args{incs}});
        $recipe .= <<"EOF";
set_source_files_properties($src0 PROPERTIES INCLUDE_DIRECTORIES "$incs")
EOF
    }
    if (@{$args{deps}}) {
        $recipe .= <<"EOF";
set_source_files_properties($src0 PROPERTIES OBJECT_DEPENDS "$deps")
EOF
    }
    return $recipe;
 }

 # We *know* this routine is only called when we've configure 'shared'.
 # Also, note that even though an import library built here looks like
 # a static library, it really isn't.
 sub obj2shlib {
     my %args = @_;
     my $lib = $args{lib};
     my $dll = platform->sharedlib($lib);
     my $dll_n = compute_target_name('shlib', $lib);
     my @lddefs = map { platform->def($_) }
                  grep { platform->isdef($_) }
                  @{$args{objs}};
     my @deps = compute_lib_depend_targets(@{$args{deps}});
     die "More than one exported symbols list" if scalar @lddefs > 1;
     my $linklibs = join("", map { " $_" } @deps);
     my $incs = join(" ", map { fixup_path("\${OPENSSL_SRCDIR}".($_ eq '.' ? "" : "/$_")) }
                          @{$args{incs}});
     my $defs = join("", map { " -D".$_ } @{$args{defs}});
     my $lddefs = join(" ", map { fixup_path("\${OPENSSL_SRCDIR}/".$_) } @lddefs);
     return <<"EOF"
# Shared library
list(APPEND OPENSSL_SHARED_TARGETS $dll_n)
set(OPENSSL_LINK_LIBRARIES_$dll_n \${LIB_EX_LIBS}$linklibs)
set(OPENSSL_LINK_DEFS_$dll_n $lddefs)
EOF
 }
 sub obj2dso {
     my %args = @_;
     my $dso = basename(platform->dso($args{module}));
     my $dso_n = compute_target_name('dso', $args{module});
     my @lddefs = map { platform->def($_) }
                  grep { platform->isdef($_) }
                  @{$args{objs}};
     my @deps = compute_lib_depend_targets(@{$args{deps}});
     die "More than one exported symbols list" if scalar @lddefs > 1;
     my $incs = join(" ", map { fixup_path("\${OPENSSL_SRCDIR}".($_ eq '.' ? "" : "/$_"))}
                          @{$args{incs}});
     my $defs = join("", map { " -D".$_ } @{$args{defs}});
     my $linklibs = join("",  map { " $_" } @deps);
     my $lddefs = join(" ", map { fixup_path("\${OPENSSL_SRCDIR}/".$_) } @lddefs);
     return <<"EOF";
# DSO library
list(APPEND OPENSSL_DSO_TARGETS $dso_n)
set(OPENSSL_LINK_LIBRARIES_$dso_n \${DSO_EX_LIBS}$linklibs)
set(OPENSSL_LINK_DEFS_$dso_n $lddefs)
EOF
 }
 sub obj2lib {
     my %args = @_;
     my $lib_n = compute_target_name('lib', $args{lib});
     my @deps = compute_lib_depend_targets(@{$args{deps}});
     my $incs = join(" ", map { fixup_path("\${OPENSSL_SRCDIR}".($_ eq '.' ? "" : "/$_")) }
                          @{$args{incs}});
     my $defs = join("", map { " -D".$_ } @{$args{defs}});
     my $recipe = <<"EOF";
# Static library
list(APPEND OPENSSL_STATIC_TARGETS $lib_n)
set(OPENSSL_LINK_LIBRARIES_$lib_n \${LIB_EX_LIBS})
EOF
     if (@deps) {
        my $sourcedeps = join(" ", @deps);
        $recipe .= <<"EOF";
set(OPENSSL_DEPENDENCIES_$lib_n $sourcedeps)
EOF
     }
     return $recipe;
 }
 sub obj2bin {
     my %args = @_;
     my $bin_n = compute_target_name('bin', $args{bin});
     my @deps = compute_lib_depend_targets(@{$args{deps}});
     my $incs = join(" ", map { fixup_path("\${OPENSSL_SRCDIR}".($_ eq '.' ? "" : "/$_")) }
                          @{$args{incs}});
     my $defs = join("", map { " -D".$_ } @{$args{defs}});
     my $linklibs = join("", map { " $_" } @deps);
     return <<"EOF";
# Program binary
list(APPEND OPENSSL_BIN_TARGETS $bin_n)
set(OPENSSL_LINK_LIBRARIES_$bin_n \${BIN_EX_LIBS}$linklibs)
EOF
  }
  sub in2script {
      my %args = @_;
      my $script = fixup_path($args{script});
      my $sources = join(" ", map { fixup_path($_) } @{$args{sources}});
      my $dofile = fixup_path(abs2rel(rel2abs(catfile($config{sourcedir},
                                                      "util", "dofile.pl")),
                                      rel2abs($config{builddir})));
      return <<"EOF";
execute_process(COMMAND "\${PERL_EXECUTABLE}" "-I\${OPENSSL_BLDDIR}" -Mconfigdata $dofile "-o$target{build_file}" $sources
                OUTPUT_FILE $script
                WORKING_DIRECTORY "\${OPENSSL_SRCDIR}"
                COMMAND_ECHO STDERR)
EOF
  }
  sub generatedir {
      # Not needed for CMake generator.
      return <<"EOF";
EOF
  }
  ""    # Important!  This becomes part of the template result.
-}
